.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _sh_protect_heart:

2.21 JEU - Prot√®ge ton C≈ìur
=====================================

Dans ce projet, cr√©ons un jeu qui teste la vitesse de r√©action.

Sur la sc√®ne, un c≈ìur est prot√©g√© dans une bo√Æte rectangulaire, et des fl√®ches volent vers ce c≈ìur depuis n'importe quelle position sur la sc√®ne. La couleur des fl√®ches alterne al√©atoirement entre noir et blanc, et leur vitesse augmente progressivement.

Si la couleur de la bo√Æte rectangulaire et celle de la fl√®che sont identiques, la fl√®che est bloqu√©e √† l'ext√©rieur et le niveau augmente de 1 ; si leurs couleurs diff√®rent, la fl√®che transperce le c≈ìur et la partie se termine.

Ici, la couleur de la bo√Æte rectangulaire est contr√¥l√©e par le module de Suivi de Ligne. Lorsque ce module est plac√© sur une surface noire (une surface r√©fl√©chissante), la couleur de la bo√Æte est noire, sinon elle est blanche.

Ainsi, vous devez d√©cider de placer le module de Suivi de Ligne sur une surface blanche ou noire en fonction de la couleur de la fl√®che.

.. image:: img/22_heart.png

Composants requis
---------------------

Pour ce projet, nous aurons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_track` 
        - |link_track_buy|


Construisez le Circuit
-----------------------

Il s'agit d'un module num√©rique de Suivi de Ligne, lorsqu'une ligne noire est d√©tect√©e, il sort une valeur de 1 ; lorsqu'une ligne blanche est d√©tect√©e, il sort une valeur de 0. De plus, vous pouvez ajuster sa distance de d√©tection gr√¢ce au potentiom√®tre sur le module.

Construisez maintenant le circuit selon le sch√©ma ci-dessous.

.. image:: img/circuit/linetrack_circuit.png

.. note::

    Avant de commencer le projet, vous devez ajuster la sensibilit√© du module.

    C√¢blez selon le sch√©ma ci-dessus, puis alimentez la carte R3 (soit directement via le c√¢ble USB, soit via le c√¢ble de la pile bouton 9V), sans t√©l√©charger le code.

    Collez maintenant un ruban √©lectrique noir sur le bureau, placez le module de Suivi de Ligne √† une hauteur de 2 cm du bureau.

    Avec le capteur orient√© vers le bas, observez la LED de signal sur le module pour vous assurer qu'elle s'allume sur la table blanche et s'√©teint sur le ruban noir.

    Si ce n'est pas le cas, vous devez ajuster le potentiom√®tre sur le module, afin qu'il puisse produire l'effet ci-dessus.


Programmation
------------------

Ici, nous devons cr√©er 3 sprites : **Heart**, **Square Box** et **Arrow1**.

* **Heart** : reste au milieu de la sc√®ne, si touch√© par le sprite **Arrow1**, la partie est termin√©e.
* **Square Box** : Deux types de costumes, noir et blanc, changeront selon la valeur du module de Suivi de Ligne.
* **Arrow** : vole vers le milieu de la sc√®ne depuis n'importe quelle position en noir/blanc ; si sa couleur correspond √† celle du sprite **Square Box**, elle est bloqu√©e et revole vers le milieu de la sc√®ne depuis une position al√©atoire ; si sa couleur ne correspond pas √† celle du sprite **Square Box**, elle traverse le sprite **Heart** et la partie se termine.

**1. Ajouter le sprite Bo√Æte Carr√©e**

Puisque les sprites Fl√®che1 et Bo√Æte Carr√©e ont tous deux des costumes blancs, afin qu'ils puissent √™tre affich√©s sur la sc√®ne, remplissez maintenant l'arri√®re-plan avec une couleur qui peut √™tre n'importe quelle couleur sauf noir, blanc et rouge.

* Cliquez sur **Backdrop1** pour acc√©der √† sa page **Backdrops**.
* S√©lectionnez la couleur que vous souhaitez remplir.
* Utilisez l'outil **Rectangle** pour dessiner un rectangle de la m√™me taille que le tableau de dessin.

.. image:: img/22_heart0.png

Supprimez le sprite par d√©faut, utilisez le bouton **Choose a Sprite** pour ajouter le sprite **Square Box**, et r√©glez ses coordonn√©es x et y √† (0, 0).

.. image:: img/22_heart1.png

Allez √† la page **Costumes** du sprite **Square Box** et r√©glez les costumes noir et blanc.

* Cliquez sur l'outil de s√©lection
* S√©lectionnez le rectangle sur le canevas
* S√©lectionnez la couleur de remplissage en noir
* et nommez le costume **Black**

.. image:: img/22_heart2.png

S√©lectionnez le deuxi√®me costume, r√©glez la couleur de remplissage en blanc, nommez-le Blanc et supprimez les autres costumes.

.. image:: img/22_heart3.png

**2. Ajouter le sprite C≈ìur**

Ajoutez √©galement un sprite **Heart**, r√©glez sa position √† (0, 0), et r√©duisez sa taille pour qu'il semble √™tre situ√© √† l'int√©rieur de la Bo√Æte Carr√©e.

.. image:: img/22_heart5.png

Sur la page **Costumes**, ajustez le costume violet du c≈ìur pour qu'il semble √™tre bris√©.

.. image:: img/22_heart6.png

**3. Ajouter le sprite Fl√®che1**

Ajoutez un sprite **Arrow1**.

.. image:: img/22_heart7.png

Sur la page **Costumes**, gardez et copiez le costume orient√© vers la droite et r√©glez sa couleur en noir et blanc.

.. image:: img/22_heart8.png


**4. Script pour le sprite Bo√Æte Carr√©e**

Retournez √† la page **Blocks** et programmez le sprite **Square Box**.

* Ainsi, lorsque la valeur de la broche num√©rique 2 (module de Suivi de Ligne) est 1 (ligne noire d√©tect√©e), alors changez le costume pour **Black**.
* Sinon, basculez le costume en **White**.

.. image:: img/22_heart4.png


**5. Script pour le sprite C≈ìur**

Le sprite **Heart** est prot√©g√© √† l'int√©rieur de **Square Box**, et par d√©faut a un costume rouge. Lorsque le sprite Fl√®che1 le touche, la partie se termine.

.. image:: img/22_heart9.png

**6. Script pour le sprite Fl√®che1**

Faites que le sprite **Arrow1** se cache et cr√©e un clone lorsque le drapeau vert est cliqu√©.

.. image:: img/22_heart10.png

Cr√©ez un bloc [init] pour initialiser la position, l'orientation et la couleur du sprite **Arrow1**.

Il appara√Æt √† un endroit al√©atoire, et si la distance entre lui et le sprite **Heart** est inf√©rieure √† 200, il se d√©place vers l'ext√©rieur jusqu'√† ce que la distance soit sup√©rieure √† 200.

.. image:: img/22_heart11.png

R√©glez sa direction face au sprite **Heart**.

.. image:: img/22_heart12.png

Faites alterner sa couleur al√©atoirement entre noir/blanc.

* Si la variable couleur est 0, basculez le costume en **White**.
* Si la variable couleur est 1, basculez le costume en **Black**.

.. image:: img/22_heart14.png

Maintenant, laissez-le commencer √† bouger, il se d√©placera plus vite au fur et √† mesure que la valeur de la variable **level** augmente.

.. image:: img/22_heart13.png

Maintenant, r√©glez son effet de collision avec le sprite **Square Box**.

* Si le sprite **Arrow1** et le sprite **Square Box** ont la m√™me couleur (qui sera modifi√©e selon la valeur du module de Suivi de Ligne), soit noir soit blanc, un nouveau clone est cr√©√© et la partie continue.
* Si leurs couleurs ne correspondent pas, le sprite **Arrow1** continue de se d√©placer et la partie se termine lorsqu'il heurte le sprite **Heart**.

.. image:: img/22_heart15.png

.. note::
    Les deux blocs [touch color()] doivent prendre en compte les costumes noir/blanc de Bo√Æte Carr√©e s√©par√©ment.

    .. image:: img/22_heart16.png

