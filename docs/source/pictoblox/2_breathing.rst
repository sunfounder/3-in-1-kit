.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _sh_breathing_led:

2.2 Atmende LED
========================

Verwenden Sie nun eine andere Methode, um die Helligkeit der LED zu steuern. Anders als im vorherigen Projekt wird hier die Helligkeit der LED langsam reduziert, bis sie vollst√§ndig erlischt.

Wenn der Sprite auf der B√ºhne angeklickt wird, erh√∂ht sich die Helligkeit der LED langsam und erlischt dann sofort.

.. image:: img/3_ap.png

Was Sie lernen werden
------------------------

- Den Ausgabewert des PWM-Pins einstellen
- Variablen erstellen
- √Ñndern der Helligkeit des Sprites

Ben√∂tigte Komponenten
------------------------

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten. 

Es ist definitiv praktisch, ein ganzes Set zu kaufen, hier ist der Link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTEN√úBERSICHT
        - KAUF-LINK

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

Schaltung aufbauen
-----------------------

Dieses Projekt verwendet denselben Schaltkreis wie das vorherige Projekt :ref:`sh_table_lamp`. Statt jedoch HIGH/LOW zu verwenden, um die LEDs ein- oder auszuschalten, wird in diesem Projekt das `PWM - Wikipedia <https://en.wikipedia.org/wiki/Pulse-width_modulation>`_ Signal verwendet, um die LED langsam heller zu machen oder zu dimmen.

Der PWM-Signalbereich liegt zwischen 0-255. Auf dem Arduno Uno-Board k√∂nnen die Pins 3, 5, 6, 9, 10, 11 ein PWM-Signal ausgeben; auf dem Mega2560 sind es die Pins 2 - 13, 44 - 46.

.. image:: img/circuit/led_circuit.png

Programmierung
------------------

**1. Einen Sprite ausw√§hlen**

L√∂schen Sie den Standard-Sprite, klicken Sie auf die Schaltfl√§che **Choose a Sprite** in der unteren rechten Ecke des Sprite-Bereichs, geben Sie **button3** in das Suchfeld ein und klicken Sie dann darauf, um es hinzuzuf√ºgen.

.. image:: img/3_sprite.png

**2. Eine Variable erstellen**.

Erstellen Sie eine Variable namens **pwm**, um den Wert der PWM-√Ñnderung zu speichern.

Klicken Sie auf die **Variables**-Palette und w√§hlen Sie **Make a Variable**.

.. image:: img/3_ap_va.png

Geben Sie den Namen der Variable ein; es kann jeder Name sein, aber es wird empfohlen, seine Funktion zu beschreiben. Der Datentyp ist Zahl und f√ºr alle Sprites.

.. image:: img/3_ap_pwm.png

Nach dem Erstellen sehen Sie **pwm** innerhalb der **Variables**-Palette und im aktivierten Zustand. Das bedeutet, dass diese Variable auf der B√ºhne erscheinen wird. Sie k√∂nnen versuchen, sie zu deaktivieren und zu sehen, ob pwm noch auf der B√ºhne pr√§sent ist.

.. image:: img/3_ap_0.png

**3. Den Anfangszustand festlegen**

Wenn der **button3**-Sprite angeklickt wird, wechseln Sie das Kost√ºm zu **button-b** (angeklickter Zustand) und setzen Sie den Anfangswert der Variable **pwm** auf 0.

* [set pwm to 0]: aus der **Variables**-Palette, um den Wert der Variable festzulegen.

.. image:: img/3_ap_brightness.png

**4. Die LED immer heller machen**

Da der Bereich von pwm 255 ist, wird durch den [repeat]-Block die Variable **pwm** um 5 auf 255 akkumuliert und dann in den [set PWM pin]-Block eingegeben, sodass Sie sehen k√∂nnen, wie die LED langsam aufleuchtet.

* [change pwm by 5]: aus der **Variablen**-Palette. L√§sst die Variable jedes Mal eine bestimmte Zahl √§ndern. Es kann eine positive oder negative Zahl sein. Positiv bedeutet jedes Mal eine Erh√∂hung, negativ bedeutet jedes Mal eine Verringerung. Hier wird die Variable pwm jedes Mal um 5 erh√∂ht.
* [set PWM pin]: aus der **Arduino Uno**-Palette, um den Ausgabewert des PWM-Pins festzulegen.

.. image:: img/3_ap_1.png

Schlie√ülich wechseln Sie das Kost√ºm von button3 zur√ºck zu **button-a** und setzen den Wert des PWM-Pins auf 0, sodass die LED langsam aufleuchtet und dann wieder erlischt.

.. image:: img/3_ap_2.png

