.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook‚ÄØ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance experte** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques gr√¢ce √† notre communaut√© et √† notre √©quipe.
    - **Apprenez et partagez** : √âchangez des conseils et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et √† des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

R√®gles d'√©criture des croquis
==================================

Si vous demandez √† un ami d'allumer la lumi√®re, vous pouvez dire ¬´‚ÄØAllume la lumi√®re.‚ÄØ¬ª ou ¬´‚ÄØLumi√®re allum√©e, mec.‚ÄØ¬ª, en adoptant le ton que vous voulez.

Cependant, si vous voulez que la carte Arduino ex√©cute une t√¢che pour vous, vous devez suivre les r√®gles d'√©criture des programmes Arduino pour r√©diger vos commandes.

Ce chapitre contient les r√®gles fondamentales du langage Arduino et vous aidera √† comprendre comment traduire un langage naturel en code.

Bien entendu, c'est un processus qui demande du temps pour √™tre ma√Ætris√©. C'est √©galement la partie la plus sujette aux erreurs pour les d√©butants. Si vous faites souvent des erreurs, ce n'est pas grave‚ÄØ: essayez encore.


Point-virgule ``;``
-------------------

Tout comme un point marque la fin d'une phrase, en langage Arduino, un ``;`` indique la fin d'une commande.

Prenons l'exemple classique du clignotement de la LED int√©gr√©e. Un croquis valide devrait ressembler √† ceci :

Exemple :

.. code-block:: C

    void setup() {
        // Placez ici votre code de configuration, ex√©cut√© une fois :
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // Placez ici votre code principal, ex√©cut√© en boucle :
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

Examinons maintenant deux croquis et devinons s'ils peuvent √™tre correctement interpr√©t√©s par Arduino avant leur ex√©cution.

Croquis A :

.. code-block:: C
    :emphasize-lines: 8,9,10,11

    void setup() {
        // Placez ici votre code de configuration, ex√©cut√© une fois :
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // Placez ici votre code principal, ex√©cut√© en boucle :
        digitalWrite(13,HIGH)
        delay(500)
        digitalWrite(13,LOW)
        delay(500)
    }

Croquis B :

.. code-block:: C
    :emphasize-lines: 8,9,10,11,12,13,14,15,16

    void setup() {
        // Placez ici votre code de configuration, ex√©cut√© une fois :
        pinMode(13,OUTPUT);
    }
    
    void loop() {
        // Placez ici votre code principal, ex√©cut√© en boucle :
        digitalWrite(13,
    HIGH);  delay
        (500
        );
        digitalWrite(13,
        
        LOW);
                delay(500)
        ;
    }

Le r√©sultat‚ÄØ: **Croquis A** g√©n√®re une erreur et **Croquis B** fonctionne.

* Les erreurs dans **Croquis A** sont dues √† l'absence de ``;``. Bien qu'il semble correct, Arduino ne peut pas l'interpr√©ter.
* **Croquis B**, bien que maladroitement pr√©sent√©, est valide pour le compilateur Arduino, car les indentations, sauts de ligne et espaces n'ont pas d'importance.

Cependant, n'√©crivez pas votre code comme **Croquis B**, car il est principalement destin√© √† √™tre lu par des humains. Simplifiez-vous la t√¢che.


Accolades ``{}``
-------------------

Les accolades ``{}`` sont un √©l√©ment cl√© du langage Arduino, et elles doivent appara√Ætre 
par paires. Une bonne pratique consiste √† ins√©rer imm√©diatement une accolade fermante apr√®s 
avoir tap√© une accolade ouvrante, puis √† ins√©rer le code entre les deux.



Commentaires ``//``
----------------------

Les commentaires sont des sections du croquis ignor√©es par le compilateur. Ils servent souvent √† expliquer le fonctionnement du programme.

En √©crivant deux barres obliques ``//`` dans une ligne, tout ce qui suit jusqu'√† la fin de la ligne est ignor√©.

Un nouveau croquis contient par d√©faut deux commentaires. Les supprimer n'affectera pas le croquis.

.. code-block:: C
    :emphasize-lines: 2,7

    void setup() {
        // Placez ici votre code de configuration, ex√©cut√© une fois :

    }

    void loop() {
        // Placez ici votre code principal, ex√©cut√© en boucle :

    }


Les commentaires sont tr√®s utiles. Voici quelques exemples :

* Usage A : Expliquez ce qu'une section de code r√©alise.

.. code-block:: C

    void setup() {
        pinMode(13,OUTPUT); // Configure la broche 13 en mode sortie pour contr√¥ler la LED int√©gr√©e
    }

    void loop() {
        digitalWrite(13,HIGH); // Active la LED int√©gr√©e
        delay(500); // Attente de 500 ms
        digitalWrite(13,LOW); // √âteint la LED int√©gr√©e
        delay(500); // Attente de 500 ms
    }

* Usage B : D√©sactivez temporairement certaines instructions sans les supprimer.

.. code-block:: C
    :emphasize-lines: 3,4,5,6

    void setup() {
        pinMode(13,OUTPUT);
        // digitalWrite(13,HIGH);
        // delay(1000);
        // digitalWrite(13,LOW);
        // delay(1000);
    }

    void loop() {
        digitalWrite(13,HIGH);
        delay(200);
        digitalWrite(13,LOW);
        delay(200);
    }    

.. note:: 
    Utilisez ``Ctrl+/`` pour commenter ou d√©commenter rapidement votre code.

Commentaires ``/**/``
---------------------

Similaires aux ``//``, mais peuvent couvrir plusieurs lignes.

Exemple :

.. code-block:: C
    :emphasize-lines: 1,8,9,10,11

    /* Clignotement */

    void setup() {
        pinMode(13,OUTPUT); 
    }

    void loop() {
        /*
        Le code suivant fait clignoter la LED int√©gr√©e.
        Modifiez le nombre dans delay() pour ajuster la fr√©quence.
        */
        digitalWrite(13,HIGH); 
        delay(500); 
        digitalWrite(13,LOW); 
        delay(500);
    }

``#define``
-------------

Outil utile en C++, ``#define`` remplace un identifiant par une cha√Æne d√©finie.
.. code-block:: C

    #define identifier token-string

Le compilateur remplace automatiquement ``identifier`` par ``token-string`` lorsqu'il le lit, ce qui est g√©n√©ralement utilis√© pour d√©finir des constantes.

√Ä titre d'exemple, voici un croquis utilisant ``define``, ce qui am√©liore la lisibilit√© du code.

.. code-block:: C
    :emphasize-lines: 1,2

    #define ONBOARD_LED 13
    #define DELAY_TIME 500

    void setup() {
        pinMode(ONBOARD_LED,OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED,HIGH); 
        delay(DELAY_TIME); 
        digitalWrite(ONBOARD_LED,LOW); 
        delay(DELAY_TIME);
    }

Pour le compilateur, cela revient √† ceci.

.. code-block:: C

    void setup() {
        pinMode(13,OUTPUT); 
    }

    void loop() {
        digitalWrite(13,HIGH); 
        delay(500); 
        digitalWrite(13,LOW); 
        delay(500);
    }

Nous pouvons constater que l'``identifier`` est remplac√© et n'existe pas dans le programme final.
Il y a donc plusieurs points importants √† noter lors de son utilisation :

1. Une ``token-string`` ne peut √™tre modifi√©e que manuellement et ne peut pas √™tre transform√©e en d'autres valeurs par des op√©rations arithm√©tiques dans le programme.

2. √âvitez d'utiliser des symboles tels que ``;``. Par exemple :

.. code-block:: C
    :emphasize-lines: 1

    #define ONBOARD_LED 13;

    void setup() {
        pinMode(ONBOARD_LED,OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED,HIGH); 
    }

Le compilateur interpr√©tera cela de la mani√®re suivante, ce qui g√©n√©rera une erreur :

.. code-block:: C
    :emphasize-lines: 2,6

    void setup() {
        pinMode(13;,OUTPUT); 
    }

    void loop() {
        digitalWrite(13;,HIGH); 
    }

.. note:: 
    Une convention de nommage pour ``#define`` consiste √† √©crire ``identifier`` en majuscules afin d'√©viter toute confusion avec les variables.
