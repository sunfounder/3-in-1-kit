.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

R√®gle de R√©daction d'un Sketch
================================

Si vous demandez √† un ami d'allumer les lumi√®res pour vous, vous pouvez dire "Allume les lumi√®res.", ou "Lumi√®res allum√©es, mon pote.", vous pouvez utiliser n'importe quel ton de voix que vous souhaitez.

Cependant, si vous voulez que la carte Arduino fasse quelque chose pour vous, vous devez suivre les r√®gles de r√©daction des programmes Arduino pour taper les commandes.

Ce chapitre contient les r√®gles de base du langage Arduino et vous aidera √† comprendre comment traduire le langage naturel en code.

Bien s√ªr, c'est un processus qui prend du temps pour se familiariser, et c'est aussi la partie du processus la plus sujette aux erreurs pour les d√©butants, donc si vous faites souvent des erreurs, c'est normal, essayez juste quelques fois de plus.


Point-virgule ``;``
---------------------

Tout comme l'√©criture d'une lettre, o√π vous mettez un point √† la fin de chaque phrase comme fin, le langage Arduino vous demande d'utiliser ``;`` pour indiquer √† la carte la fin de la commande.

Prenons l'exemple familier du "clignotement de la LED int√©gr√©e". Un sketch correct devrait ressembler √† ceci.

Exemple :

.. code-block:: C

    void setup() {
        // put your setup code here, to run once:
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // put your main code here, to run repeatedly:
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

Ensuite, examinons les deux sketches suivants et devinons s'ils peuvent √™tre correctement reconnus par Arduino avant de les ex√©cuter.

Sketch A :

.. code-block:: C
    :emphasize-lines: 8,9,10,11

    void setup() {
        // put your setup code here, to run once:
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // put your main code here, to run repeatedly:
        digitalWrite(13,HIGH)
        delay(500)
        digitalWrite(13,LOW)
        delay(500)
    }

Sketch B :

.. code-block:: C
    :emphasize-lines: 8,9,10,11,12,13,14,15,16

    void setup() {
        // put your setup code here, to run once:
        pinMode(13,OUTPUT);
    }
    
    void loop() {
        // put your main code here, to run repeatedly:
        digitalWrite(13,
    HIGH);  delay
        (500
        );
        digitalWrite(13,
        
        LOW);
                delay(500)
        ;
    }

Le r√©sultat est que le **Sketch A** signale une erreur et le **Sketch B** fonctionne.

* Les erreurs dans le **Sketch A** sont dues √† l'absence de ``;`` et bien qu'il semble normal, l'Arduino ne peut pas le lire.
* Le **Sketch B**, bien qu'il paraisse anti-humain, est en fait compr√©hensible pour l'Arduino. En effet, l'indentation, les sauts de ligne et les espaces dans les instructions sont des √©l√©ments qui n'existent pas dans les programmes Arduino, donc pour le compilateur Arduino, il appara√Æt identique √† l'exemple.

Cependant, veuillez ne pas √©crire votre code comme le **Sketch B**, car ce sont g√©n√©ralement des personnes naturelles qui √©crivent et consultent le code, donc ne vous compliquez pas la t√¢che.


Accolades ``{}``
------------------

Les ``{}`` sont un composant principal du langage de programmation Arduino, et elles doivent appara√Ætre par paires. 
Une meilleure convention de programmation est d'ins√©rer une structure n√©cessitant des accolades en tapant l'accolade droite juste apr√®s avoir tap√© l'accolade gauche, puis en d√©pla√ßant le curseur entre les accolades pour ins√©rer l'instruction.



Commentaire ``//``
------------------

Le commentaire est la partie du sketch que le compilateur ignore. Ils sont g√©n√©ralement utilis√©s pour expliquer aux autres comment fonctionne le programme.

Si nous √©crivons deux barres obliques adjacentes dans une ligne de code, le compilateur ignorera tout jusqu'√† la fin de la ligne.

Si nous cr√©ons un nouveau sketch, il est livr√© avec deux commentaires, et si nous supprimons ces deux commentaires, le sketch ne sera en aucun cas affect√©.


.. code-block:: C
    :emphasize-lines: 2,7

    void setup() {
        // put your setup code here, to run once:

    }

    void loop() {
        // put your main code here, to run repeatedly:

    }


Le commentaire est tr√®s utile en programmation, et plusieurs utilisations courantes sont list√©es ci-dessous.

* Utilisation A : Se dire √† soi-m√™me ou √† d'autres ce que cette section de code fait.

.. code-block:: C

    void setup() {
        pinMode(13,OUTPUT); //Set pin 13 to output mode, it controls the onboard LED
    }

    void loop() {
        digitalWrite(13,HIGH); // Activate the onboard LED by setting pin 13 high
        delay(500); // Status quo for 500 ms
        digitalWrite(13,LOW); // Turn off the onboard LED
        delay(500);// Status quo for 500 ms
    }

* Utilisation B : Invalider temporairement certaines d√©clarations (sans les supprimer) et les d√©commenter lorsque vous avez besoin de les utiliser, pour ne pas avoir √† les r√©√©crire. Cela est tr√®s utile lors du d√©bogage du code et de la tentative de localisation des erreurs du programme.

.. code-block:: C
    :emphasize-lines: 3,4,5,6

    void setup() {
        pinMode(13,OUTPUT);
        // digitalWrite(13,HIGH);
        // delay(1000);
        // digitalWrite(13,LOW);
        // delay(1000);
    }

    void loop() {
        digitalWrite(13,HIGH);
        delay(200);
        digitalWrite(13,LOW);
        delay(200);
    }    

.. note:: 
    Utilisez le raccourci ``Ctrl+/`` pour vous aider √† commenter ou d√©commenter rapidement votre code.

Commentaire ``/**/``
-----------------------

Comme ``//`` pour les commentaires. Ce type de commentaire peut s'√©tendre sur plus d'une ligne, et une fois que le compilateur lit ``/*``, il ignore tout ce qui suit jusqu'√† ce qu'il rencontre ``*/``.

Exemple 1 :

.. code-block:: C
    :emphasize-lines: 1,8,9,10,11

    /* Blink */

    void setup() {
        pinMode(13,OUTPUT); 
    }

    void loop() {
        /*
        The following code will blink the onboard LED
        You can modify the number in delay() to change the blinking frequency
        */
        digitalWrite(13,HIGH); 
        delay(500); 
        digitalWrite(13,LOW); 
        delay(500);
    }


``#define``
--------------

C'est un outil utile de C++.

.. code-block:: C

    #define identifier token-string

Le compilateur remplace automatiquement ``identifier`` par ``token-string`` lorsqu'il le lit, ce qui est g√©n√©ralement utilis√© pour des d√©finitions constantes.

Par exemple, voici un sketch qui utilise define, ce qui am√©liore la lisibilit√© du code.

.. code-block:: C
    :emphasize-lines: 1,2

    #define ONBOARD_LED 13
    #define DELAY_TIME 500

    void setup() {
        pinMode(ONBOARD_LED,OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED,HIGH); 
        delay(DELAY_TIME); 
        digitalWrite(ONBOARD_LED,LOW); 
        delay(DELAY_TIME);
    }

Pour le compilateur, cela ressemble r√©ellement √† ceci.

.. code-block:: C

    void setup() {
        pinMode(13,OUTPUT); 
    }

    void loop() {
        digitalWrite(13,HIGH); 
        delay(500); 
        digitalWrite(13,LOW); 
        delay(500);
    }

Nous pouvons voir que l'``identifiant`` est remplac√© et n'existe pas dans le programme.
Par cons√©quent, il y a plusieurs mises en garde lors de son utilisation.

1. Une ``token-string`` ne peut √™tre modifi√©e manuellement et ne peut pas √™tre convertie en d'autres valeurs par arithm√©tique dans le programme.

2. √âvitez d'utiliser des symboles tels que ``;``. Par exemple.

.. code-block:: C
    :emphasize-lines: 1

    #define ONBOARD_LED 13;

    void setup() {
        pinMode(ONBOARD_LED,OUTPUT); 
    }

    void loop() {
        digitalWrite(ONBOARD_LED,HIGH); 
    }

Le compilateur le reconna√Ætra comme suit, ce qui sera signal√© comme une erreur.

.. code-block:: C
    :emphasize-lines: 2,6

    void setup() {
        pinMode(13;,OUTPUT); 
    }

    void loop() {
        digitalWrite(13;,HIGH); 
    }

.. note:: 
    Une convention de nommage pour ``#define`` est de mettre en majuscule l'``identifier`` pour √©viter la confusion avec les variables.
