.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook‚ÄØ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance experte** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† notre communaut√© et √† notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions et concours festifs** : Participez √† des concours et √† des promotions de f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Structure d'un programme Arduino
=====================================

Examinons un nouveau fichier de croquis. Bien qu'il ne contienne que quelques lignes de code, il s'agit en fait d'un croquis ¬´ vide ¬ª. 
T√©l√©verser ce croquis sur la carte de d√©veloppement n'aura aucun effet.

.. code-block:: C

    void setup() {
    // placez ici votre code de configuration, √† ex√©cuter une fois :

    }

    void loop() {
    // placez ici votre code principal, √† ex√©cuter en boucle :

    }

Si nous supprimons ``setup()`` et ``loop()`` et rendons le croquis v√©ritablement ¬´ vide ¬ª, vous constaterez qu'il ne passe pas la v√©rification. 
Ils sont l'√©quivalent du squelette humain, et ils sont indispensables.

Lors de l'√©criture d'un croquis, ``setup()`` est ex√©cut√© en premier, et le code qu'il contient (entre ``{}``) est ex√©cut√© une fois lorsque la carte est aliment√©e ou r√©initialis√©e. 
``loop()`` est utilis√© pour √©crire les fonctionnalit√©s principales, et le code qu'il contient sera ex√©cut√© en boucle apr√®s ``setup()``.

Pour mieux comprendre ``setup()`` et ``loop()``, utilisons quatre croquis. Leur objectif est de faire clignoter la LED int√©gr√©e de l'Arduino. Veuillez ex√©cuter chaque exp√©rience √† tour de r√¥le et observer leurs effets sp√©cifiques.

* Croquis 1 : Faire clignoter la LED int√©gr√©e en continu.

.. code-block:: C
    :emphasize-lines: 8,9,10,11

    void setup() {
        // placez ici votre code de configuration, √† ex√©cuter une fois :
        pinMode(13,OUTPUT); 
    }

    void loop() {
        // placez ici votre code principal, √† ex√©cuter en boucle :
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

* Croquis 2 : Faire clignoter la LED int√©gr√©e une seule fois.

.. code-block:: C
    :emphasize-lines: 4,5,6,7

    void setup() {
        // placez ici votre code de configuration, √† ex√©cuter une fois :
        pinMode(13,OUTPUT);
        digitalWrite(13,HIGH);
        delay(500);
        digitalWrite(13,LOW);
        delay(500);
    }

    void loop() {
        // placez ici votre code principal, √† ex√©cuter en boucle :
    }

* Croquis 3 : Faire clignoter lentement la LED int√©gr√©e une fois, puis rapidement.

.. code-block:: C
    :emphasize-lines: 4,5,6,7,12,13,14,15

    void setup() {
        // placez ici votre code de configuration, √† ex√©cuter une fois :
        pinMode(13,OUTPUT);
        digitalWrite(13,HIGH);
        delay(1000);
        digitalWrite(13,LOW);
        delay(1000);
    }

    void loop() {
        // placez ici votre code principal, √† ex√©cuter en boucle :
        digitalWrite(13,HIGH);
        delay(200);
        digitalWrite(13,LOW);
        delay(200);
    }    

* Croquis 4 : Provoquer une erreur.

.. code-block:: C
    :emphasize-lines: 6,7,8,9

    void setup() {
        // placez ici votre code de configuration, √† ex√©cuter une fois :
        pinMode(13,OUTPUT);
    }

    digitalWrite(13,HIGH);
    delay(1000);
    digitalWrite(13,LOW);
    delay(1000);

    void loop() {
        // placez ici votre code principal, √† ex√©cuter en boucle :
    }    

Gr√¢ce √† ces croquis, nous pouvons r√©sumer plusieurs caract√©ristiques de ``setup-loop``.

* ``loop()`` sera ex√©cut√© en boucle apr√®s l'alimentation de la carte.
* ``setup()`` sera ex√©cut√© une seule fois apr√®s l'alimentation de la carte.
* Apr√®s l'alimentation de la carte, ``setup()`` sera ex√©cut√© en premier, suivi de ``loop()``.
* Le code doit √™tre √©crit dans le champ de ``{}`` de ``setup()`` ou ``loop()``, en dehors de ce cadre, il g√©n√©rera une erreur.

.. note::  
    Les instructions telles que ``digitalWrite(13,HIGH)`` servent √† contr√¥ler la LED int√©gr√©e, et nous d√©taillerons leur usage dans les chapitres suivants.
