.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

Variable
========

Die Variable ist eines der m√§chtigsten und kritischsten Werkzeuge in einem Programm. Sie hilft uns, Daten in unseren Programmen zu speichern und abzurufen.

Die folgende Skizzen-Datei verwendet Variablen. Sie speichert die Pinnummern der Onboard-LED in der Variable ``ledPin`` und eine Zahl "500" in der Variable ``delayTime``.

.. code-block:: C
    :emphasize-lines: 1,2

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
    }

Wartet, ist das ein Duplikat von dem, was ``#define`` macht? Die Antwort ist NEIN.

* Die Rolle von ``#define`` besteht einfach darin, Text direkt zu ersetzen, er wird vom Compiler nicht als Teil des Programms betrachtet.
* Eine ``Variable`` hingegen existiert innerhalb des Programms und wird verwendet, um Wert zu speichern und abzurufen. Eine Variable kann ihren Wert auch innerhalb des Programms √§ndern, was ein define nicht tun kann.

Die untenstehende Skizzen-Datei f√ºgt sich selbst der Variable hinzu und l√§sst die Onboard-LED nach jedem Blinken l√§nger blinken.

.. code-block:: C

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
        delayTime = delayTime+200; //Each execution increments the value by 200
    }

Variable deklarieren
-----------------------

Eine Variable zu deklarieren bedeutet, eine Variable zu erstellen.

Um eine Variable zu deklarieren, ben√∂tigt man zwei Dinge: den Datentyp und den Variablennamen. Der Datentyp muss durch ein Leerzeichen von der Variable getrennt werden, und die Variablendeklaration muss mit einem ``;`` beendet werden.

Nehmen wir diese Variable als Beispiel.

.. code-block:: C

    int delayTime;

**Datentyp**

Hier ist ``int`` ein Datentyp namens Ganzzahltyp, der verwendet werden kann, um Ganzzahlen von -32768 bis 32766 zu speichern. Er kann auch nicht zum Speichern von Dezimalzahlen verwendet werden.

Variablen k√∂nnen verschiedene Arten von Daten speichern, nicht nur Ganzzahlen. Die Arduino-Sprache (die, erinnern wir uns, C++ ist) hat eingebaute Unterst√ºtzung f√ºr einige von ihnen (hier sind nur die am h√§ufigsten verwendeten und n√ºtzlichsten aufgelistet):

* ``float``: Speichert eine Dezimalzahl, zum Beispiel 3,1415926.
* ``byte``: Kann Zahlen von 0 bis 255 speichern.
* ``boolean``: Speichert nur zwei m√∂gliche Werte, ``True`` oder ``False``, obwohl es einen Byte im Speicher belegt.
* ``char``: Speichert eine Zahl von -127 bis 127. Weil es als ``char`` gekennzeichnet ist, wird der Compiler versuchen, es einem Zeichen aus dem |link_ascii| zuzuordnen.
* ``string``: Kann eine Zeichenkette speichern, z.B. ``Halloween``.

**Variablenname**

Sie k√∂nnen die Variable nach Belieben benennen, z.B. ``i``, ``apple``, ``Bruce``, ``R2D2``, ``Sectumsempra``, aber es gibt einige grundlegende Regeln zu beachten.

1. Beschreiben Sie, wof√ºr sie verwendet wird. Hier habe ich die Variable delayTime benannt, so dass man leicht verstehen kann, was sie tut. Es funktioniert gut, wenn ich die Variable ``barryAllen`` nenne, aber es verwirrt die Person, die den Code ansieht.

2. Verwenden Sie eine g√§ngige Nomenklatur. Sie k√∂nnen CamelCase verwenden, wie ich es getan habe, mit dem Anfangsbuchstaben T in ``delayTime``, so dass es leicht zu sehen ist, dass die Variable aus zwei W√∂rtern besteht. Sie k√∂nnen auch UnderScoreCase verwenden, um die Variable als ``delay_time`` zu schreiben. Es beeinflusst nicht das Laufen des Programms, aber es w√ºrde dem Programmierer helfen, den Code zu lesen, wenn Sie die Nomenklatur verwenden, die Sie bevorzugen.

3. Verwenden Sie keine Schl√ºsselw√∂rter. √Ñhnlich wie bei der Eingabe von "int" f√§rbt die Arduino-IDE es, um Sie daran zu erinnern, dass es ein Wort mit einem besonderen Zweck ist und nicht als Variablenname verwendet werden kann. √Ñndern Sie den Namen der Variable, wenn sie gef√§rbt ist.

4. Sonderzeichen sind nicht erlaubt. Zum Beispiel: Leerzeichen, #, $, /, +, % usw. Die Kombination aus englischen Buchstaben (Gro√ü-/Kleinschreibung), Unterstrichen und Zahlen (aber Zahlen k√∂nnen nicht als erstes Zeichen eines Variablennamens verwendet werden) ist reichlich vorhanden.

**Einen Wert einer Variable zuweisen**

Nachdem wir die Variable deklariert haben, ist es an der Zeit, die Daten zu speichern. Wir verwenden den Zuweisungsoperator (d.h. ``=``), um den Wert in die Variable zu setzen.

Wir k√∂nnen der Variable Werte zuweisen, sobald wir sie deklariert haben.

.. code-block:: C

    int delayTime = 500;

Es ist auch m√∂glich, ihm zu einem sp√§teren Zeitpunkt einen neuen Wert zuzuweisen.

.. code-block:: C

    int delayTime; // no value
    delayTime = 500; // value is 500
    delayTime = delayTime +200; // value is 700
