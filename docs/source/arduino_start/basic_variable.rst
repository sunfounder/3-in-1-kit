.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder d√©di√©e aux passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Variable
========

La variable est l'un des outils les plus puissants et essentiels d'un programme. Elle nous permet de stocker et d'utiliser des donn√©es dans nos programmes.

Le sketch suivant utilise des variables. Il stocke le num√©ro de la broche de la LED int√©gr√©e dans la variable ``ledPin`` et un nombre "500" dans la variable ``delayTime``.

.. code-block:: C
    :emphasize-lines: 1,2

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
    }

Attendez, est-ce un doublon avec ce que fait ``#define`` ? La r√©ponse est NON.

* Le r√¥le de ``#define`` est de simplement remplacer du texte ; il n'est pas consid√©r√© par le compilateur comme faisant partie du programme. 
* Une ``variable``, en revanche, existe au sein du programme et est utilis√©e pour stocker et appeler une valeur. Une variable peut √©galement modifier sa valeur dans le programme, ce qu'un ``define`` ne peut pas faire.

Le sketch ci-dessous s'auto-incr√©mente dans la variable, ce qui allonge progressivement le temps d'allumage de la LED int√©gr√©e √† chaque clignotement.

.. code-block:: C

    int ledPin = 13;
    int delayTime = 500;

    void setup() {
        pinMode(ledPin,OUTPUT); 
    }

    void loop() {
        digitalWrite(ledPin,HIGH); 
        delay(delayTime); 
        digitalWrite(ledPin,LOW); 
        delay(delayTime);
        delayTime = delayTime+200; // √Ä chaque ex√©cution, la valeur est incr√©ment√©e de 200
    }

D√©clarer une variable
----------------------

D√©clarer une variable signifie cr√©er une variable.

Pour d√©clarer une variable, vous avez besoin de deux √©l√©ments : le type de donn√©es et le nom de la variable. Le type de donn√©es doit √™tre s√©par√© du nom de la variable par un espace, et la d√©claration doit √™tre termin√©e par un ``;``.

Prenons cet exemple de variable.

.. code-block:: C

    int delayTime;

**Type de donn√©es**

Ici, ``int`` est un type de donn√©es appel√© entier, qui peut stocker des nombres entiers allant de -32768 √† 32766. Il ne peut pas √™tre utilis√© pour stocker des nombres d√©cimaux.

Les variables peuvent contenir diff√©rents types de donn√©es autres que des entiers. Le langage Arduino (qui, rappelons-le, est du C++) prend en charge plusieurs types de donn√©es int√©gr√©s (seuls les plus fr√©quemment utilis√©s et utiles sont list√©s ici) :

* ``float`` : Stocke un nombre d√©cimal, par exemple 3.1415926.
* ``byte`` : Peut contenir des nombres de 0 √† 255.
* ``boolean`` : Contient seulement deux valeurs possibles, ``True`` ou ``False``, bien qu'il occupe un octet en m√©moire.
* ``char`` : Contient un nombre de -127 √† 127. Parce qu'il est marqu√© comme un ``char``, le compilateur essaiera de le faire correspondre √† un caract√®re de la table ASCII |link_ascii|.
* ``string`` : Peut contenir une cha√Æne de caract√®res, par exemple ``Halloween``.

**Nom de la variable**

Vous pouvez attribuer √† la variable n'importe quel nom, comme ``i``, ``apple``, ``Bruce``, ``R2D2``, ``Sectumsempra``, mais il y a quelques r√®gles de base √† suivre.

1. D√©crivez son utilisation. Ici, j'ai nomm√© la variable ``delayTime``, pour que vous compreniez facilement son r√¥le. Cela fonctionnerait aussi avec un nom comme ``barryAllen``, mais cela pourrait d√©sorienter la personne qui lit le code.

2. Utilisez une nomenclature r√©guli√®re. Vous pouvez utiliser CamelCase, comme je l'ai fait avec le T majuscule dans ``delayTime`` pour indiquer facilement que la variable est compos√©e de deux mots. Vous pouvez aussi utiliser l'UnderScoreCase, en √©crivant la variable ``delay_time``. Cela n'affecte pas l'ex√©cution du programme, mais cela aide le programmeur √† lire le code si vous √™tes coh√©rent.

3. N'utilisez pas de mots-cl√©s. Comme lorsque vous tapez "int", l'IDE Arduino le colore pour vous rappeler que c'est un mot √† usage sp√©cial, qui ne peut pas √™tre utilis√© comme nom de variable. Changez le nom de la variable si elle est color√©e.

4. Les symboles sp√©ciaux ne sont pas autoris√©s. Par exemple, les espaces, #, $, /, +, %, etc. La combinaison de lettres anglaises (sensibles √† la casse), d'underscores et de chiffres (mais les chiffres ne peuvent pas √™tre utilis√©s comme premier caract√®re d'un nom de variable) est suffisamment riche.

**Attribuer une valeur √† une variable**

Une fois la variable d√©clar√©e, il est temps de lui attribuer des donn√©es. Nous utilisons l'op√©rateur d'affectation (i.e. ``=``) pour placer une valeur dans la variable.

Nous pouvons attribuer une valeur √† la variable d√®s sa d√©claration.

.. code-block:: C

    int delayTime = 500;

Il est √©galement possible de lui attribuer une nouvelle valeur ult√©rieurement.

.. code-block:: C

    int delayTime; // pas de valeur
    delayTime = 500; // valeur : 500
    delayTime = delayTime +200; // valeur : 700
