.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et des concours pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _iot_music:

4. Lecteur de musique en ligne
=====================================

Le but de ce projet est de cr√©er un lecteur de musique en utilisant Blynk.
La musique est jou√©e de la m√™me mani√®re que dans :ref:`ar_passive_buzzer`, en √©crivant la chanson dans le programme et en la jouant avec un buzzer passif. 
Cependant, dans cet exemple, nous pouvons cliquer sur un interrupteur pour jouer/mettre en pause et d√©placer un curseur pour modifier la progression de la lecture.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants. 

Il est bien s√ªr pratique d'acheter un kit complet. Voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|

**1. Construire le circuit**

.. note::

    Le module ESP8266 n√©cessite un courant √©lev√© pour assurer un environnement de fonctionnement stable. Assurez-vous que la batterie 9V est connect√©e.

.. image:: img/iot_4_bb.png
    :width: 600
    :align: center

**2. Modifier le tableau de bord**

#. Cr√©ez un **Datastream** de type **Virtual Pin** sur la page **Datastream** comme valeur modifi√©e par le widget curseur ajout√© ou par le code. R√©glez le TYPE DE DONN√âES sur **Integer** et les valeurs MIN et MAX sur **0** et **30**.

    .. image:: img/sp220610_104330.png

#. Cr√©ez √©galement un autre **Datastream** de type **Virtual Pin** pour afficher le nom de la musique, et d√©finissez le TYPE DE DONN√âES sur ``String``.

    .. image:: img/sp220610_105932.png

#. Acc√©dez √† la page **Web Dashboard**, faites glisser un widget **Switch** et d√©finissez **Datastream** sur V0 (V0 est d√©j√† configur√© dans :ref:`iot_blink`), faites glisser un widget **Label** et d√©finissez-le sur V3, puis faites glisser un widget **Slider** et d√©finissez-le sur V2.

    .. image:: img/blynk_music_cloud.png

.. note::

    Vos broches virtuelles peuvent √™tre diff√©rentes des miennes. Vous devrez ajuster les num√©ros de broches correspondants dans le code.



**3. Ex√©cuter le code**

#. Ouvrez le fichier ``4.cloud_music_player.ino`` situ√© dans ``3in1-kit\iot_project\4.cloud_music_player``.

    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/34a49c4b-9eb4-4d03-bd78-fe1daefc9f5c/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Remplacez les valeurs ``Template ID``, ``Device Name``, et ``Auth Token`` par vos informations personnelles. Entrez √©galement le ``ssid`` et le ``password`` de votre r√©seau WiFi. Pour des tutoriels d√©taill√©s, reportez-vous √† :ref:`connect_blynk`.
#. Apr√®s avoir s√©lectionn√© la carte et le port appropri√©s, cliquez sur le bouton **T√©l√©verser**.

#. Ouvrez le Moniteur S√©rie (r√©glez le d√©bit en bauds √† 115200) et attendez qu'un message de connexion r√©ussie apparaisse.

    .. image:: img/2_ready.png

    .. note::

        Si le message ``ESP is not responding`` s'affiche lors de la connexion, suivez ces √©tapes.

        * Assurez-vous que la batterie 9V est branch√©e.
        * R√©initialisez le module ESP8266 en connectant la broche RST √† GND pendant 1 seconde, puis d√©branchez-la.
        * Appuyez sur le bouton de r√©initialisation sur la carte R4.

        Vous devrez peut-√™tre r√©p√©ter ces √©tapes 3 √† 5 fois. Soyez patient.

#. Vous pouvez maintenant utiliser le widget de contr√¥le Bouton de Blynk pour d√©marrer/mettre en pause la musique et le curseur pour ajuster la progression de la lecture. Le nom de la musique s'affichera √©galement.

    .. image:: img/blynk_music_cloud.png

#. Si vous souhaitez utiliser Blynk sur des appareils mobiles, reportez-vous √† :ref:`blynk_mobile`.


**Comment cela fonctionne-t-il ?**

Le datastream **V0** est utilis√© pour obtenir l'√©tat du widget Switch et l'assigner √† la variable **musicPlayFlag**, qui contr√¥le la pause et la lecture de la musique.

.. code-block:: arduino

    int musicPlayFlag=0;

    BLYNK_WRITE(V0)
    {
        musicPlayFlag = param.asInt(); // D√âMARRER/PAUSE MUSIQUE
    }

Le datastream **V2** est utilis√© pour obtenir la valeur du widget curseur et l'assigner √† la variable **scrubBar** lorsque le curseur est d√©plac√©.

.. code-block:: arduino

    int scrubBar=0;

    BLYNK_WRITE(V2)
    {
        scrubBar=param.asInt();
    }

Lorsque l'appareil est connect√© au **Blynk Cloud**, √©crivez le nom de la musique dans le datastream **V3** et affichez-le √† l'aide du widget **Label**.

.. code-block:: arduino

    BLYNK_CONNECTED() {
        String songName = "Ode to Joy";
        Blynk.virtualWrite(V3, songName);
    }

Le **Blynk Timer** s'ex√©cutera chaque seconde. La musique est jou√©e si **musicPlayFlag** n'est pas √©gal √† 0, c'est-√†-dire si le widget **Switch** est activ√©.
Apr√®s que deux notes ont √©t√© jou√©es, la variable de la barre de progression ``scrubBar`` est incr√©ment√©e de 2, et la valeur est ensuite √©crite dans le **Blynk Cloud**, qui synchronise la valeur du widget **Slider**.

.. code-block:: arduino

    void myTimerEvent()
    {
        if(musicPlayFlag!=0)
        {
            tone(buzzerPin,melody[scrubBar],250);
            scrubBar=(scrubBar+1)%(sizeof(melody)/sizeof(int));
            delay(500);
            tone(buzzerPin,melody[scrubBar],250);
            scrubBar=(scrubBar+1)%(sizeof(melody)/sizeof(int));
            Serial.println(scrubBar);    
            Blynk.virtualWrite(V2, scrubBar);
        }
    }