.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _iot_home:

5. √úberwachung des h√§uslichen Umfelds
===========================================

In diesem Kapitel werden wir Blynk verwenden, um einen Monitor f√ºr die h√§usliche Umgebung zu erstellen.
Mit dem DHT11 und dem Fotowiderstand k√∂nnen Sie die Temperatur, Luftfeuchtigkeit und Lichtintensit√§t eines Raumes messen.
Indem Sie diese Werte an Blynk senden, k√∂nnen Sie die Umgebung Ihres Zuhauses √ºber das Internet √ºberwachen.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktischer, ein komplettes Set zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Alternativ k√∂nnen Sie diese auch √ºber die untenstehenden Links einzeln erwerben.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_photoresistor`
        - |link_photoresistor_buy|
    *   - :ref:`cpn_dht11`
        - \-

**1. Den Schaltkreis aufbauen**

.. note::

    Das ESP8266-Modul ben√∂tigt einen hohen Strom, um eine stabile Betriebsumgebung zu gew√§hrleisten. Stellen Sie sicher, dass die 9V-Batterie angeschlossen ist.

.. image:: img/wiring_dht11.jpg

**2. Dashboard bearbeiten**

#. F√ºr die Erfassung von Luftfeuchtigkeitswerten erstellen Sie einen **Datastream** vom Typ **Virtual Pin** auf der **Datastream**-Seite. Legen Sie den DATENTYP auf **Double** und MIN und MAX auf **0** und **100** fest. Setzen Sie auch die Einheiten auf **Percentage, %**.

    .. image:: img/sp220610_145748.png

#. Erstellen Sie anschlie√üend einen **Datastream** vom Typ **Virtual Pin** zur Erfassung der Temperatur. Legen Sie den DATENTYP auf ``Double``, MIN und MAX auf ``-30`` und ``50`` und die Einheiten auf **Celsius, ¬∞C** fest.

    .. image:: img/sp220610_145811.png

#. Erstellen Sie zudem einen **Datastream** vom Typ **Virtual Pin** zur Erfassung der Lichtintensit√§t. Nutzen Sie den Standarddatentyp - **Integer** mit den Werten MIN und MAX, die auf ``0`` und ``1024`` festgelegt sind.

    .. image:: img/sp220610_145834.png

#. Navigieren Sie zur **Wed Dashboard**-Seite, ziehen Sie zwei **Label**-Widgets und weisen Sie ihnen die Datenstr√∂me **V4** und **V5** zu. Ziehen Sie ein **Gauge**-Widget und setzen Sie den Datenstrom auf **V6**. In den Widget-Einstellungen k√∂nnen Sie **Farbwechsel basierend auf Wert** aktivieren und die passende Farbe w√§hlen, um das Widget ansprechender und intuitiver zu gestalten.

.. image:: img/sp220610_150400.png
    :align: center



**3. Den Code ausf√ºhren**

#. √ñffnen Sie die Datei ``5.home_environment_monitoring.ino`` unter dem Pfad ``3in1-kit\iot_project\5.home_environment_monitoring`` oder kopieren Sie diesen Code in die **Arduino IDE**.

    .. note::

        * Hier wird die ``DHT sensor library`` verwendet. Sie k√∂nnen sie √ºber den **Library Manager** installieren.

            .. image:: ../img/lib_dht11.png

    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/4f0ad85e-8aff-4df9-99dd-c6741aed8219/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Ersetzen Sie die ``Template ID``, ``Device Name`` und ``Auth Token`` durch Ihre eigenen Angaben. Sie m√ºssen auch das ``ssid`` und das ``password`` des von Ihnen verwendeten WLANs eingeben. F√ºr detaillierte Anleitungen verweisen Sie bitte auf :ref:`connect_blynk`.
#. Nach Auswahl des richtigen Boards und Ports klicken Sie auf die **Upoad**-Taste.

#. √ñffnen Sie den seriellen Monitor (Baudrate auf 115200 einstellen) und warten Sie, bis eine Meldung wie eine erfolgreiche Verbindung erscheint.

    .. image:: img/2_ready.png

    .. note::

        Wenn beim Verbinden die Meldung ``ESP antwortet nicht`` erscheint, befolgen Sie bitte diese Schritte.

        * Stellen Sie sicher, dass die 9V-Batterie angeschlossen ist.
        * Setzen Sie das ESP8266-Modul zur√ºck, indem Sie den RST-Pin f√ºr 1 Sekunde auf GND setzen und dann trennen.
        * Dr√ºcken Sie die Reset-Taste auf dem R3-Board.

        Manchmal m√ºssen Sie den oben beschriebenen Vorgang 3-5 Mal wiederholen, bitte haben Sie Geduld.

#. Nun sehen Sie die aktuelle Umgebungstemperatur, Luftfeuchtigkeit und Lichtintensit√§t auf Blynk.

    .. image:: img/sp220610_150400.png
        :align: center

#. Wenn Sie Blynk auf mobilen Ger√§ten verwenden m√∂chten, verweisen Sie bitte auf :ref:`blynk_mobile`.

    .. image:: img/mobile_home.jpg

**Wie funktioniert das?**

Diese beiden Funktionen werden verwendet, um die Temperatur, Luftfeuchtigkeit und Lichtintensit√§t des Raumes zu ermitteln.


.. code-block:: arduino

    int readLight(){
        return analogRead(lightPin);
    }

    bool readDHT() {

        // Reading temperature or humidity takes about 250 milliseconds!
        // Sensor readings may also be up to 2 seconds 'old' (it's a very slow sensor)
        humidity = dht.readHumidity();
        // Read temperature as Celsius (the default)
        temperature = dht.readTemperature();

        // Check if any reads failed and exit early (to try again).
        if (isnan(humidity) || isnan(temperature)) {
            Serial.println("Failed to read from DHT sensor!");
            return false;
        }
        return true;
    }

Mit dem Blynk ``Timer`` werden die Umgebungstemperatur, Luftfeuchtigkeit und Lichtintensit√§t jede Sekunde abgerufen und an den Datenstrom auf der Blynk Cloud gesendet, von wo aus die Widgets die Daten anzeigen.

.. code-block:: arduino

    void myTimerEvent()
    {
        bool chk = readDHT();
        int light = readLight();
        if(chk){
            Blynk.virtualWrite(V4,humidity);
            Blynk.virtualWrite(V5,temperature);
        }
        Blynk.virtualWrite(V6,light);
    }