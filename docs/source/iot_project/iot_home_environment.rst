.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et des concours pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _iot_home:

5. Surveillance de l'environnement domestique
===================================================

Dans ce chapitre, nous allons utiliser Blynk pour cr√©er un syst√®me de surveillance de l'environnement domestique.
Vous pourrez mesurer la temp√©rature, l'humidit√© et l'intensit√© lumineuse d'une pi√®ce √† l'aide du DHT11 et d'une photor√©sistance.
En envoyant ces valeurs √† Blynk, vous pourrez surveiller l'environnement de votre maison via Internet.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants. 

Il est bien s√ªr pratique d'acheter un kit complet. Voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_photoresistor`
        - |link_photoresistor_buy|
    *   - :ref:`cpn_dht11`
        - \-

**1. Construire le circuit**

.. note::

    Le module ESP8266 n√©cessite un courant √©lev√© pour assurer un environnement de fonctionnement stable. Assurez-vous que la batterie 9V est connect√©e.

.. image:: img/iot_5_bb.png
    :width: 600
    :align: center

**2. Modifier le tableau de bord**

#. Pour enregistrer les valeurs d'humidit√©, cr√©ez un **Datastream** de type **Virtual Pin** sur la page **Datastream**. R√©glez le TYPE DE DONN√âES sur **Double**, les MIN et MAX sur **0** et **100**, et les unit√©s sur **Pourcentage, %**.

    .. image:: img/sp220610_145748.png

#. Cr√©ez ensuite un **Datastream** de type **Virtual Pin** pour enregistrer la temp√©rature. R√©glez le TYPE DE DONN√âES sur ``Double``, les MIN et MAX sur ``-30`` et ``50``, et les unit√©s sur **Celsius, ¬∞C**.

    .. image:: img/sp220610_145811.png

#. Cr√©ez √©galement un **Datastream** de type **Virtual Pin** pour enregistrer l'intensit√© lumineuse. Utilisez le type de donn√©es par d√©faut - **Integer**, avec les MIN et MAX r√©gl√©s sur ``0`` et ``1024``.

    .. image:: img/sp220610_145834.png

#. Acc√©dez √† la page **Web Dashboard**, faites glisser deux widgets **Label** et r√©glez leurs flux de donn√©es sur **V4** et **V5**, respectivement, et faites glisser un widget **Gauge** et r√©glez son flux de donn√©es sur **V6**. Dans les param√®tres du widget, vous pouvez √©galement activer **Changer la couleur en fonction de la valeur** et s√©lectionner les couleurs appropri√©es pour rendre le widget plus intuitif.

.. image:: img/sp220610_150400.png
    :align: center


**3. Ex√©cuter le code**

#. Ouvrez le fichier ``5.home_environment_monitoring.ino`` situ√© dans le chemin ``3in1-kit\iot_project\5.home_environment_monitoring``, ou copiez ce code dans **Arduino IDE**.

    .. note::

            * La biblioth√®que ``DHT sensor library`` est utilis√©e ici. Vous pouvez l'installer depuis le **Gestionnaire de Biblioth√®que**.

                .. image:: ../img/lib_dht11.png


    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/4f0ad85e-8aff-4df9-99dd-c6741aed8219/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Remplacez les valeurs ``Template ID``, ``Device Name``, et ``Auth Token`` par les v√¥tres. Entrez √©galement le ``ssid`` et le ``password`` de votre r√©seau WiFi. Pour des tutoriels d√©taill√©s, reportez-vous √† :ref:`connect_blynk`.
#. Apr√®s avoir s√©lectionn√© la carte et le port appropri√©s, cliquez sur le bouton **T√©l√©verser**.

#. Ouvrez le Moniteur S√©rie (r√©glez le d√©bit en bauds √† 115200) et attendez qu'un message de connexion r√©ussie apparaisse.

    .. image:: img/2_ready.png

    .. note::

        Si le message ``ESP is not responding`` s'affiche lors de la connexion, suivez ces √©tapes.

        * Assurez-vous que la batterie 9V est branch√©e.
        * R√©initialisez le module ESP8266 en connectant la broche RST √† GND pendant 1 seconde, puis d√©branchez-la.
        * Appuyez sur le bouton de r√©initialisation sur la carte R4.

        Vous devrez peut-√™tre r√©p√©ter ces √©tapes 3 √† 5 fois. Soyez patient.

#. Maintenant, vous pourrez voir la temp√©rature ambiante, l'humidit√© et l'intensit√© lumineuse actuelles sur Blynk.

    .. image:: img/sp220610_150400.png
        :align: center

#. Si vous souhaitez utiliser Blynk sur des appareils mobiles, reportez-vous √† :ref:`blynk_mobile`.

    .. image:: img/mobile_home.jpg

**Comment cela fonctionne-t-il ?**

Ces deux fonctions permettent de mesurer la temp√©rature, l'humidit√© et l'intensit√© lumineuse de la pi√®ce.

.. code-block:: arduino

    int readLight(){
        return analogRead(lightPin);
    }

    bool readDHT() {

        // La lecture de la temp√©rature ou de l'humidit√© prend environ 250 millisecondes !
        // Les relev√©s du capteur peuvent √©galement √™tre vieux de 2 secondes (le capteur est tr√®s lent)
        humidity = dht.readHumidity();
        // Lire la temp√©rature en Celsius (par d√©faut)
        temperature = dht.readTemperature();

        // V√©rifiez si une lecture a √©chou√© et quittez t√¥t (pour r√©essayer).
        if (isnan(humidity) || isnan(temperature)) {
            Serial.println("Failed to read from DHT sensor!");
            return false;
        }
        return true;
    }

Avec le ``Timer`` de Blynk, la temp√©rature ambiante, l'humidit√© et l'intensit√© lumineuse sont mesur√©es chaque seconde et envoy√©es au flux de donn√©es sur le Cloud Blynk, √† partir duquel les widgets affichent les donn√©es.

.. code-block:: arduino

    void myTimerEvent()
    {
        bool chk = readDHT();
        int light = readLight();
        if(chk){
            Blynk.virtualWrite(V4,humidity);
            Blynk.virtualWrite(V5,temperature);
        }
        Blynk.virtualWrite(V6,light);
    }