.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et des concours pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _iot_gate:

7. Barri√®re intelligente avec limitation de courant
========================================================

Certaines situations, comme les parkings, n√©cessitent une gestion quantitative.

Ici, nous cr√©ons une barri√®re intelligente : un servo-moteur est utilis√© comme barri√®re, et un d√©tecteur d'obstacle infrarouge est plac√© devant. Si un objet (comme une voiture) est d√©tect√©, la barri√®re s'ouvre et le compteur est incr√©ment√© de 1. 
Le compteur est affich√© sur un afficheur 7 segments et est √©galement envoy√© au Cloud Blynk pour une consultation √† distance. Enfin, un widget Switch de Blynk permet d'activer ou de d√©sactiver ce syst√®me de barri√®re intelligente.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants. 

Il est bien s√ªr pratique d'acheter un kit complet. Voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|
    *   - :ref:`cpn_avoid`
        - |link_obstacle_avoidance_buy|
    *   - :ref:`cpn_7_segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

**1. Construire le circuit**

.. note::

    Le module ESP8266 n√©cessite un courant √©lev√© pour assurer un environnement de fonctionnement stable. Assurez-vous que la batterie 9V est connect√©e.

.. image:: img/iot_7_bb.png
    :width: 800
    :align: center

**2. Modifier le tableau de bord**

#. Pour enregistrer le nombre, cr√©ez un **Datastream** de type **Virtual Pin** sur la page **Datastream**. R√©glez le TYPE DE DONN√âES sur ``Integer`` et les valeurs MIN et MAX sur ``0`` et ``10``.

    .. image:: img/sp220610_165328.png
 
#. Acc√©dez maintenant √† la page **Web Dashboard**, faites glisser un widget **Switch** pour d√©finir son flux de donn√©es sur **V0** et un widget **Label** pour d√©finir son flux de donn√©es sur **V8**.

    .. image:: img/sp220610_165548.png

**3. Ex√©cuter le code**

#. Ouvrez le fichier ``7.current_limiting_gate.ino`` situ√© dans ``3in1-kit\iot_project\7.current_limiting_gate``, ou copiez ce code dans **Arduino IDE**.

    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/bd829175-652f-4c3e-85b0-048c3fda4555/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Remplacez les valeurs ``Template ID``, ``Device Name``, et ``Auth Token`` par vos informations personnelles. Entrez √©galement le ``ssid`` et le ``password`` de votre r√©seau WiFi. Pour des tutoriels d√©taill√©s, reportez-vous √† :ref:`connect_blynk`.
#. Apr√®s avoir s√©lectionn√© la carte et le port appropri√©s, cliquez sur le bouton **T√©l√©verser**.

#. Ouvrez le Moniteur S√©rie (r√©glez le d√©bit en bauds √† 115200) et attendez qu'un message de connexion r√©ussie apparaisse.

    .. image:: img/2_ready.png

    .. note::

        Si le message ``ESP is not responding`` s'affiche lors de la connexion, suivez ces √©tapes.

        * Assurez-vous que la batterie 9V est branch√©e.
        * R√©initialisez le module ESP8266 en connectant la broche RST √† GND pendant 1 seconde, puis d√©branchez-la.
        * Appuyez sur le bouton de r√©initialisation sur la carte R4.

        Vous devrez peut-√™tre r√©p√©ter ces √©tapes 3 √† 5 fois. Soyez patient.

#. Cliquez maintenant sur le widget Bouton de contr√¥le sur Blynk pour activer le syst√®me de barri√®re intelligente. Si le module d'√©vitement d'obstacles infrarouge d√©tecte un obstacle, la barri√®re s'ouvre et l'afficheur 7 segments ainsi que le widget Compteur sur Blynk ajoutent 1.

    .. image:: img/sp220610_165548.png

#. Si vous souhaitez utiliser Blynk sur des appareils mobiles, reportez-vous √† :ref:`blynk_mobile`.

    .. image:: img/mobile_gate.jpg

**Comment cela fonctionne-t-il ?**

La fonction ``BLYNK_WRITE(V0)`` obtient l'√©tat du widget **Switch** et l'assigne √† la variable ``doorFlag``, qui sera utilis√©e pour d√©terminer si le syst√®me de barri√®re intelligente est activ√© ou non.

.. code-block:: arduino

    BLYNK_WRITE(V0)
    {
        doorFlag = param.asInt(); // Activer la barri√®re
    }

Dans le Timer Blynk, ``doorFlag`` est √©valu√© chaque seconde, et si le syst√®me est activ√©, la fonction principale de la barri√®re est ex√©cut√©e.

.. code-block:: arduino

    void myTimerEvent()
    {
        if (doorFlag)
        {
            channelEntrance();
        }
    }

La fonction principale de la barri√®re est ``channelEntrance()``.
Lorsqu'un objet approche de la barri√®re (le capteur d√©tecte un obstacle), le ``count`` est incr√©ment√© de 1.
Le ``count`` est envoy√© au flux de donn√©es ``V8`` du Cloud Blynk ainsi qu'√† l'afficheur 7 segments du circuit, et la barri√®re s'ouvre.
Si l'objet passe de pr√©sent √† absent, ce qui signifie qu'il est entr√©, la barri√®re se ferme.

.. code-block:: arduino

    void channelEntrance()
    {
        int currentState = digitalRead(irPin); // 0:obstacle 1:no-obstacle
        if (currentState == 0 && lastState == 1) {
            count=(count+1)%10;
            Blynk.virtualWrite(V8, count);
            showNumber(count);
            operateGate(true);
        } else if ((currentState == 1 && lastState == 0)) {
            operateGate(false);
        }
        lastState = currentState;
    }

La fonction ``showNumber(int num)`` permet d'afficher la valeur sur l'afficheur 7 segments.

.. code-block:: arduino

    void showNumber(int num)
    {
        digitalWrite(STcp, LOW); //ground ST_CP and hold low for as long as you are transmitting
        shiftOut(DS, SHcp, MSBFIRST, datArray[num]);
        digitalWrite(STcp, HIGH); //pull the ST_CPST_CP to save the data
    }

La fonction ``operateGate(bool openGate)`` ouvre lentement la barri√®re si la r√©f√©rence est ``True``, et la ferme lentement si la r√©f√©rence est ``False``.

.. code-block:: arduino

    void operateGate(bool openGate) {
        if (openGate == true) 
        {
            // ouvrir la barri√®re
            while (angle <= 90) { 
            angle++;
            myservo.write(angle);
            delay(5);
            }
        } else {
            // fermer la barri√®re
            while (angle >= 0){ 
            angle--;
            myservo.write(angle);
            delay(5);
            }
        }
    }