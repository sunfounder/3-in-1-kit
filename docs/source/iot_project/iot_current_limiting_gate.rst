.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _iot_gate:

7. Strombegrenzendes Tor
==================================

In manchen Situationen, wie zum Beispiel auf Parkpl√§tzen, ist eine Mengensteuerung erforderlich.

Hier erstellen wir ein intelligentes Tor: Ein Servo dient als Tor und ein IR-Hinderniserkennungsdetektor wird davor platziert; wird ein Objekt (wie ein Auto) erkannt, √∂ffnet sich das Tor und die Anzahl erh√∂ht sich um 1.
Die Anzahl wird auf einer 7-Segment-Anzeige dargestellt und auch auf die Blynk Cloud hochgeladen, damit Sie sie aus der Ferne einsehen k√∂nnen. Schlie√ülich verf√ºgt Blynk √ºber ein Schalter-Widget, um dieses intelligente Torsystem zu aktivieren oder zu deaktivieren.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir folgende Komponenten.

Es ist sicherlich praktisch, ein ganzes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Sie k√∂nnen sie auch separat √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|
    *   - :ref:`cpn_avoid`
        - |link_obstacle_avoidance_buy|
    *   - :ref:`cpn_7_segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|


**1. Bauen Sie den Schaltkreis**

.. note::

    Das ESP8266-Modul ben√∂tigt einen hohen Strom, um eine stabile Betriebsumgebung zu gew√§hrleisten, also stellen Sie sicher, dass die 9V-Batterie angeschlossen ist.

.. image:: img/wiring_servo_segment.jpg
    :width: 800

**2. Dashboard bearbeiten**

#. Um die Anzahl aufzuzeichnen, erstellen Sie einen **Datastream** vom Typ **Virtual Pin** auf der **Datastream**-Seite. Setzen Sie den DATENTYP auf ``Integer`` und MIN und MAX auf ``0`` und ``10``.

    .. image:: img/sp220610_165328.png
 
#. Gehen Sie nun zur **Wed Dashboard**-Seite, ziehen Sie ein **Switch**-Widget, um dessen Datenstrom auf **V0** und ein **Label**-Widget, um dessen Datenstrom auf **V8** zu setzen.

    .. image:: img/sp220610_165548.png

**3. Den Code ausf√ºhren**

#. √ñffnen Sie die Datei ``7.current_limiting_gate.ino`` unter dem Pfad ``3in1-kit\iot_project\7.current_limiting_gate`` oder kopieren Sie diesen Code in die **Arduino IDE**.

    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/bd829175-652f-4c3e-85b0-048c3fda4555/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Ersetzen Sie die ``Template ID``, den ``Device Name`` und den ``Auth Token`` durch Ihre eigenen. Geben Sie auch die ``ssid`` und das ``password`` des von Ihnen verwendeten WLANs ein. F√ºr detaillierte Anleitungen verweisen Sie bitte auf :ref:`connect_blynk`.
#. Nach Auswahl des richtigen Boards und Ports klicken Sie auf die Schaltfl√§che **Upoad**.

#. √ñffnen Sie den Serienmonitor (Baudrate auf 115200 einstellen) und warten Sie auf eine Aufforderung, wie z.B. eine erfolgreiche Verbindung.

    .. image:: img/2_ready.png

    .. note::

        Wenn die Meldung ``ESP antwortet nicht`` erscheint, wenn Sie sich verbinden, folgen Sie bitte diesen Schritten.

        * Stellen Sie sicher, dass die 9V-Batterie angeschlossen ist.
        * Setzen Sie das ESP8266-Modul zur√ºck, indem Sie den Pin RST f√ºr 1 Sekunde mit GND verbinden und dann trennen.
        * Dr√ºcken Sie die Reset-Taste auf dem R3-Board.

        Manchmal m√ºssen Sie die obige Operation 3-5 Mal wiederholen, bitte haben Sie Geduld.


#. Klicken Sie jetzt auf das Button Control-Widget in Blynk, um das intelligente T√ºrsystem zu aktivieren. Wenn das IR-Hinderniserkennungsmodul ein Hindernis erkennt, √∂ffnet sich das Tor und die 7-Segment-Anzeige sowie das Count-Widget in Blynk werden um 1 erh√∂ht.

    .. image:: img/sp220610_165548.png

#. Wenn Sie Blynk auf mobilen Ger√§ten verwenden m√∂chten, beachten Sie bitte :ref:`blynk_mobile`.

    .. image:: img/mobile_gate.jpg

**Wie funktioniert das?**

Die Funktion ``BLYNK_WRITE(V0)`` erh√§lt den Status des **Switch**-Widgets und weist ihn der Variablen ``doorFlag`` zu, die verwendet wird, um zu bestimmen, ob das intelligente Torsystem aktiviert ist oder nicht.

.. code-block:: arduino

    BLYNK_WRITE(V0)
    {
        doorFlag = param.asInt(); // Aktiviere das Tor
    }

Im Blynk-Timer wird ``doorFlag`` jede Sekunde gepr√ºft, und wenn es aktiviert ist, wird die Hauptfunktion des Tores ausgef√ºhrt.

.. code-block:: arduino

    void myTimerEvent()
    {
        if (doorFlag)
        {
            channelEntrance();
        }
    }

Die Hauptfunktion des Tores ist ``channelEntrance()``.
Wenn ein Objekt sich dem Tor n√§hert (der Sensor erkennt ein Hindernis), wird ``count`` um 1 erh√∂ht.
Schreiben Sie ``count`` in den Datastream ``V8`` der Blynk Cloud und die 7-Segment-Anzeige auf der Schaltung und √∂ffnen Sie das Tor.
Wenn das Objekt von vorhanden zu nicht vorhanden wechselt, d.h. das Objekt hat das Tor betreten, schlie√üen Sie das Tor.

.. code-block:: arduino

    void channelEntrance()
    {
        int currentState = digitalRead(irPin); // 0:Hindernis 1:kein Hindernis
        if (currentState == 0 && lastState == 1) {
            count=(count+1)%10;
            Blynk.virtualWrite(V8, count);
            showNumber(count);
            operateGate(true);
        } else if ((currentState == 1 && lastState == 0)) {
            operateGate(false);
        }
        lastState = currentState;
    }

Die Funktion ``showNumber(int num)`` dient dazu, die 7-Segment-Anzeige den Wert anzeigen zu lassen.

.. code-block:: arduino

    void showNumber(int num)
    {
        digitalWrite(STcp, LOW); //ST_CP erden und so lange auf LOW halten, wie Daten √ºbertragen werden
        shiftOut(DS, SHcp, MSBFIRST, datArray[num]);
        digitalWrite(STcp, HIGH); //ST_CP hochziehen, um die Daten zu speichern
    }

Die Funktion ``operateGate(bool openGate)`` √∂ffnet das Tor langsam, wenn die Referenz ``True`` ist, und schlie√üt das Tor langsam, wenn die Referenz ``False`` ist.

.. code-block:: arduino

    void operateGate(bool openGate) {
        if (openGate == true) 
        {
            // open gate
            while (angle <= 90) { 
            angle++;
            myservo.write(angle);
            delay(5);
            }
        } else {
            // close gate
            while (angle >= 0){ 
            angle--;
            myservo.write(angle);
            delay(5);
            }
        }
    }