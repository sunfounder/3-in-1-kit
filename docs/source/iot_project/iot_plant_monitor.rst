.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _iot_plant:

6. Moniteur de Plantes
==========================

L'objectif de ce projet est de cr√©er un syst√®me d'arrosage intelligent qui d√©tecte la temp√©rature actuelle, l'humidit√©, l'intensit√© de la lumi√®re et l'humidit√© du sol et les affiche sur Blynk.

D√®s que vous activez le basculeur Switch dans Blynk Cloud, la pompe commencera √† fonctionner et les plantes seront hydrat√©es.

**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_photoresistor`
        - |link_photoresistor_buy|
    *   - :ref:`cpn_dht11`
        - \-
    *   - :ref:`cpn_soil_moisture`
        - |link_soil_moisture_buy|
    *   - :ref:`cpn_l9110`
        - \-
    *   - :ref:`cpn_pump`
        - \-

**1. Construire le Circuit**

.. note::

    Le module ESP8266 n√©cessite un courant √©lev√© pour fournir un environnement de fonctionnement stable, donc assurez-vous que la batterie 9V est branch√©e.

.. image:: img/wiring_6_plant_monitor_bb.png
    :width: 800

**2. √âditer le Tableau de Bord**

#. Les data streams cr√©√©s dans les projets pr√©c√©dents doivent √™tre conserv√©s, et ils seront utilis√©s dans ce projet √©galement.

#. Pour enregistrer l'humidit√© du sol, cr√©ez un autre **Datastream** de type **Virtual Pin** sur la page **Datastream**. R√©glez le TYPE DE DONN√âES sur ``Integer`` et MIN et MAX sur ``0`` et ``1024``.

    .. image:: img/sp220610_155221.png

#. Maintenant, allez sur la page **Wed Dashboard**, faites glisser 2 widgets **Label** et r√©glez leurs data streams respectivement sur **V4** et **V5**; faites glisser 2 widgets **Gauge** et r√©glez leurs data streams pour afficher **V6** et **V7** respectivement; et enfin faites glisser un widget **Switch** et r√©glez son data stream sur **V0**.

    .. image:: img/sp220610_155350.png


**3. Ex√©cutez le Code**

Ouvrez le fichier ``6.plant_monitoring.ino`` situ√© dans le dossier ``3in1-kit\iot_project\6.plant_monitoring``, ou copiez ce code dans **Arduino IDE**.

    .. note::

        * La ``DHT sensor library`` est utilis√©e ici, vous pouvez l'installer depuis le **Library Manager**.

            .. image:: ../img/lib_dht11.png

    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/f738bcb5-4ee2-475b-b683-759e6b2041b0/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Remplacez le ``Template ID``, ``Device Name`` et ``Auth Token`` par les v√¥tres. Vous devez √©galement entrer le ``ssid`` et le ``mot de passe`` du WiFi que vous utilisez. Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`connect_blynk`.
#. Apr√®s avoir s√©lectionn√© la bonne carte et le bon port, cliquez sur le bouton **Upoad**.

#. Ouvrez le moniteur s√©rie (r√©glez le d√©bit en bauds sur 115200) et attendez qu'un message tel qu'une connexion r√©ussie apparaisse.

    .. image:: img/2_ready.png

    .. note::

        Si le message ``ESP is not responding`` appara√Æt lorsque vous vous connectez, veuillez suivre ces √©tapes.

        * Assurez-vous que la batterie 9V est branch√©e.
        * R√©initialisez le module ESP8266 en connectant la broche RST √† GND pendant 1 seconde, puis d√©branchez-la.
        * Appuyez sur le bouton de r√©initialisation de la carte R3.

        Parfois, il peut √™tre n√©cessaire de r√©p√©ter l'op√©ration ci-dessus 3 √† 5 fois, veuillez √™tre patient.

#. De retour sur Blynk, vous verrez la temp√©rature actuelle, l'humidit√©, l'intensit√© lumineuse et l'humidit√© du sol. Vous pouvez laisser la pompe arroser les plantes si n√©cessaire en cliquant sur le widget Bouton de Contr√¥le.

    .. image:: img/sp220610_155350.png

#. Si vous souhaitez utiliser Blynk sur des appareils mobiles, veuillez vous r√©f√©rer √† :ref:`blynk_mobile`.

    .. image:: img/mobile_plant.jpg

**Comment √ßa fonctionne ?**

Ce ``BLYNK_WRITE`` permet au widget **Switch** de Blynk de d√©marrer la pompe lorsqu'il est ON et de l'√©teindre lorsqu'il est OFF.

.. code-block:: arduino

    BLYNK_WRITE(V0)
    {
        if(param.asInt()==1){
            digitalWrite(pumpA,HIGH);
        }else{
            digitalWrite(pumpA,LOW); 
        }
    }


Ces trois fonctions sont utilis√©es pour obtenir la temp√©rature ambiante actuelle, l'humidit√©, l'intensit√© lumineuse et l'humidit√© du sol.

.. code-block:: arduino

    int readMoisture(){
        return analogRead(moisturePin);
    }

    int readLight(){
        return analogRead(lightPin);
    }

    bool readDHT() {

        // Reading temperature or humidity takes about 250 milliseconds!
        // Sensor readings may also be up to 2 seconds 'old' (it's a very slow sensor)
        humidity = dht.readHumidity();
        // Read temperature as Celsius (the default)
        temperature = dht.readTemperature();

        // Check if any reads failed and exit early (to try again).
        if (isnan(humidity) || isnan(temperature)) {
            Serial.println("Failed to read from DHT sensor!");
            return false;
        }
        return true;
    }

Avec le ``Timer`` de Blynk, la temp√©rature ambiante, l'humidit√©, l'intensit√© lumineuse et l'humidit√© du sol sont obtenues chaque seconde et envoy√©es au data stream sur le **Blynk Cloud**, √† partir duquel les widgets affichent les donn√©es.

.. code-block:: arduino

    void myTimerEvent()
    {
        bool chk = readDHT();
        int light = readLight();
        int moisture = readMoisture();
        if(chk){
            Blynk.virtualWrite(V4,humidity);
            Blynk.virtualWrite(V5,temperature);
        }
        Blynk.virtualWrite(V6,light);
        Blynk.virtualWrite(V7,moisture);
    }
