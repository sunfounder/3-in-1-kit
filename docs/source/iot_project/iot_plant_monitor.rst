.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et des concours pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _iot_plant:

6. Surveillance des plantes
===============================

Le but de ce projet est de cr√©er un syst√®me intelligent d'arrosage qui d√©tecte la temp√©rature actuelle, l'humidit√©, l'intensit√© lumineuse et l'humidit√© du sol, et affiche ces donn√©es sur Blynk.

D√®s que vous activez le commutateur dans le Blynk Cloud, la pompe commence √† fonctionner et les plantes sont arros√©es.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants. 

Il est bien s√ªr pratique d'acheter un kit complet. Voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_photoresistor`
        - |link_photoresistor_buy|
    *   - :ref:`cpn_dht11`
        - \-
    *   - :ref:`cpn_soil_moisture`
        - |link_soil_moisture_buy|
    *   - :ref:`cpn_l9110` 
        - \-
    *   - :ref:`cpn_pump`
        - \-

**1. Construire le circuit**

.. note::

    Le module ESP8266 n√©cessite un courant √©lev√© pour assurer un environnement de fonctionnement stable. Assurez-vous que la batterie 9V est connect√©e.

.. image:: img/iot_6_bb.png
    :width: 800
    :align: center

**2. Modifier le tableau de bord**

#. Les flux de donn√©es cr√©√©s dans les projets pr√©c√©dents doivent √™tre sauvegard√©s, car ils seront √©galement utilis√©s dans ce projet.

#. Pour enregistrer l'humidit√© du sol, cr√©ez un autre **Datastream** de type **Virtual Pin** sur la page **Datastream**. R√©glez le TYPE DE DONN√âES sur ``Integer`` et les MIN et MAX sur ``0`` et ``1024``.

    .. image:: img/sp220610_155221.png

#. Acc√©dez maintenant √† la page **Web Dashboard**, faites glisser 2 widgets **Label** et r√©glez leurs flux de donn√©es sur **V4** et **V5** respectivement ; faites glisser 2 widgets **Gauge** et r√©glez leurs flux de donn√©es pour afficher **V6** et **V7** respectivement ; et enfin, faites glisser un widget **Switch** et r√©glez son flux de donn√©es sur **V0**.

    .. image:: img/sp220610_155350.png


**3. Ex√©cuter le code**

Ouvrez le fichier ``6.plant_monitoring.ino`` situ√© dans le chemin ``3in1-kit\iot_project\6.plant_monitoring``, ou copiez ce code dans **Arduino IDE**.

    .. note::

            * La biblioth√®que ``DHT sensor library`` est utilis√©e ici. Vous pouvez l'installer depuis le **Gestionnaire de Biblioth√®que**.

                .. image:: ../img/lib_dht11.png


    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/f738bcb5-4ee2-475b-b683-759e6b2041b0/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Remplacez les valeurs ``Template ID``, ``Device Name``, et ``Auth Token`` par les v√¥tres. Entrez √©galement le ``ssid`` et le ``password`` de votre r√©seau WiFi. Pour des tutoriels d√©taill√©s, reportez-vous √† :ref:`connect_blynk`.
#. Apr√®s avoir s√©lectionn√© la carte et le port appropri√©s, cliquez sur le bouton **T√©l√©verser**.

#. Ouvrez le Moniteur S√©rie (r√©glez le d√©bit en bauds √† 115200) et attendez qu'un message de connexion r√©ussie apparaisse.

    .. image:: img/2_ready.png

    .. note::

        Si le message ``ESP is not responding`` s'affiche lors de la connexion, suivez ces √©tapes.

        * Assurez-vous que la batterie 9V est branch√©e.
        * R√©initialisez le module ESP8266 en connectant la broche RST √† GND pendant 1 seconde, puis d√©branchez-la.
        * Appuyez sur le bouton de r√©initialisation sur la carte R4.

        Vous devrez peut-√™tre r√©p√©ter ces √©tapes 3 √† 5 fois. Soyez patient.

#. Retournez sur Blynk, vous verrez la temp√©rature, l'humidit√©, l'intensit√© lumineuse et l'humidit√© du sol actuelles. Vous pouvez activer la pompe pour arroser les plantes en cliquant sur le widget Bouton Contr√¥le.

    .. image:: img/sp220610_155350.png

#. Si vous souhaitez utiliser Blynk sur des appareils mobiles, reportez-vous √† :ref:`blynk_mobile`.

    .. image:: img/mobile_plant.jpg

**Comment cela fonctionne-t-il ?**

Ce ``BLYNK_WRITE`` permet au widget **Switch** de Blynk d'activer la pompe lorsqu'il est activ√© et de la d√©sactiver lorsqu'il est d√©sactiv√©.

.. code-block:: arduino

    BLYNK_WRITE(V0)
    {
        if(param.asInt()==1){
            digitalWrite(pumpA,HIGH);
        }else{
            digitalWrite(pumpA,LOW); 
        }
    }

Ces trois fonctions permettent de mesurer la temp√©rature ambiante, l'humidit√©, l'intensit√© lumineuse et l'humidit√© du sol.

.. code-block:: arduino

    int readMoisture(){
        return analogRead(moisturePin);
    }

    int readLight(){
        return analogRead(lightPin);
    }

    bool readDHT() {

        // La lecture de la temp√©rature ou de l'humidit√© prend environ 250 millisecondes !
        // Les relev√©s du capteur peuvent √©galement √™tre vieux de 2 secondes (le capteur est tr√®s lent)
        humidity = dht.readHumidity();
        // Lire la temp√©rature en Celsius (par d√©faut)
        temperature = dht.readTemperature();

        // V√©rifiez si une lecture a √©chou√© et quittez t√¥t (pour r√©essayer).
        if (isnan(humidity) || isnan(temperature)) {
            Serial.println("Failed to read from DHT sensor!");
            return false;
        }
        return true;
    }

Avec le ``Timer`` de Blynk, la temp√©rature ambiante, l'humidit√©, l'intensit√© lumineuse et l'humidit√© du sol sont mesur√©es chaque seconde et envoy√©es au flux de donn√©es sur le **Blynk Cloud**, √† partir duquel les widgets affichent les donn√©es.


.. code-block:: arduino

    void myTimerEvent()
    {
        bool chk = readDHT();
        int light = readLight();
        int moisture = readMoisture();
        if(chk){
            Blynk.virtualWrite(V4,humidity);
            Blynk.virtualWrite(V5,temperature);
        }
        Blynk.virtualWrite(V6,light);
        Blynk.virtualWrite(V7,moisture);
    }
