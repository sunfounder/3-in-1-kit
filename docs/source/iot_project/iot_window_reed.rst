.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _iot_window:

3. Envoyer des Donn√©es √† Blynk
=================================

Ce chapitre vous montrera comment envoyer des donn√©es √† Blynk.

Nous cr√©ons ici un dispositif de d√©tection de portes et fen√™tres. Le circuit avec l'interrupteur √† lames (reed switch) est plac√© √† c√¥t√© de la porte et de la fen√™tre, et l'aimant est mont√© sur le bord de la porte et de la fen√™tre.
Lorsque la porte ou la fen√™tre est ferm√©e, l'interrupteur √† lames sera activ√© par la force magn√©tique et la valeur de pin correspondante sur la carte R3 changera.
Blynk.cloud recevra cette valeur afin que vous puissiez voir si les portes et fen√™tres de votre maison sont ferm√©es, m√™me lorsque vous n'√™tes pas √† la maison.

Nous utiliserons maintenant un widget LED dans Blynk pour indiquer si vos fen√™tres et portes sont ferm√©es (c'est-√†-dire si l'interrupteur √† lames est activ√© ou d√©sactiv√©).

**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_reed`
        - \-

**1. Construire le Circuit**

.. note::

    Le module ESP8266 n√©cessite un courant √©lev√© pour fournir un environnement de fonctionnement stable, donc assurez-vous que la batterie 9V est branch√©e.


.. image:: img/wiring_reed.jpg

**2. √âditer le Tableau de Bord**

#. Cr√©ez un **Datastream** de type **Virtual Pin** sur la page **Datastream** pour obtenir la valeur de l'Interrupteur √† Lames. R√©glez le TYPE DE DONN√âES sur **Integer** et MIN et MAX sur **0** et **1**.

    .. image:: img/sp220609_162548.png

#. Faites glisser et d√©posez un **LED widget** sur la page **Wed Dashboard**, √† une valeur de 1, il s'allumera (avec couleur), sinon il sera blanc.

    .. image:: img/blynk_edit_drag_led_widget.png

#. Dans la page de param√®tres du **LED widget**, s√©lectionnez **Datastream** comme **Reed(V1)**, et enregistrez-le.

    .. image:: img/sp220609_163502.png

**3. Ex√©cutez le Code**

#. Ouvrez le fichier ``3.push_data_to_blynk.ino`` situ√© dans le dossier ``3in1-kit\iot_project\3.push_data_to_blynk``, ou copiez ce code dans **Arduino IDE**.


    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/e81b0024-c11e-4507-8d43-aeb3b6656c2c/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


#. Remplacez le ``Template ID``, ``Device Name`` et ``Auth Token`` par les v√¥tres. Vous devez √©galement entrer le ``ssid`` et le ``password`` du WiFi que vous utilisez. Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`connect_blynk`.
#. Apr√®s avoir s√©lectionn√© la bonne carte et le bon port, cliquez sur le bouton **Upoad**.

#. Ouvrez le moniteur s√©rie (r√©glez le d√©bit en bauds sur 115200) et attendez qu'un message tel qu'une connexion r√©ussie apparaisse.

    .. image:: img/2_ready.png

    .. note::

        Si le message ``ESP is not responding`` appara√Æt lorsque vous vous connectez, veuillez suivre ces √©tapes.

        * Assurez-vous que la batterie 9V est branch√©e.
        * R√©initialisez le module ESP8266 en connectant la broche RST √† GND pendant 1 seconde, puis d√©branchez-la.
        * Appuyez sur le bouton de r√©initialisation de la carte R3.

        Parfois, il peut √™tre n√©cessaire de r√©p√©ter l'op√©ration ci-dessus 3 √† 5 fois, veuillez √™tre patient.

#. Maintenant, Blynk affichera l'√©tat de vos portes et fen√™tres. Si vos portes et fen√™tres sont ferm√©es, le widget LED sera vert, sinon, il sera gris.

#. Si vous souhaitez utiliser Blynk sur des appareils mobiles, veuillez vous r√©f√©rer √† :ref:`blynk_mobile`.



**Comment √ßa fonctionne ?**


Pour cet exemple, vous devriez vous concentrer sur les lignes suivantes. "√âcrire des donn√©es toutes les secondes dans le Datastream V1 de Blynk Cloud" est d√©fini par ces lignes.

.. code-block:: arduino

    BlynkTimer timer;

    void myTimerEvent()
    {
        Blynk.virtualWrite(V1, pinValue);
    }

    void setup()
    {
        timer.setInterval(1000L, myTimerEvent);
    }

    void loop()
    {
        timer.run(); // Initiates BlynkTimer
    }

La biblioth√®que Blynk fournit un timer int√©gr√©, d'abord nous cr√©ons un objet timer.

.. code-block:: arduino

    BlynkTimer timer;

R√©glez l'intervalle du timer dans ``setup()``, ici nous r√©glons pour ex√©cuter la fonction ``myTimerEvent()`` toutes les 1000ms

.. code-block:: arduino

    timer.setInterval(1000L, myTimerEvent);


Ex√©cutez BlynkTimer dans ``loop()``.

.. code-block:: arduino

    timer.run();

√âditez la fonction personnalis√©e ``myTimerEvent()``, le code ``Blynk.virtualWrite(V1, pinValue)`` est utilis√© pour √©crire la donn√©e pinValue pour V1.

.. code-block:: arduino

    void myTimerEvent()
    {
        Blynk.virtualWrite(V1, pinValue);
    }

