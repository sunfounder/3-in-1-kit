.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et des concours pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _iot_window:

3. Envoyer des donn√©es vers Blynk
=====================================

Ce chapitre vous montrera comment envoyer des donn√©es vers Blynk.

Nous allons cr√©er ici un dispositif de d√©tection de porte et de fen√™tre. Le circuit avec l'interrupteur √† lame est plac√© pr√®s des portes et fen√™tres, et un aimant est fix√© sur le bord des portes et fen√™tres. 
Lorsque la porte ou la fen√™tre est ferm√©e, l'interrupteur √† lame s'active sous l'effet de la force magn√©tique, et la valeur du pin correspondant sur la carte R4 change.
Blynk.cloud recevra cette valeur, vous permettant ainsi de savoir si les portes et fen√™tres de votre maison sont ferm√©es, m√™me lorsque vous √™tes absent.

Nous utiliserons maintenant un widget LED dans Blynk pour indiquer si vos portes et fen√™tres sont ferm√©es (c'est-√†-dire si l'interrupteur √† lame est activ√© ou d√©sactiv√©).

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants :

Il est certainement plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_reed`
        - \-

**1. Construire le circuit**

.. note::

    Le module ESP8266 n√©cessite un courant √©lev√© pour offrir un environnement de fonctionnement stable, assurez-vous que la batterie 9V est bien branch√©e.

.. image:: img/iot_3_bb.png

**2. Modifier le tableau de bord**

#. Cr√©ez un **Datastream** de type **Virtual Pin** dans la page **Datastream** pour obtenir la valeur de l'interrupteur √† lame. D√©finissez le TYPE DE DONN√âES sur **Integer** et MIN et MAX sur **0** et **1**.

    .. image:: img/sp220609_162548.png

#. Faites glisser un widget **LED** dans la page **Tableau de bord Web**. Lorsque la valeur est de 1, la LED s'allumera (avec couleur), sinon elle sera blanche.

    .. image:: img/blynk_edit_drag_led_widget.png
        
#. Dans la page des param√®tres du widget **LED**, s√©lectionnez **Datastream** comme **Reed(V1)**, puis enregistrez.

    .. image:: img/sp220609_163502.png

**3. Ex√©cuter le code**

#. Ouvrez le fichier ``3.push_data_to_blynk.ino`` dans le chemin ``3in1-kit\iot_project\3.push_data_to_blynk``, ou copiez ce code dans l'**Arduino IDE**.


    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/e81b0024-c11e-4507-8d43-aeb3b6656c2c/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


#. Remplacez le ``Template ID``, ``Device Name`` et ``Auth Token`` par les v√¥tres. Vous devez √©galement saisir le ``ssid`` et le ``password`` du WiFi que vous utilisez. Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`connect_blynk`.
#. Apr√®s avoir s√©lectionn√© la carte et le port corrects, cliquez sur le bouton **T√©l√©verser**.

#. Ouvrez le Moniteur s√©rie (d√©finissez le d√©bit en bauds sur 115200) et attendez qu'un message de connexion r√©ussie apparaisse.

    .. image:: img/2_ready.png

    .. note::

        Si le message ``ESP is not responding`` appara√Æt lors de la connexion, suivez ces √©tapes :

        * Assurez-vous que la batterie 9V est branch√©e.
        * R√©initialisez le module ESP8266 en connectant le pin RST √† GND pendant 1 seconde, puis d√©branchez-le.
        * Appuyez sur le bouton de r√©initialisation de la carte R4.

        Parfois, vous devrez peut-√™tre r√©p√©ter cette op√©ration 3 √† 5 fois, soyez patient.

#. Maintenant, Blynk affichera l'√©tat de vos portes et fen√™tres. Si elles sont ferm√©es, le widget LED sera vert, sinon il sera gris.

#. Si vous souhaitez utiliser Blynk sur des appareils mobiles, veuillez vous r√©f√©rer √† :ref:`blynk_mobile`.

**Comment √ßa fonctionne ?**

Pour cet exemple, concentrez-vous sur les lignes suivantes. L'√©criture des donn√©es chaque seconde dans le Datastream V1 de Blynk Cloud est d√©finie par ces lignes.

.. code-block:: arduino

    BlynkTimer timer;

    void myTimerEvent()
    {
        Blynk.virtualWrite(V1, pinValue);
    }

    void setup()
    {
        timer.setInterval(1000L, myTimerEvent);
    }

    void loop()
    {
        timer.run(); // Initialise BlynkTimer
    }

La biblioth√®que Blynk fournit un minuteur int√©gr√©, nous cr√©ons d'abord un objet minuteur.

.. code-block:: arduino

    BlynkTimer timer;

D√©finissez l'intervalle du minuteur dans ``setup()``, ici il est d√©fini pour ex√©cuter la fonction ``myTimerEvent()`` toutes les 1000ms.

.. code-block:: arduino

    timer.setInterval(1000L, myTimerEvent);

Ex√©cutez BlynkTimer dans ``loop()``.

.. code-block:: arduino

    timer.run();

Modifiez la fonction personnalis√©e ``myTimerEvent()``, le code ``Blynk.virtualWrite(V1, pinValue)`` est utilis√© pour √©crire la donn√©e ``pinValue`` pour V1.

.. code-block:: arduino

    void myTimerEvent()
    {
        Blynk.virtualWrite(V1, pinValue);
    }

