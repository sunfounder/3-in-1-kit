.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _iot_window:

3. Daten an Blynk senden
=============================

In diesem Kapitel zeigen wir Ihnen, wie Sie Daten an Blynk senden k√∂nnen.

Wir erstellen hier ein T√ºr- und Fenstererkennungsger√§t. Die Schaltung mit dem Reed-Kontakt wird neben der T√ºr und dem Fenster angebracht, und der Magnet wird am Rand der T√ºr bzw. des Fensters montiert.
Wenn die T√ºr oder das Fenster geschlossen ist, wird der Reed-Kontakt durch die Magnetkraft eingeschaltet und der entsprechende Pin-Wert auf dem R4-Board √§ndert sich.
Blynk.cloud wird diesen Wert empfangen, sodass Sie auch von unterwegs aus sehen k√∂nnen, ob die T√ºren und Fenster Ihres Hauses geschlossen sind.

Nun werden wir ein LED-Widget in Blynk verwenden, um anzuzeigen, ob Ihre Fenster und T√ºren geschlossen sind (d.h. ob der Reed-Kontakt ein- oder ausgeschaltet ist).

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist sicherlich praktisch, ein komplettes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Sie k√∂nnen sie auch separat √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_reed`
        - \-

**1. Schaltung aufbauen**

.. note::

    Das ESP8266-Modul ben√∂tigt einen hohen Strom, um einen stabilen Betrieb zu gew√§hrleisten. Stellen Sie daher sicher, dass die 9V-Batterie angeschlossen ist.

.. image:: img/iot_3_bb.png

**2. Dashboard bearbeiten**

#. Erstellen Sie einen **Datastream** vom Typ **Virtual Pin** auf der **Datastream**-Seite, um den Wert des Reed-Kontakts zu erhalten. Stellen Sie den DATENTYP auf **Integer** und MIN und MAX auf **0** und **1**.

    .. image:: img/sp220609_162548.png

#. Ziehen Sie ein **LED widget** auf die **Wed Dashboard**-Seite. Bei einem Wert von 1 leuchtet es (farbig), sonst ist es wei√ü.

    .. image:: img/blynk_edit_drag_led_widget.png

#. W√§hlen Sie auf der Einstellungsseite des **LED widget** als **Datastream** **Reed(V1)** aus und speichern Sie es.

    .. image:: img/sp220609_163502.png

**3. Den Code ausf√ºhren**

#. √ñffnen Sie die Datei ``3.push_data_to_blynk.ino`` unter dem Pfad ``3in1-kit\iot_project\3.push_data_to_blynk`` oder kopieren Sie diesen Code in die **Arduino IDE**.

    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/e81b0024-c11e-4507-8d43-aeb3b6656c2c/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Ersetzen Sie die ``Template ID``, ``Device Name`` und ``Auth Token`` durch Ihre eigenen Angaben. Sie m√ºssen auch die ``ssid`` und das ``password`` Ihres verwendeten WLANs eingeben. F√ºr detaillierte Anleitungen beachten Sie bitte :ref:`connect_blynk`.
#. W√§hlen Sie das korrekte Board und den Port aus und klicken Sie auf den **Upoad**-Button.

#. √ñffnen Sie den Seriellen Monitor (Baudrate auf 115200 einstellen) und warten Sie auf eine Meldung, z.B. eine erfolgreiche Verbindung.

    .. image:: img/2_ready.png

    .. note::

        Wenn die Meldung ``ESP is not responding`` erscheint, befolgen Sie bitte diese Schritte:

        * Stellen Sie sicher, dass die 9V-Batterie angeschlossen ist.
        * Setzen Sie das ESP8266-Modul zur√ºck, indem Sie den Pin RST f√ºr 1 Sekunde mit GND verbinden, dann trennen Sie ihn.
        * Dr√ºcken Sie den Reset-Knopf auf dem R4-Board.

        Manchmal m√ºssen Sie den oben genannten Vorgang 3-5 Mal wiederholen, bitte haben Sie Geduld.

#. Nun zeigt Blynk den Status Ihrer T√ºren und Fenster an. Wenn Ihre T√ºren und Fenster geschlossen sind, wird das LED-Widget gr√ºn sein, sonst grau.

#. Wenn Sie Blynk auf mobilen Ger√§ten nutzen m√∂chten, beachten Sie bitte :ref:`blynk_mobile`.

**Wie funktioniert das?**

F√ºr dieses Beispiel sollten Sie sich auf die folgenden Zeilen konzentrieren. "Daten jede Sekunde an den Blynk Cloud V1 Datastream senden" wird durch diese Zeilen definiert.

.. code-block:: arduino

    BlynkTimer timer;

    void myTimerEvent()
    {
        Blynk.virtualWrite(V1, pinValue);
    }

    void setup()
    {
        timer.setInterval(1000L, myTimerEvent);
    }

    void loop()
    {
        timer.run(); // Initiates BlynkTimer
    }

Die Blynk-Bibliothek stellt einen eingebauten Timer zur Verf√ºgung, zuerst erstellen wir ein Timer-Objekt.

.. code-block:: arduino

    BlynkTimer timer;

Legen Sie das Timer-Intervall in ``setup()`` fest. Hier setzen wir es so, dass die Funktion ``myTimerEvent()`` alle 1000ms ausgef√ºhrt wird.

.. code-block:: arduino

    timer.setInterval(1000L, myTimerEvent);

F√ºhren Sie BlynkTimer in ``loop()`` aus.

.. code-block:: arduino

    timer.run();

Bearbeiten Sie die benutzerdefinierte Funktion ``myTimerEvent()``. Der Code ``Blynk.virtualWrite(V1, pinValue)`` dient dazu, den Datenpin-Wert f√ºr V1 zu schreiben.

.. code-block:: arduino

    void myTimerEvent()
    {
        Blynk.virtualWrite(V1, pinValue);
    }


