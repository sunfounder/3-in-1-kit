.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _iot_blink:

2. Obtenir des Donn√©es depuis Blynk
=======================================

Dans ce chapitre, vous apprendrez √† contr√¥ler le circuit avec Blynk. Allumons les LED via Internet !

**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

**1. Construire le Circuit**

.. note::

    Le module ESP8266 n√©cessite un courant √©lev√© pour fournir un environnement de fonctionnement stable, donc assurez-vous que la batterie 9V est branch√©e.

.. image:: img/wiring_led.jpg

**2. √âditer le Tableau de Bord**

#. Allez sur le **Quickstart Device** que vous avez cr√©√© pr√©c√©demment, cliquez sur l'ic√¥ne du menu en haut √† droite et s√©lectionnez **edit dashboard**.

    .. image:: img/sp220609_112825.png

#. Les Datastreams permettent aux widgets sur Blynk et au code sur la carte R3 de se reconna√Ætre mutuellement. Pour exp√©rimenter le processus de configuration complet, supprimez tous les Datastreams de la page Datastreams.

    .. image:: img/sp220609_114723.png

#. Veuillez lire attentivement l'avertissement et confirmer qu'il est correct avant de supprimer les Datastreams.

    .. image:: img/sp220609_114929.png

#. Cr√©ez un Datastream de type **Virtual Pin**, qui sera utilis√© pour contr√¥ler la LED en utilisant l'interrupteur Blynk.

    .. image:: img/sp220609_115124.png


#. Configurez le **Virtual Pin**. Comme le bouton et la LED n'ont besoin que d'√™tre ON et OFF, r√©glez DATA TYPE sur ``Integer`` et MIN et MAX sur ``0`` et ``1``. 

    .. image:: img/sp220609_115520.png

#. Allez sur la page **Web Dashboard** et supprimez les widgets existants.

    .. image:: img/sp220609_133707.png

#. Faites glisser et d√©posez un widget **switch** depuis la **Widget Box** √† gauche.

    .. image:: img/sp220609_114508.png

#. Maintenant pour le configurer.

    .. image:: img/sp20220615180127.png

#. S√©lectionnez **Datastream** comme celui que vous avez configur√© pr√©c√©demment.

    .. image:: img/sp220609_133741.png

#. Apr√®s avoir s√©lectionn√© Datastream, vous verrez quelques param√®tres personnalis√©s, puis appuyez sur Enregistrer.

    .. image:: img/sp220609_133950.png

#. Enfin, cliquez sur **Save And Apply**.

    .. image:: img/sp220609_141733.png

**3. Ex√©cutez le Code**

#. Ouvrez le fichier ``2.get_data_from_blynk.ino`` situ√© dans le dossier ``3in1-kit\iot_project\2.get_data_from_blynk``, ou copiez ce code dans **Arduino IDE**.

    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/06b187a8-dabf-4866-b38c-742e0446cc3f/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Remplacez le ``Template ID``, ``Device Name`` et ``Auth Token`` par les v√¥tres. Vous devez √©galement entrer le ``ssid`` et le ``mot de passe`` du WiFi que vous utilisez. Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`connect_blynk`.

#. Apr√®s avoir s√©lectionn√© la bonne carte et le bon port, cliquez sur le bouton **Upoad**.

    .. image:: img/2_upload.png

#. Ouvrez le moniteur s√©rie (r√©glez le d√©bit en bauds sur 115200) et attendez qu'un message tel qu'une connexion r√©ussie apparaisse.

    .. image:: img/2_ready.png

    .. note::

        Si le message ``ESP is not responding`` appara√Æt lorsque vous vous connectez, veuillez suivre ces √©tapes.

        * Assurez-vous que la batterie 9V est branch√©e.
        * R√©initialisez le module ESP8266 en connectant la broche RST √† GND pendant 1 seconde, puis d√©branchez-la.
        * Appuyez sur le bouton de r√©initialisation de la carte R3.

        Parfois, il peut √™tre n√©cessaire de r√©p√©ter l'op√©ration ci-dessus 3 √† 5 fois, veuillez √™tre patient.

#. De retour sur Blynk, vous pouvez voir que le statut a chang√© en ligne et vous pouvez maintenant utiliser l'interrupteur widget sur Blynk pour contr√¥ler la LED connect√©e √† la carte R3.

    .. image:: img/2_blynk_button.png

#. Si vous souhaitez utiliser Blynk sur des appareils mobiles, veuillez vous r√©f√©rer √† :ref:`blynk_mobile`.


**Comment √ßa fonctionne ?**

La diff√©rence entre le code de ce projet et le code du chapitre pr√©c√©dent :ref:`connect_blynk` est les lignes suivantes.

.. code-block:: arduino

    const int ledPin=6;

    BLYNK_WRITE(V0)
    {
        int pinValue = param.asInt(); // assigning incoming value from pin V0 to a variable
        // You can also use:
        // String i = param.asStr();
        // double d = param.asDouble();
        digitalWrite(ledPin,pinValue);
    }

    void setup()
    {
        pinMode(ledPin,OUTPUT);
    }


En ce qui concerne les fonctions ``pinMode`` et ``digitalWrite`` du ledPin, je suis s√ªr que vous les connaissez d√©j√†, donc je ne vais pas les r√©expliquer. Ce sur quoi vous devez vous concentrer, c'est la fonction ``BLYNK_WRITE(V0)``.

Ce qu'elle va faire, c'est que lorsque la valeur de ``V0`` sur Blynk change, Blynk.Cloud dira √† votre appareil "Je suis en train d'√©crire sur le **Virtual Pin** V0", et votre appareil pourra r√©aliser quelque chose une fois qu'il aura re√ßu cette information.

Nous avons cr√©√© le Datastream V0 √† l'√©tape pr√©c√©dente et l'avons appliqu√© au Widget Interrupteur.
Cela signifie que chaque fois que nous utilisons le Widget Interrupteur, ``BLYNK_WRITE(V0)`` sera d√©clench√©.

Nous √©crivons deux instructions dans cette fonction.

.. code-block:: arduino

    int pinValue = param.asInt();

Obtenez la valeur de V0 et attribuez-la √† la variable ``pinValue``.

.. code-block:: arduino

    digitalWrite(ledPin,pinValue);

√âcrivez la valeur de V0 obtenue sur le ledPin, afin que le widget Interrupteur sur Blynk puisse contr√¥ler la LED.



