.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et des concours pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _iot_blink:

2. R√©cup√©rer des donn√©es de Blynk
======================================

Dans ce chapitre, vous apprendrez √† contr√¥ler le circuit avec Blynk. Allumons les LED via Internet !

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants.

Il est beaucoup plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment avec les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_esp8266`
        - |link_esp8266_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

**1. Construire le circuit**

.. note::

    Le module ESP8266 n√©cessite un courant √©lev√© pour un fonctionnement stable. Assurez-vous que la batterie 9V est branch√©e.

.. image:: img/iot_2_bb.png
    :width: 600
    :align: center

**2. Modifier le tableau de bord**
#. Acc√©dez √† l‚Äôappareil **Quickstart Device** que vous avez cr√©√© pr√©c√©demment et cliquez sur l‚Äôic√¥ne **Modifier le tableau de bord**.

    .. image:: img/blynk_edit_dashboard.png

#. Les flux de donn√©es permettent aux widgets de Blynk et au code de la carte R3 de se reconna√Ætre.

    .. image:: img/blynk_edit_datastream.png

#. Supprimez tous les flux de donn√©es existants de la page des flux de donn√©es pour suivre tout le processus de configuration.

    .. image:: img/blynk_edit_datastream_delete.png

#. Cr√©ez un flux de donn√©es de type **Virtual Pin**, qui sera utilis√© pour contr√¥ler la LED via l'interrupteur de Blynk.

    .. image:: img/blynk_edit_virtualpin.png

#. Configurez le **Virtual Pin**. Comme le bouton et la LED ne n√©cessitent que des √©tats ON et OFF, r√©glez le TYPE DE DONN√âES sur ``Integer`` et les valeurs MIN et MAX sur ``0`` et ``1``.

    .. image:: img/sp220609_115520.png

#. Acc√©dez √† la page **Web Dashboard**.

    .. image:: img/blynk_edit_web_dashboard.png

#. Supprimez les widgets existants.

    .. image:: img/blynk_edit_delete_dashboard.png

#. Faites glisser un widget **interrupteur** depuis la **Widget Box** √† gauche.

    .. image:: img/blynk_edit_drag_switch_widget.png

#. Configurez le widget.

    .. image:: img/blynk_edit_edit_widget.png

#. S√©lectionnez le flux de donn√©es configur√© pr√©c√©demment.

    .. image:: img/sp220609_133741.png

#. Une fois le flux de donn√©es s√©lectionn√©, quelques param√®tres personnalis√©s apparaissent. Appuyez ensuite sur Enregistrer.

    .. image:: img/sp220609_133950.png

#. Cliquez enfin sur **Enregistrer et appliquer**.

    .. image:: img/sp220609_141733.png

**3. Ex√©cuter le code**

#. Ouvrez le fichier ``2.get_data_from_blynk.ino`` situ√© dans ``3in1-kit\iot_project\2.get_data_from_blynk``, ou copiez ce code dans l'**Arduino IDE**.

    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/06b187a8-dabf-4866-b38c-742e0446cc3f/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Remplacez le ``Template ID``, le ``Device Name`` et le ``Auth Token`` par vos propres informations. Vous devez √©galement entrer le ``ssid`` et le ``password`` de votre r√©seau WiFi. Pour des tutoriels d√©taill√©s, reportez-vous √† :ref:`connect_blynk`.

#. Apr√®s avoir s√©lectionn√© la carte et le port appropri√©s, cliquez sur le bouton **T√©l√©verser**.

    .. image:: img/2_upload.png

#. Ouvrez le Moniteur S√©rie (d√©finissez le d√©bit en bauds √† 115200) et attendez qu'un message de connexion r√©ussie apparaisse.

    .. image:: img/2_ready.png

    .. note::

        Si le message ``ESP is not responding`` appara√Æt lors de la connexion, suivez ces √©tapes :

        * Assurez-vous que la batterie 9V est branch√©e.
        * R√©initialisez le module ESP8266 en connectant la broche RST √† GND pendant 1 seconde, puis d√©branchez-la.
        * Appuyez sur le bouton de r√©initialisation de votre carte.

        Vous devrez peut-√™tre r√©p√©ter ces op√©rations 3 √† 5 fois. Veuillez √™tre patient.

#. De retour sur Blynk, vous pouvez voir que le statut est pass√© √† en ligne, et vous pouvez maintenant utiliser le widget interrupteur sur Blynk pour contr√¥ler la LED connect√©e √† la carte R4.

    .. image:: img/blynk_button_on.png

#. Si vous souhaitez utiliser Blynk sur des appareils mobiles, veuillez consulter :ref:`blynk_mobile`.


**Comment cela fonctionne-t-il ?**

La diff√©rence entre le code de ce projet et celui du chapitre pr√©c√©dent :ref:`connect_blynk` r√©side dans les lignes suivantes :

.. code-block:: arduino

    const int ledPin=6;

    BLYNK_WRITE(V0)
    {
        int pinValue = param.asInt(); // affecte la valeur entrante de la broche V0 √† une variable
        // Vous pouvez √©galement utiliser :
        // String i = param.asStr();
        // double d = param.asDouble();
        digitalWrite(ledPin,pinValue);
    }

    void setup()
    {
        pinMode(ledPin,OUTPUT);
    }

Concernant les fonctions ``pinMode`` et ``digitalWrite`` de ledPin, vous en √™tes d√©j√† probablement familier, donc elles ne seront pas d√©taill√©es ici. Ce qui est important, c'est la fonction ``BLYNK_WRITE(V0)``.

Cette fonction agit lorsque la valeur de ``V0`` change sur Blynk. Blynk.Cloud informe alors votre appareil qu'il √©crit sur la **broche virtuelle** V0, permettant √† l'appareil d'ex√©cuter une action apr√®s r√©ception de cette information.

Nous avons cr√©√© le flux de donn√©es V0 √† l'√©tape pr√©c√©dente et l'avons appliqu√© au Widget Interrupteur. Cela signifie qu'√† chaque utilisation du Widget Interrupteur, ``BLYNK_WRITE(V0)`` sera d√©clench√©e.

Voici les instructions dans cette fonction :

.. code-block:: arduino

    int pinValue = param.asInt();

R√©cup√®re la valeur de V0 et l'assigne √† la variable ``pinValue``.

.. code-block:: arduino

    digitalWrite(ledPin,pinValue);

√âcrit la valeur de V0 sur ledPin, permettant ainsi au Widget Interrupteur de Blynk de contr√¥ler la LED.
