.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

6.5 Jeu de R√©action
==========================

Notre corps r√©agit √† diff√©rents types de stimuli tels que les sons (RT audio), les images (RT visuel), ou le toucher (RT tactile).

Les temps de r√©action jouent un r√¥le cl√© dans notre vie quotidienne. Par exemple, un temps de r√©action plus lent que la normale lors de la conduite peut avoir des cons√©quences graves.

Dans ce projet, nous utilisons 3 boutons et 2 LEDs pour mesurer le temps de r√©action visuel.

Le moniteur s√©rie de l'Arduino affiche le message "waiting...".
Apr√®s avoir appuy√© sur le bouton Ready, l'une des deux LEDs s'allume de mani√®re al√©atoire apr√®s un intervalle de temps al√©atoire. Le participant doit appuyer sur le bouton correspondant le plus rapidement possible.
L'Arduino enregistre la diff√©rence de temps entre le moment o√π la LED s'allume et celui o√π le bouton correspondant est press√©, et affiche le temps de r√©action mesur√© sur le moniteur s√©rie.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants :

C'est pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

**Sch√©ma**

.. image:: img/wiring_reaction_game.png
    :align: center

**C√¢blage**

.. image:: img/6.5_reaction_game_bb.png
    :width: 600
    :align: center

**Code**

.. note::

    * Ouvrez le fichier ``6.5.reaction_time.ino`` dans le r√©pertoire ``3in1-kit\learning_project\6.5_reversingAid``.
    * Ou copiez ce code dans l'IDE Arduino.
    * Assurez-vous d'avoir ajout√© la biblioth√®que ``LiquidCrystal_I2C``, les tutoriels d√©taill√©s sont disponibles ici : :ref:`install_libraries_ar`.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/4313dd1c-e1d2-4939-ae20-0a5b82a12390/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

**Comment √ßa marche ?**

#. Initialisez les boutons et LEDs. Deux interruptions sont utilis√©es ici pour lire l'√©tat des boutons.

    .. code-block:: arduino

        void setup()
        {

            ...

            attachInterrupt(digitalPinToInterrupt(buttonPin1), pressed1, FALLING);
            attachInterrupt(digitalPinToInterrupt(buttonPin2), pressed2, FALLING);
            ...
        }

#. Si le bouton ``rstBtn`` est press√©, le jeu recommence. Apr√®s un d√©lai al√©atoire compris entre 2 et 5ms, l'une des LEDs s'allume.

    .. code-block:: arduino

        void loop()
        {
            if (flag == -1 && digitalRead(rstBtn) == LOW) {
                digitalWrite(ledPin1, LOW);
                digitalWrite(ledPin2, LOW);
                Serial.println("Waiting...");
                int randomTime = random(2000, 5000);
                delay(randomTime);

                timer = millis();
                flag = randomTime % 2;
                Serial.println("Light!");

                if (flag == 0) {
                    digitalWrite(ledPin1, HIGH);
                } else if (flag == 1) {
                    digitalWrite(ledPin2, HIGH);
                }
            }
            delay(200);
        }

    * Lorsque flag vaut -1 et que le bouton ``rstBtn`` est press√©, utilisez la fonction ``random()`` pour g√©n√©rer un d√©lai al√©atoire de 2 √† 5 secondes.
    * Ce d√©lai est utilis√© pour contr√¥ler l'allumage des LEDs.
    * L'allumage des 2 LEDs est g√©n√©r√© al√©atoirement par ``randomTime % 2``, soit 0 pour la LED1, soit 1 pour la LED2.

#. √Ä propos de la fonction ``pressed1()``

    .. code-block:: arduino

        void pressed1() {
            if (flag == -1) {
                return;
            }
            if (flag == 0) {
                int currentTime = millis();
                Serial.print("Correct! You reaction time is : ");
                Serial.print(currentTime - timer);
                Serial.println(" ms");
            } else if (flag == 1) {
                Serial.println("Wrong Click!");
            }
            flag = -1;
        }

    Cette fonction est d√©clench√©e lorsque le bouton 1 est press√©. Si flag vaut 0 √† ce moment-l√†, le temps de r√©action est affich√© ; sinon, une erreur de clic est signal√©e.

#. √Ä propos de la fonction ``pressed2()``

    .. code-block:: arduino

        void pressed2() {
            if (flag == -1) {
                return;
            }
            if (flag == 1) {
                int currentTime =millis();
                Serial.print("Correct! You reaction time is : ");
                Serial.print(currentTime - timer);
                Serial.println(" ms");
            } else if (flag == 0) {
                Serial.println("Wrong Click!");
            }
            flag = -1;
        }

    Cette fonction est d√©clench√©e lorsque le bouton 2 est press√©. Si flag vaut 1 √† ce moment-l√†, le temps de r√©action est affich√© ; sinon, une erreur de clic est signal√©e.
