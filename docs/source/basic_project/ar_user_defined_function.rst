.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook‚ÄØ! Explorez en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions et concours festifs** : Participez √† des concours et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous‚ÄØ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui‚ÄØ!

.. _ar_ultrasonic:

5.8 Fonction d√©finie par l'utilisateur
==========================================

En langage C, nous pouvons diviser un programme volumineux en blocs de construction de base appel√©s fonctions. 
Une fonction contient un ensemble d'instructions de programmation d√©limit√©es par des accolades {}. 
Une fonction peut √™tre appel√©e plusieurs fois, offrant ainsi r√©utilisabilit√© et modularit√© au programme C. 
En d'autres termes, on peut dire qu'un programme est une collection de fonctions. 
Une fonction est √©galement connue sous le nom de proc√©dure ou de sous-routine dans d'autres langages de programmation.

Voici les avantages des fonctions :

* Gr√¢ce aux fonctions, nous √©vitons de r√©√©crire la m√™me logique ou le m√™me code √† plusieurs reprises dans un programme.
* Nous pouvons appeler des fonctions C autant de fois que n√©cessaire et √† n'importe quel endroit d'un programme.
* Diviser un programme volumineux en plusieurs fonctions facilite sa gestion.
* La r√©utilisabilit√© est un des principaux atouts des fonctions en C.
* Cependant, l'appel de fonctions engendre une surcharge dans un programme C.

Il existe deux types de fonctions en programmation C :

* **Fonctions de biblioth√®que** : fonctions d√©clar√©es dans les fichiers d'en-t√™te C.
* **Fonctions d√©finies par l'utilisateur** : fonctions cr√©√©es par le programmeur C pour une utilisation fr√©quente. Cela r√©duit la complexit√© d'un programme volumineux et optimise le code.

Dans ce projet, nous d√©finissons une fonction pour lire la valeur du module ultrasonique.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants :

Il est tr√®s pratique d‚Äôacheter un kit complet. Voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT
    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|

**Sch√©ma**

.. image:: img/circuit_6.3_ultrasonic.png

**C√¢blage**

.. image:: img/5.8_ultrasonic_bb.png
    :width: 600
    :align: center

**Code**

.. note::

    * Ouvrez le fichier ``5.8.user_function.ino`` dans le chemin ``3in1-kit\learning_project\5.8.user_function``.
    * Ou copiez ce code dans **Arduino IDE**.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/11717782-3ee6-4eca-bbb9-094385d9eb4b/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Une fois le code t√©l√©charg√© avec succ√®s, le moniteur s√©rie affichera la distance entre le capteur ultrasonique et l'obstacle devant.


**Comment √ßa fonctionne ?**

Concernant l'application du capteur ultrasonique, nous pouvons directement v√©rifier la sous-fonction.

.. code-block:: arduino

    float readSensorData(){// ...}

Le ``trigPin`` du module ultrasonique transmet un signal d'onde carr√©e de 10 us toutes les 2 us.

.. code-block:: arduino

    digitalWrite(trigPin, LOW); 
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH); 
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW); 

Le ``echoPin`` re√ßoit un signal de niveau haut si un obstacle est d√©tect√© dans la port√©e, et utilise la fonction ``pulseIn()`` pour enregistrer le temps entre l'√©mission et la r√©ception.

.. code-block:: arduino

    microsecond=pulseIn(echoPin, HIGH);

La vitesse du son est de 340 m/s ou 29 microsecondes par centim√®tre.

Cela donne la distance parcourue par l'onde carr√©e (aller-retour), il faut 
donc diviser par 2 pour obtenir la distance de l'obstacle.

.. code-block:: arduino

    float distance = microsecond / 29.00 / 2;

Notez que le capteur ultrasonique met le programme en pause lorsqu'il fonctionne, ce qui peut entra√Æner des retards dans les projets complexes.
