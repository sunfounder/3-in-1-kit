.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_ultrasonic:

5.8 Benutzerdefinierte Funktion
======================================

In C k√∂nnen wir ein umfangreiches Programm in grundlegende Bausteine unterteilen, die als Funktion bekannt sind. 
Eine Funktion enth√§lt eine Menge von Programmieranweisungen, die von {} eingeschlossen sind. 
Eine Funktion kann mehrmals aufgerufen werden, um Wiederverwendbarkeit und Modularit√§t im C-Programm zu gew√§hrleisten. 
Mit anderen Worten, eine Sammlung von Funktionen bildet ein Programm. 
In anderen Programmiersprachen wird die Funktion auch als Prozedur oder Unterprogramm bezeichnet.

Es gibt folgende Vorteile von Funktionen:

* Mit Funktionen k√∂nnen wir vermeiden, dieselbe Logik/den gleichen Code in einem Programm immer wieder neu zu schreiben.
* Wir k√∂nnen C-Funktionen beliebig oft und von beliebigen Stellen in einem Programm aufrufen.
* Ein umfangreiches C-Programm l√§sst sich leichter nachverfolgen, wenn es in mehrere Funktionen unterteilt ist.
* Die Hauptleistung von C-Funktionen ist die Wiederverwendbarkeit.
* Ein Funktionsaufruf ist jedoch immer ein Overhead in einem C-Programm.

Es gibt zwei Arten von Funktionen in der C-Programmierung:

* **Library Functions**: die Funktionen, die in den C-Header-Dateien deklariert sind.
* **User-defined functions**: die Funktionen, die vom C-Programmierer erstellt wurden, damit er/sie sie mehrmals verwenden kann. Es reduziert die Komplexit√§t eines gro√üen Programms und optimiert den Code.

In diesem Projekt definieren wir eine Funktion, um den Wert des Ultraschallmoduls zu lesen.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|

**Schaltplan**

.. image:: img/circuit_6.3_ultrasonic.png

**Verdrahtung**

.. image:: img/5.8_ultrasonic_bb.png
    :width: 600
    :align: center

**Code**

.. note::

    * √ñffnen Sie die Datei ``5.8.user_function.ino`` im Pfad ``3in1-kit\learning_project\5.8.user_function``.
    * Oder kopieren Sie diesen Code in die **Arduino IDE**.

    
    


.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/11717782-3ee6-4eca-bbb9-094385d9eb4b/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    

Nachdem der Code erfolgreich hochgeladen wurde, wird der serielle Monitor den Abstand zwischen dem Ultraschallsensor und dem Hindernis vor ihm ausgeben.

**Wie funktioniert das?**

Zur Anwendung des Ultraschallsensors k√∂nnen wir direkt die Unterfunktion √ºberpr√ºfen.

.. code-block:: arduino

    float readSensorData(){// ...}

Der ``trigPin`` des Ultraschallmoduls sendet alle 2us ein 10us Quadratwellensignal.

.. code-block:: arduino

    digitalWrite(trigPin, LOW); 
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH); 
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW); 


Der ``echoPin`` empf√§ngt ein High-Level-Signal, wenn sich ein Hindernis im Bereich befindet, und verwendet die ``pulseIn()``-Funktion, um die Zeit vom Senden bis zum Empfangen aufzuzeichnen.

.. code-block:: arduino

    microsecond=pulseIn(echoPin, HIGH);

Die Schallgeschwindigkeit betr√§gt 340 m/s oder 29 Mikrosekunden pro Zentimeter.

Dies gibt die von der Quadratwelle zur√ºckgelegte Entfernung an, hin und zur√ºck, also teilen wir durch 2, um die Entfernung des Hindernisses zu erhalten.

.. code-block:: arduino

    float distance = microsecond / 29.00 / 2;  

Beachten Sie, dass der Ultraschallsensor das Programm anh√§lt, wenn er arbeitet, was zu Verz√∂gerungen bei der Erstellung komplexer Projekte f√ºhren kann.

