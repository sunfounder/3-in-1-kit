.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_digital_read:

3. Digitaler Lesevorgang
==============================

Sensoren erfassen Informationen aus der realen Welt, welche √ºber Pins (manche digital, manche analog) an das Hauptboard weitergegeben werden, sodass der Computer die tats√§chliche Situation erkennen kann.

Daher kann das Arduino-Board den Arbeitsstatus von digitalen Sensoren erkennen, indem es den Wert digitaler Pins wie Tasten oder IR-Vermeidungsmodule liest.

Hier sind die ben√∂tigten Funktionen:

* ``pinMode(pin, mode)``: Konfiguriert den spezifischen Pin als ``INPUT`` oder ``OUTPUT``. Hier muss er auf ``INPUT`` gesetzt werden.

   **Syntax**
      pinMode(pin, mode)

   **Parameter**
    * ``pin``: Die Arduino-Pin-Nummer, f√ºr die der Modus gesetzt werden soll.
    * ``mode``: INPUT, OUTPUT oder INPUT_PULLUP.


* ``digitalRead(pin)``: Liest den Wert (Zustand) vom angegebenen digitalen Pin.

   **Syntax**
      digitalRead(pin)

   **Parameter**
    * ``pin``: Die Arduino-Pin-Nummer, die Sie lesen m√∂chten.

   **R√ºckgabewert**
      HIGH oder LOW


**Beispiel f√ºr Digitalen Lesevorgang**

.. code-block:: arduino

   int ledPin = 13;  // LED verbunden mit digitalem Pin 13
   int inPin = 7;    // Taster verbunden mit digitalem Pin 7
   int val = 0;      // Variable zum Speichern des gelesenen Wertes

   void setup() {
      pinMode(ledPin, OUTPUT);  // setzt den digitalen Pin 13 als Ausgang
      pinMode(inPin, INPUT);    // setzt den digitalen Pin 7 als Eingang
   }

   void loop() {
      val = digitalRead(inPin);   // liest den Eingangspin
      digitalWrite(ledPin, val);  // setzt die LED auf den Wert des Tasters
   }

**Anmerkungen und Warnungen**

1. Pull-Up & Pull-Down.

    ``digitalRead()`` kann zuf√§llige, unbestimmte Werte produzieren, wenn der Pin kein klares Signal erh√§lt. Das Steuern der Eingangspins in einen bekannten Zustand kann das Projekt zuverl√§ssiger machen.
    Bei der Verwendung einer Eingangskomponente wie einem Taster ist es normalerweise notwendig, einen Pull-Up- oder Pull-Down-Widerstand parallel zum digitalen Eingangspin anzuschlie√üen.

    Abgesehen vom Anschluss eines Pull-up-Widerstands k√∂nnen Sie auch den Pin-Modus im Code auf ``INPUT_PULLUP`` setzen, zum Beispiel ``pinMode(pin, INPUT_PULLUP)``. In diesem Fall wird der Pin √ºber die Software auf den internen Pull-up-Widerstand von Atmega zugreifen, und es hat den gleichen Effekt wie das Anschlie√üen eines Pull-up-Widerstands.

2. √úber Pin13.

    Alle digitalen Pins (1-13) auf dem R3-Board k√∂nnen mit ``digitalRead()`` verwendet werden.
    Aber der digitale Pin 13 ist schwieriger als Eingang zu verwenden als andere digitale Pins. 
    Da er mit einer LED und einem Widerstand verbunden ist, ist er auf den meisten Boards verl√∂tet.
    Wenn Sie seinen internen 20k Pull-up-Widerstand aktivieren, wird er statt der erwarteten 5V bei etwa 1,7V liegen, da die onboard LED und der Serienwiderstand das Spannungsniveau senken. Das bedeutet, er gibt immer LOW zur√ºck. Wenn Sie Pin 13 als digitalen Eingang verwenden m√ºssen, setzen Sie seinen ``pinMode()`` auf INPUT und verwenden Sie einen externen Pull-down-Widerstand.

3. Analoge Pins.

    Wenn die digitalen Pins nicht ausreichen, k√∂nnen die analogen Pins (A0-A5) auch als digitale Pins verwendet werden.
    Sie m√ºssen mit ``pinMode(pin,mode)`` auf INPUT gesetzt werden.

**Verwandte Komponenten**

Unten finden Sie die zugeh√∂rigen Komponenten. Sie k√∂nnen darauf klicken, um zu erfahren, wie sie verwendet werden.

.. toctree::
    :maxdepth: 2

    ar_serial_monitor
    ar_button
    ar_reed
    ar_detect_the_obstacle
    ar_detect_the_line


