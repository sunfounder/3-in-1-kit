.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et √† des cadeaux festifs.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ard_serial_monitor:

3.0 Moniteur S√©rie
=============================

Dans l'IDE Arduino, il existe un moniteur s√©rie qui vous permet d'envoyer des messages de votre ordinateur √† la carte Arduino (via USB) et √©galement de recevoir des messages de l'Arduino.

Dans ce projet, nous allons apprendre √† recevoir des donn√©es de la carte Arduino.

.. note::

    Sur les cartes Uno, Nano, Mini et Mega, les broches 0 et 1 sont utilis√©es pour la communication avec l'ordinateur. Toute connexion √† ces broches peut perturber cette communication, y compris entra√Æner l'√©chec des t√©l√©versements vers la carte.


**Utilisation du Moniteur S√©rie**

1. Ouvrez l'IDE Arduino, et collez le code suivant :

    .. code-block:: arduino

        // La routine setup s'ex√©cute une fois au d√©marrage ou apr√®s un reset :
        void setup() {
            // initialise la communication s√©rie √† 9600 bits par seconde :
            Serial.begin(9600);
        }

        // La routine loop s'ex√©cute en continu :
        void loop() {
            int number = 100;
            Serial.println(number);
            Serial.println("Hello world");
            delay(100);         // d√©lai entre les lectures pour la stabilit√©
        }

   * `Serial.begin() <https://www.arduino.cc/reference/en/language/functions/communication/serial/begin/>`_ : D√©finit le d√©bit en bits par seconde (baud) pour la transmission de donn√©es s√©rie, ici d√©fini √† 9600.
   * `Serial.println() <https://www.arduino.cc/reference/en/language/functions/communication/serial/println/>`_ : Envoie des donn√©es au port s√©rie sous forme de texte ASCII lisible suivi d'un caract√®re de retour chariot (ASCII 13, ou '\r') et d'un saut de ligne (ASCII 10, ou '\n'). Cette commande accepte les m√™mes formats que `Serial.print() <https://www.arduino.cc/reference/en/language/functions/communication/serial/print/>`_.

2. S√©lectionnez la carte et le port corrects pour t√©l√©verser le code.
3. Dans la barre d'outils, cliquez sur l'ic√¥ne en forme de loupe pour activer le Moniteur S√©rie.

.. image:: img/serial1.png
    :align: center

4. Voici le Moniteur S√©rie.

.. image:: img/serial2.png
    :align: center

* **1** : Option pour s√©lectionner le d√©filement automatique ou non.
* **2** : Option pour afficher un horodatage avant les donn√©es affich√©es sur le Moniteur S√©rie.
* **3** : Choix de terminaison, s√©lection des caract√®res de fin ajout√©s aux donn√©es envoy√©es √† l'Arduino. Les choix incluent :

        * **Pas de fin de ligne** : envoie uniquement ce que vous tapez ;
        * **Nouvelle ligne** est ``\n`` et envoie un code ASCII de nouvelle ligne apr√®s ce que vous tapez ;
        * **Retour chariot** est ``\r``, qui envoie un caract√®re ASCII de retour chariot apr√®s ce que vous tapez ;
        * **NL et CR** est ``\r\n``, qui envoie √† la fois un retour chariot et un saut de ligne apr√®s ce que vous tapez.

* **4** : S√©lectionnez la vitesse de communication entre la carte Arduino et le PC. Cette valeur DOIT √™tre identique √† celle d√©finie dans ``Serial.begin()``.
* **5** : Efface tout le texte de la console de sortie.
* **6** : Une zone de texte pour envoyer des caract√®res √† la carte Arduino, voir :ref:`ar_serial_read` pour un tutoriel.
