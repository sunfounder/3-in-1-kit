.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ard_serial_monitor:

3.0 Serieller Monitor
=============================

In der Arduino IDE gibt es einen seriellen Monitor, der es erm√∂glicht, Nachrichten von Ihrem Computer zum Arduino-Board (√ºber USB) zu senden und auch Nachrichten vom Arduino zu empfangen.

In diesem Projekt werden wir also lernen, wie man Daten vom Arduino-Board empf√§ngt.

.. note::

    Bei Uno, Nano, Mini und Mega werden die Pins 0 und 1 zur Kommunikation mit dem Computer verwendet. Das Anschlie√üen von Ger√§ten an diese Pins kann die Kommunikation st√∂ren, einschlie√ülich fehlgeschlagener Uploads zum Board.


**Verwendung des seriellen Monitors**

1. √ñffnen Sie die Arduino IDE und f√ºgen Sie den folgenden Code ein.

    .. code-block:: arduino

        // Die Setup-Routine wird einmal ausgef√ºhrt, wenn Sie Reset dr√ºcken:
        void setup() {
            // Initialisiere die serielle Kommunikation mit 9600 Baud:
            Serial.begin(9600);
        }

        // Die Loop-Routine wird immer und immer wieder ausgef√ºhrt:
        void loop() {
            int number = 100;
            Serial.println(number);
            Serial.println("Hello world");
            delay(100);         // Verz√∂gerung zwischen den Abfragen f√ºr Stabilit√§t
        }

   * `Serial.begin() <https://www.arduino.cc/reference/en/language/functions/communication/serial/begin/>`_: Legt die Datenrate in Bits pro Sekunde (Baud) f√ºr die serielle Daten√ºbertragung fest, hier auf 9600 eingestellt.
   * `Serial.println() <https://www.arduino.cc/reference/en/language/functions/communication/serial/println/>`_: Sendet Daten zum seriellen Port als menschenlesbaren ASCII-Text, gefolgt von einem Wagenr√ºcklauf (ASCII 13 oder '\r') und einem Zeilenumbruch (ASCII 10 oder '\n'). Dieser Befehl entspricht `Serial.print() <https://www.arduino.cc/reference/en/language/functions/communication/serial/print/>`_.

2. W√§hlen Sie das richtige Board und den richtigen Port aus, um den Code hochzuladen.
3. Klicken Sie in der Symbolleiste auf das Lupensymbol, um den seriellen Monitor zu aktivieren.

.. image:: img/serial1.png
    :align: center

4. Hier sehen Sie den seriellen Monitor.

.. image:: img/serial2.png
    :align: center

* **1**: Option, um automatisch zu scrollen oder nicht zu scrollen.
* **2**: Option, um einen Zeitstempel vor den im seriellen Monitor angezeigten Daten anzuzeigen.
* **3**: Auswahl des Zeilenendes, w√§hlt die Zeichen aus, die den an Arduino gesendeten Daten hinzugef√ºgt werden. Auswahl beinhaltet:

        * **Kein Zeilenumbruch** sendet nur, was Sie eingeben; 
        * **Zeilenumbruch** ist ``\n`` und sendet nach Ihrer Eingabe einen ASCII-Zeilenumbruchcode;
        * **Wagenr√ºcklauf** ist ``\r`` und sendet nach Ihrer Eingabe ein ASCII-Wagenr√ºcklaufzeichen;
        * **Beides, NL & CR** ist ``\r\n`` und sendet nach Ihrer Eingabe sowohl ein Wagenr√ºcklauf- als auch ein Zeilenumbruchzeichen.
* **4**: W√§hlen Sie die Kommunikationsgeschwindigkeit zwischen Arduino-Board und PC. Dieser Wert MUSS dem in ``Serial.begin()`` eingestellten Wert entsprechen.
* **5**: L√∂scht den gesamten Text auf der Ausgabekonsole.
* **6**: Ein Textfeld, um Zeichen an das Arduino-Board zu senden, siehe :ref:`ar_serial_read` f√ºr ein Tutorial.


