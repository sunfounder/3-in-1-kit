.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_interrupt:

5.13 Interruption
=======================

Si vous utilisez des ``delay()`` dans un projet avec des capteurs, vous remarquerez peut-√™tre que lorsque vous d√©clenchez ces capteurs, le programme ne r√©agit pas. 
Cela est d√ª au fait que l'instruction ``delay`` suspend l'ex√©cution du programme, emp√™chant ce dernier de recevoir les signaux envoy√©s par les capteurs √† la carte de contr√¥le.

Dans ce cas, vous pouvez utiliser des interruptions. Les interruptions permettent au programme de ne pas manquer une impulsion.

Dans ce chapitre, nous utilisons un buzzer actif et des boutons pour exp√©rimenter l'utilisation des interruptions.

Dans la fonction ``loop()``, ``delay(1000)`` est utilis√© pour compter les secondes. Le bouton qui contr√¥le le buzzer est plac√© dans l'ISR, de mani√®re √† ne pas √™tre perturb√© par le d√©lai et √† accomplir sa t√¢che sans probl√®me.

.. note::
    Les ISR (Interrupt Service Routines) sont des fonctions sp√©ciales ayant des limitations uniques. Un ISR ne peut pas prendre de param√®tres et ne doit rien renvoyer. 
    En g√©n√©ral, un ISR doit √™tre aussi court et rapide que possible. Si votre sketch utilise plusieurs ISR, un seul peut √™tre ex√©cut√© √† la fois. Les autres interruptions seront ex√©cut√©es apr√®s que l'interruption actuelle soit termin√©e, dans un ordre d√©pendant de leur priorit√©.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants :

C'est pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_buzzer`
        - \-

**Sch√©ma**

.. image:: img/circuit_8.6_interval.png

**C√¢blage**

.. image:: img/5.13_interrupt_bb.png
    :width: 600
    :align: center

**Code**

.. note::

    * Ouvrez le fichier ``5.13.interrupt.ino`` dans le r√©pertoire ``3in1-kit\learning_project\5.13.interrupt``.
    * Ou copiez ce code dans l'IDE Arduino.
    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/6111757d-dd63-4c4c-95b5-9d96fb0843f0/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir t√©l√©charg√© le code avec succ√®s, ouvrez le moniteur s√©rie et vous verrez un 
nombre auto-incr√©ment√© imprim√© toutes les secondes. Si vous appuyez sur le bouton, le 
buzzer √©met un son. La fonction de minuterie et la fonction du buzzer contr√¥l√© par le 
bouton ne se perturbent pas.

**Comment √ßa fonctionne ?**

* ``attachInterrupt(digitalPinToInterrupt(pin), ISR, mode)`` : Ajoute une interruption.

    **Syntaxe**
        attachInterrupt(digitalPinToInterrupt(pin), ISR, mode) 

    **Param√®tres**
        * ``pin`` : le num√©ro du pin Arduino. Utilisez ``digitalPinToInterrupt(pin)`` pour convertir le num√©ro du pin en num√©ro d'interruption sp√©cifique. Par exemple, si vous connectez au pin 3, utilisez ``digitalPinToInterrupt(3)`` comme premier param√®tre.
        * ``ISR`` : l'ISR √† appeler lorsque l'interruption se produit ; cette fonction ne doit pas prendre de param√®tres ni renvoyer quoi que ce soit. Elle est parfois appel√©e routine de service d'interruption.
        * ``mode`` : d√©finit quand l'interruption doit √™tre d√©clench√©e. Quatre constantes sont pr√©d√©finies comme valeurs valides :

          * ``LOW`` pour d√©clencher l'interruption lorsque le pin est bas,
          * ``CHANGE`` pour d√©clencher l'interruption lorsque la valeur du pin change,
          * ``RISING`` pour d√©clencher lorsque le pin passe de bas √† haut,
          * ``FALLING`` pour lorsque le pin passe de haut √† bas.

.. note:: 
    Les diff√©rents microcontr√¥leurs utilisent les pins d'interruption diff√©remment. Sur votre carte, seuls les pins 2 et 3 peuvent utiliser les interruptions.
