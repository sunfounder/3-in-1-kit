.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et √† des cadeaux festifs.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_shiftout:

5.9 ShiftOut (LED)
=======================

La fonction ``shiftOut()`` permet au 74HC595 de produire 8 signaux num√©riques. Elle envoie le dernier bit du nombre binaire vers Q0 et le premier bit vers Q7. Autrement dit, √©crire le nombre binaire ‚Äú00000001‚Äù fera que Q0 produira un niveau haut et que Q1~Q7 produiront un niveau bas.

Dans ce projet, vous apprendrez √† utiliser le 74HC595. Le 74HC595 se compose d‚Äôun registre √† d√©calage de 8 bits et d‚Äôun registre de stockage avec sorties parall√®les √† trois √©tats. Il convertit une entr√©e s√©rie en une sortie parall√®le, permettant ainsi d‚Äô√©conomiser des ports d‚ÄôE/S sur un microcontr√¥leur.

Plus pr√©cis√©ment, le 74HC595 peut remplacer 8 broches pour produire des signaux num√©riques en √©crivant un nombre binaire de 8 bits.

* `Nombre binaire - Wikip√©dia <https://en.wikipedia.org/wiki/Binary_number>`_

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants.

Il est vraiment pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

**Sch√©ma**

.. image:: img/circuit_6.4_74hc595.png

* Lorsque MR (pin10) est √† un niveau haut et OE (pin13) √† un niveau bas, les donn√©es sont saisies sur le front montant de SHcp et transf√©r√©es au registre m√©moire sur le front montant de SHcp.
* Si les deux horloges sont connect√©es ensemble, le registre √† d√©calage est toujours une impulsion avant le registre m√©moire.
* Il y a une broche d'entr√©e de d√©calage s√©rie (Ds), une broche de sortie s√©rie (Q) et un bouton de r√©initialisation asynchrone (niveau bas) dans le registre m√©moire.
* Le registre m√©moire produit un bus parall√®le √† 8 bits et √† trois √©tats.
* Lorsque OE est activ√© (niveau bas), les donn√©es dans le registre m√©moire sont sorties vers le bus (Q0 ~ Q7).

**C√¢blage**

.. image:: img/5.9_74hc595_bb.png
    :width: 800
    :align: center

**Code**

.. note::

    * Ouvrez le fichier ``5.9.shiftout_led.ino`` dans le chemin ``3in1-kit\learning_project\5.9.shiftout_led``.
    * Ou copiez ce code dans **Arduino IDE**.
    
    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/4c208eb3-67f0-40f7-999a-0eeca8b6b466/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Apr√®s avoir t√©l√©vers√© le code sur la carte R4, vous verrez les LED s‚Äôallumer une par une.

**Comment cela fonctionne-t-il ?**

D√©clarez un tableau pour stocker plusieurs nombres binaires sur 8 bits qui sont utilis√©s pour changer l‚Äô√©tat de fonctionnement des huit LED contr√¥l√©es par le 74HC595.

.. code-block:: arduino

    int datArray[] = {B00000000, B00000001, B00000011, B00000111, B00001111, B00011111, B00111111, B01111111, B11111111};

R√©glez ``STcp`` √† un niveau bas puis √† un niveau haut pour g√©n√©rer une impulsion de front montant pour STcp.

.. code-block:: arduino

    digitalWrite(STcp,LOW); 

La fonction ``shiftOut()`` est utilis√©e pour d√©caler un octet de donn√©es, bit par bit, 
ce qui signifie d√©caler un octet de donn√©es de ``datArray[num]`` vers le registre de 
d√©calage via la broche ``DS``. **MSBFIRST** signifie d√©caler les bits de poids fort en premier.

.. code-block:: arduino

    shiftOut(DS,SHcp,MSBFIRST,datArray[num]);

Apr√®s l'ex√©cution de ``digitalWrite(STcp,HIGH)``, STcp passe au front montant. 
√Ä ce moment, les donn√©es du registre de d√©calage seront transf√©r√©es vers le registre m√©moire.

.. code-block:: arduino

    digitalWrite(STcp,HIGH);

Un octet de donn√©es sera transf√©r√© dans le registre m√©moire apr√®s 8 d√©calages. 
Ensuite, les donn√©es du registre m√©moire sont sorties vers le bus (Q0-Q7). 
Par exemple, ``shiftOut(B00000001)`` allumera la LED contr√¥l√©e par Q0 et √©teindra 
celles contr√¥l√©es par Q1~Q7.
