.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans le monde de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_high_tem_alarm:

6.3 Alarme de haute temp√©rature
====================================


Ensuite, nous allons fabriquer un dispositif d'alarme de haute temp√©rature √† l'aide d'une thermistance, d'un bouton-poussoir, d'un potentiom√®tre et d'un √©cran LCD. 
Le LCD1602 affiche la temp√©rature d√©tect√©e par la thermistance ainsi que la valeur seuil de temp√©rature √©lev√©e, 
qui peut √™tre ajust√©e √† l'aide d'un potentiom√®tre. 
La valeur seuil est simultan√©ment stock√©e dans l'EEPROM, de sorte que si la temp√©rature actuelle d√©passe la valeur seuil, 
le buzzer se d√©clenche.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants. 

Il est tr√®s pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_i2c_lcd1602`
        - |link_i2clcd1602_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|
    *   - :ref:`cpn_potentiometer`
        - |link_potentiometer_buy|

**Sch√©ma**

.. image:: img/wiring_high_tem.png
   :align: center


**C√¢blage**

.. image:: img/6.3_high_tem_alarm_bb.png
    :width: 800
    :align: center

**Code**


.. note::

    * Vous pouvez ouvrir le fichier ``6.3.high_tem_alarm.ino`` directement dans le r√©pertoire ``3in1-kit\learning_project\6.3.high_tem_alarm``.
    * Ou copiez ce code dans l'Arduino IDE.
    * La biblioth√®que ``LiquidCrystal I2C`` est utilis√©e ici, vous pouvez l'installer via le **Gestionnaire de biblioth√®ques**.

        .. image:: ../img/lib_liquidcrystal_i2c.png
    

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/1341b79d-c87e-4cea-ad90-189c2ebf40ee/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s le t√©l√©chargement du code avec succ√®s, le LCD1602 affiche la temp√©rature d√©tect√©e par la thermistance ainsi que la valeur seuil de temp√©rature √©lev√©e, qui peut √™tre ajust√©e √† l'aide d'un potentiom√®tre. La valeur seuil est stock√©e dans l'EEPROM en m√™me temps, et si la temp√©rature actuelle d√©passe la valeur seuil, le buzzer √©met un son.

.. note::
    Si le code et le c√¢blage sont corrects mais que le LCD ne s'affiche pas, vous pouvez ajuster le potentiom√®tre √† l'arri√®re.

**Comment √ßa fonctionne ?**

#. Initialisez le bouton, le buzzer et le LCD1602 I2C, puis lisez les valeurs de l'EEPROM. Une interruption est √©galement utilis√©e ici pour lire l'√©tat du bouton.

    .. code-block:: arduino

        void setup()
        {
            pinMode(buzzerPin, OUTPUT);
            pinMode(buttonPin, INPUT);
            lcd.init();
            lcd.backlight();
            upperTem = EEPROM.read(0);
            delay(1000);
            attachInterrupt(digitalPinToInterrupt(buttonPin), buttonState, FALLING);
        }
    
    * L'interruption est utilis√©e ici pour lire l'√©tat du bouton. Lorsque le bouton est enfonc√©, ``buttonPin`` passe de bas √† haut.
    * La fonction `buttonState` est appel√©e lorsqu'une interruption est d√©clench√©e, et elle bascule la valeur de la variable `state`.
    * ``FALLING`` signifie que l'interruption se produit lorsque ``buttonPin`` passe de bas √† haut.

#. Pour d√©finir la valeur seuil de temp√©rature √©lev√©e, la fonction ``upperTemSetting()`` est appel√©e lorsque `state` vaut 1 (state bascule entre 0 et 1 avec l'appui du bouton) dans le programme principal, sinon ``monitoringTemp()`` est appel√©e pour afficher la temp√©rature actuelle et le seuil d√©fini.

    .. code-block:: arduino


        void loop()
        {
            if (state == 1)
            {
                upperTemSetting();
            }
            else {
                monitoringTemp();
            }
        }

#. √Ä propos de la fonction ``upperTemSetting()``.

    .. code-block:: arduino

        void upperTemSetting()
        {
            int setTem = 0;

            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Adjusting...");
            lcd.setCursor(0, 1);
            lcd.print("Upper Tem: ");

            while (1) {
                lcd.setCursor(11, 1);
                setTem = map(analogRead(potPin), 0, 1023, 0, 100);
                lcd.print(setTem);
                if (state == 0)
                {
                    EEPROM.write(0, setTem);
                    upperTem = setTem;
                    lcd.clear();
                    return;
                }
            }
        }

    * Vous pouvez d√©finir une valeur seuil avec cette fonction. Lors de son ex√©cution, le LCD1602 affiche la valeur seuil actuelle, qui peut √™tre modifi√©e √† l'aide du potentiom√®tre. Cette valeur est enregistr√©e dans l'EEPROM et la fonction quitte lorsqu'on appuie √† nouveau sur le bouton.

#. √Ä propos de la fonction ``monitoringTemp()``.

    .. code-block:: arduino

        void monitoringTemp()
        {
            long a = analogRead(temPin);
            float tempC = beta / (log((1025.0 * 10 / a - 10) / 10) + beta / 298.0) - 273.0;
            float tempF = 1.8 * tempC + 32.0;
            lcd.setCursor(0, 0);
            lcd.print("Temp: ");
            lcd.print(tempC);
            lcd.print(char(223));
            lcd.print("C   ");
            lcd.setCursor(0, 1);
            lcd.print("Upper: ");
            lcd.print(upperTem);
            lcd.print(char(223));
            lcd.print("C   ");
            delay(300);
            if (tempC >= upperTem)
            {
                digitalWrite(buzzerPin, HIGH);
                delay(50);
                digitalWrite(buzzerPin, LOW);
                delay(10);
            }
            else
            {
                digitalWrite(buzzerPin, LOW);
            }
        }

    * Cette fonction permet d'afficher la temp√©rature et de d√©finir une alarme.
    * La valeur de la thermistance est lue puis convertie en temp√©rature Celsius selon la formule, puis affich√©e sur le LCD1602.
    * Le seuil d√©fini est √©galement affich√© sur le LCD.
    * Si la temp√©rature actuelle d√©passe le seuil, le buzzer √©met une alarme.
