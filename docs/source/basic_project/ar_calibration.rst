.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_calibration:

5.14 Calibration
==========================

Lorsque vous utilisez des composants d'entr√©e analogiques, tels que des photo-r√©sistances ou des capteurs d'humidit√© du sol, vous pouvez constater que leur plage de lecture n'est pas de 0 √† 1023, mais plut√¥t une plage comme 0 √† 800 ou 600 √† 1000, car il est impossible d'atteindre les limites de ces dispositifs dans des conditions normales d'utilisation.

Dans ce cas, une technique de calibration des entr√©es du capteur peut √™tre utilis√©e. Pendant le d√©marrage, demandez √† la carte de contr√¥le de mesurer les lectures des capteurs pendant cinq secondes et d'enregistrer les lectures les plus hautes et les plus basses. Ces cinq secondes d√©finissent les valeurs minimales et maximales attendues des lectures effectu√©es pendant le cycle.

Dans ce projet, nous utilisons une photo-r√©sistance et un buzzer passif pour cr√©er un jeu ressemblant √† un `theremin <https://en.wikipedia.org/wiki/Theremine>`_, en utilisant la technique de calibration d√©crite ci-dessus.

.. note::
    Le `theremin <https://en.wikipedia.org/wiki/Theremine>`_ est un instrument de musique √©lectronique qui ne n√©cessite aucun contact physique. Il g√©n√®re des tons diff√©rents en d√©tectant la position des mains du joueur.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est tr√®s pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_photoresistor`
        - |link_photoresistor_buy|

**Sch√©ma**

.. image:: img/circuit_8.8_calibration.png

**C√¢blage**

.. image:: img/5.14_calibration_bb.png
    :width: 600
    :align: center

**Code**

.. note::

    * Ouvrez le fichier ``5.14.calibration.ino`` sous le chemin ``3in1-kit\learning_project\5.14.calibration``.
    * Ou copiez ce code dans **Arduino IDE**.
    
.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/9cbcaae0-3c9d-4e33-9957-548f92a9aab7/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Apr√®s avoir t√©l√©charg√© le code avec succ√®s, la LED s'allumera, et vous aurez cinq secondes pour calibrer la plage de d√©tection de la photo-r√©sistance. Cela est n√©cessaire car nous pouvons √™tre dans des environnements lumineux diff√©rents √† chaque utilisation (par exemple, l'intensit√© lumineuse varie entre le milieu de journ√©e et le cr√©puscule).

Pendant ce temps, d√©placez vos mains de haut en bas au-dessus de la photo-r√©sistance. La plage de mouvement de la main sera calibr√©e pour correspondre √† la plage de jeu de cet instrument.

Apr√®s cinq secondes, la LED s'√©teindra et vous pourrez agiter vos mains au-dessus de la photo-r√©sistance pour jouer.



**Comment √ßa fonctionne ?**

#. D√©finissez les valeurs initiales et les broches de tous les composants.

    .. code-block:: arduino

        const int buzzerPin = 9;
        const int ledPin = 8;
        const int photocellPin = A0;  // La photo-r√©sistance est connect√©e √† A2
    
        int lightLow = 1023;
        int lightHigh = 0;
    
        int sensorValue = 0;        // Valeur lue par le capteur
        int pitch = 0;           // Valeur convertie pour la fr√©quence sonore
    
        unsigned long previousMillis = 0;
        const long interval = 5000;

#. Configurez un processus de calibration dans la fonction ``setup()``.

    .. code-block:: arduino

        void setup()
        {
            pinMode(buzzerPin, OUTPUT); // Configurez la broche du buzzer en sortie
            pinMode(ledPin, OUTPUT); // Configurez la broche de la LED en sortie

            /* Calibrez les valeurs max et min de la photo-r√©sistance */
            previousMillis = millis();
            digitalWrite(ledPin, HIGH);
            while (millis() - previousMillis <= interval) {
                sensorValue = analogRead(photocellPin);
                if (sensorValue > lightHigh) {
                    lightHigh = sensorValue;
                }
                if (sensorValue < lightLow) {
                    lightLow = sensorValue;
                }
            }
            digitalWrite(ledPin, LOW);
        }

    Le flux de travail est le suivant :

    * Utilisez ``millis()`` pour chronom√©trer un intervalle de 5000 ms.

    .. code-block:: arduino

        previousMillis = millis();
        ...
        while (millis() - previousMillis <= interval) {
        ...
        }

    * Pendant ces cinq secondes, agitez une main autour de la photo-r√©sistance. Les valeurs maximales et minimales de la lumi√®re d√©tect√©e sont enregistr√©es et affect√©es √† ``lightHigh`` et ``lightLow``.

    .. code-block:: arduino
        
        sensorValue = analogRead(photocellPin);
        if (sensorValue > lightHigh) {
            lightHigh = sensorValue;
        }
        if (sensorValue < lightLow) {
            lightLow = sensorValue;
        }

#. Maintenant, vous pouvez commencer √† jouer avec ce th√©r√©mine. Lisez la valeur de la photo-r√©sistance dans ``sensorValue`` et mappez-la √† une plage plus grande pour l'utiliser comme fr√©quence du buzzer.

    .. code-block:: arduino

        void loop()
        {
        /* Jouez */
        sensorValue = analogRead(photocellPin); // Lisez la valeur sur A0
        pitch = map(sensorValue, lightLow, lightHigh, 50, 6000);  // Mappez √† la fr√©quence du buzzer
        if (pitch > 50) {
            tone(buzzerPin, pitch, 20);
        }
        delay(10);
        }
