.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_receiver:

5.11.2 R√©cepteur IR
=========================

Dans ce projet, vous apprendrez √† utiliser un r√©cepteur IR.

Un r√©cepteur infrarouge est un composant qui re√ßoit des signaux infrarouges et peut 
ind√©pendamment recevoir des rayons infrarouges et √©mettre des signaux compatibles 
avec le niveau TTL. Il est de taille similaire √† un transistor classique emball√© dans 
du plastique et convient √† tous types de t√©l√©commandes infrarouges et de transmissions infrarouges.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants :

C'est pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_receiver`
        - \-

**Sch√©ma**

.. image:: img/circuit_7.2_receiver.png

**C√¢blage**

Dans cet exemple, connectez la broche gauche du r√©cepteur IR √† la broche 11, 
la broche du milieu √† GND, et la broche droite √† 5V.

.. image:: img/5.11_ir_recv_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.11.ir_receiver.ino`` dans le r√©pertoire ``3in1-kit\learning_project\5.11.ir_receiver``.
    * Ou copiez ce code dans l'IDE Arduino.
    * La biblioth√®que ``IRremote`` est utilis√©e ici, vous pouvez l'installer via le **Library Manager**.
  
        .. image:: ../img/lib_irremote.png



.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/1141d808-cc26-4589-ae5c-d1834033ac3d/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    

Apr√®s avoir t√©l√©vers√© le code sur la carte R4, vous verrez que la valeur actuelle du 
bouton press√© de la t√©l√©commande IR s'affiche sur le moniteur s√©rie.

**Comment √ßa fonctionne ?**

Ce code est con√ßu pour fonctionner avec une t√©l√©commande infrarouge (IR) en utilisant la 
biblioth√®que ``IRremote``. Voici les √©tapes :

#. Inclure les biblioth√®ques : Cela inclut la biblioth√®que ``IRremote``, qui fournit des 
fonctions pour travailler avec des t√©l√©commandes IR.

    .. code-block:: arduino

        #include <IRremote.h>

#. D√©finir la broche Arduino √† laquelle est connect√©e la broche signal du capteur IR.

    .. code-block:: arduino

        const int IR_RECEIVE_PIN = 11;  // D√©finir le num√©ro de broche pour le capteur IR


#. Initialiser la communication s√©rie √† un d√©bit de 9600 bauds. Initialiser le r√©cepteur IR sur la broche sp√©cifi√©e (``IR_RECEIVE_PIN``) et activer le retour LED (si applicable).

    .. code-block:: arduino

        void setup() {
            Serial.begin(9600);                                     // D√©marrer la communication s√©rie √† 9600 bauds
            IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);  // D√©marrer le r√©cepteur IR
        }

#. La boucle s'ex√©cute continuellement pour traiter les signaux entrants de la t√©l√©commande IR.

    .. code-block:: arduino

        void loop() {
            if (IrReceiver.decode()) {
                String decodedValue = decodeKeyValue(IrReceiver.decodedIRData.command);
                if (decodedValue != "ERROR") {
                    Serial.println(decodedValue);
                    delay(100);
                }
                IrReceiver.resume();  // Activer la r√©ception du prochain signal
            }
        }
    
    * V√©rifie si un signal IR est re√ßu et correctement d√©cod√©.
    * D√©code la commande IR et la stocke dans ``decodedValue`` √† l'aide d'une fonction personnalis√©e ``decodeKeyValue()``.
    * V√©rifie si la valeur d√©cod√©e n'est pas une erreur.
    * Affiche la valeur IR d√©cod√©e sur le moniteur s√©rie.
    * Reprend la r√©ception des signaux IR pour le prochain signal.
