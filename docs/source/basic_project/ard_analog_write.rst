.. note::

    ¬°Hola, bienvenido a la Comunidad de Aficionados a Raspberry Pi, Arduino y ESP32 de SunFounder en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte de expertos**: Resuelve problemas posventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de fiestas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy!

.. _ar_analog_write:

2. Escritura Anal√≥gica
=========================

6 de los 14 pines digitales de Arduino tambi√©n tienen funci√≥n de salida PWM. Por lo tanto, adem√°s de escribir se√±ales digitales en estos 6 pines, tambi√©n puedes escribir se√±ales anal√≥gicas (se√±ales de onda PWM) en ellos. De esta manera, puedes hacer que los LED muestren diferentes brillos o hacer que el motor gire a diferentes velocidades.

La modulaci√≥n por ancho de pulso, o `PWM <https://docs.arduino.cc/learn/microcontrollers/analog-output>`_, es una t√©cnica para obtener resultados anal√≥gicos con medios digitales. Dado que puede ser dif√≠cil comprender el significado literal, aqu√≠ hay un ejemplo de control de la intensidad de un LED para ayudarte a entender mejor.

Una se√±al digital compuesta por niveles altos y bajos se llama pulso. El ancho del pulso de estos pines se puede ajustar cambiando la velocidad de ENCENDIDO/APAGADO.
En pocas palabras, cuando encendemos, apagamos y volvemos a encender el LED por un corto per√≠odo de tiempo (como 20ms, el tiempo de permanencia visual de la mayor√≠a de las personas),
No veremos que se haya apagado, pero el brillo de la luz ser√° ligeramente m√°s d√©bil. Durante este per√≠odo, cuanto m√°s tiempo est√© encendido el LED, m√°s brillante ser√°.
Es decir, dentro de un per√≠odo, cuanto m√°s ancho sea el pulso, mayor ser√° la "fuerza de la se√±al el√©ctrica" emitida por el microcontrolador.

Esta es la funci√≥n necesaria para escribir la onda PWM.

* ``analogWrite(pin, value)``

    Escribe un valor anal√≥gico (onda PWM) en un pin. Se pueden simular diferentes voltajes de salida (0-5V) generando una se√±al de pulso especificada. El pin mantendr√° esta se√±al hasta que sea llamado por una nueva declaraci√≥n de lectura o escritura.

   **Sintaxis**
      analogWrite(pin, value)

   **Par√°metros**
    * ``pin``: el pin de Arduino a escribir. Tipos de datos permitidos: int.
    * ``value``: el ciclo de trabajo: entre 0 (siempre apagado) y 255 (siempre encendido). Tipos de datos permitidos: int.


**Ejemplo de Escritura Anal√≥gica**

.. code-block:: arduino

   int pin = 9;      //connect  to pwm pin

   void setup() {
      pinMode(pin, OUTPUT);  // sets the pin as output
   }

   void loop() {
      for (int i = 0 ;i<255 ; i++){
         analogWrite(pin, i); //analogWrite values from 0 to 255
         delay(30);
      }
   }

**Notas y Advertencias**

* Observando de cerca la placa R3, los pines marcados con el s√≠mbolo "~" tienen funci√≥n de salida anal√≥gica.
* Las salidas PWM generadas en los pines 5 y 6 tendr√°n ciclos de trabajo m√°s altos de lo esperado. Esto se debe a interacciones con las funciones ``millis()`` y ``delay()``, que comparten el mismo temporizador interno utilizado para generar esas salidas PWM. Esto se notar√° principalmente en configuraciones de ciclo de trabajo bajos (por ejemplo, 0 - 10) y puede resultar en que un valor de 0 no apague completamente la salida en los pines 5 y 6.


**Componentes Relacionados**

A continuaci√≥n se presentan los componentes relacionados, puedes hacer clic para aprender a utilizarlos.

.. toctree::
   :maxdepth: 2

   ar_fading
   ar_colorful_light