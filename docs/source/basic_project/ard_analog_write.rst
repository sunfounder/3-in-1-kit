.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook‚ÄØ! Explorez en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions et concours festifs** : Participez √† des concours et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous‚ÄØ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui‚ÄØ!

.. _ar_analog_write:

2. √âcriture Analogique
=========================

6 des 14 broches num√©riques de l'Arduino disposent √©galement de la fonction de sortie PWM. Par cons√©quent, en plus d'√©crire des signaux num√©riques sur ces 6 broches, vous pouvez √©galement y √©crire des signaux analogiques (signaux d'onde PWM). De cette mani√®re, vous pouvez faire varier la luminosit√© des LED ou ajuster la vitesse de rotation d'un moteur.

La modulation de largeur d'impulsion, ou `PWM <https://docs.arduino.cc/learn/microcontrollers/analog-output>`_, est une technique permettant d'obtenir des r√©sultats analogiques par des moyens num√©riques. Comme cela peut √™tre difficile √† comprendre litt√©ralement, voici un exemple de contr√¥le de l'intensit√© d'une LED pour mieux saisir le concept.

Un signal num√©rique compos√© de niveaux hauts et bas est appel√© une impulsion. La largeur d'impulsion de ces broches peut √™tre ajust√©e en modifiant la vitesse ON/OFF. 
En termes simples, lorsque nous allumons, √©teignons et rallumons une LED pendant une courte p√©riode (par exemple 20ms, la dur√©e de persistance visuelle de la plupart des gens), nous ne percevons pas qu'elle s'√©teint, mais sa luminosit√© est l√©g√®rement r√©duite. Plus longtemps la LED est allum√©e pendant cette p√©riode, plus elle semble lumineuse. 
Autrement dit, sur une p√©riode donn√©e, plus l'impulsion est large, plus l'¬´ intensit√© du signal √©lectrique ¬ª √©mise par le microcontr√¥leur est grande.

Voici la fonction n√©cessaire pour √©crire une onde PWM :

* ``analogWrite(pin, value)``

    √âcrit une valeur analogique (onde PWM) sur une broche. Diff√©rentes tensions de sortie (0-5V) peuvent √™tre simul√©es en g√©n√©rant un signal d'impulsion sp√©cifi√©. La broche maintiendra ce signal jusqu'√† ce qu'elle soit appel√©e par une nouvelle instruction de lecture ou d'√©criture.

   **Syntaxe**
      analogWrite(pin, value)

   **Param√®tres**
    * ``pin`` : la broche Arduino √† √©crire. Types de donn√©es autoris√©s : int.
    * ``value`` : le rapport cyclique : entre 0 (toujours √©teint) et 255 (toujours allum√©). Types de donn√©es autoris√©s : int.


**Exemple d'√âcriture Analogique**

.. code-block:: arduino

   int pin = 9;      // connecter √† une broche pwm

   void setup() {
      pinMode(pin, OUTPUT);  // configure la broche comme sortie
   }

   void loop() {
      for (int i = 0 ;i<255 ; i++){
         analogWrite(pin, i); // valeurs analogWrite de 0 √† 255
         delay(30);
      }
   }

**Notes et Avertissements**

* En examinant attentivement la carte R4, les broches marqu√©es du symbole ¬´ ~ ¬ª disposent de la fonction de sortie analogique.
* Les sorties PWM g√©n√©r√©es sur les broches 5 et 6 auront des cycles de travail sup√©rieurs aux attentes. Cela est d√ª aux interactions avec les fonctions ``millis()`` et ``delay()``, qui partagent le m√™me minuteur interne utilis√© pour g√©n√©rer ces sorties PWM. Cela se remarque principalement sur des r√©glages de faible cycle de travail (par exemple 0 - 10) et peut entra√Æner un √©chec √† √©teindre compl√®tement la sortie sur les broches 5 et 6 lorsque la valeur est 0.


**Composants Associ√©s**

Vous trouverez ci-dessous les composants associ√©s. Cliquez pour apprendre √† les utiliser.

.. toctree::
   :maxdepth: 2

   ar_fading
   ar_colorful_light