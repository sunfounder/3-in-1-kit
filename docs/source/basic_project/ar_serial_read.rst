.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et √† des cadeaux festifs.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_serial_read:

5.12 Lecture S√©rie
======================

Vous avez peut-√™tre remarqu√©, en utilisant la fonction ``Serial.print()``, qu'il existe 
aussi une possibilit√© de lecture. √Ä quoi sert la bo√Æte de texte dans le Moniteur S√©rie ? 
Oui, vous avez devin√©, il existe des moyens de contr√¥ler les programmes et les circuits 
en entrant des informations dans cette bo√Æte de texte.

Dans ce projet, nous allons utiliser l'I2C LCD1602 pour afficher le texte saisi dans le 
Moniteur S√©rie afin de d√©couvrir l'utilisation de ``Serial.read()``.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants.

Il est vraiment pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_i2c_lcd1602`
        - |link_i2clcd1602_buy|

**Sch√©ma**

.. image:: img/circuit_7.1_lcd1602.png

**C√¢blage**

.. image:: img/5.11_lcd_bb.png
    :width: 800
    :align: center

**Code**

.. note::

    * Ouvrez le fichier ``5.12.serial_read.ino`` dans le chemin ``3in1-kit\learning_project\5.12.serial_read``.
    * Ou copiez ce code dans **Arduino IDE**.
    * La biblioth√®que ``LiquidCrystal I2C`` est utilis√©e ici, vous pouvez l'installer depuis le **Gestionnaire de biblioth√®ques**.

        .. image:: ../img/lib_liquidcrystal_i2c.png

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/a6197c53-6969-402e-8930-84a9165397b9/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Une fois le code t√©l√©vers√© avec succ√®s, vous pouvez saisir du texte dans la bo√Æte de texte du Moniteur S√©rie, et l'√©cran LCD affichera les informations.

**Comment cela fonctionne-t-il ?**

    .. code-block:: arduino

        void loop()
        {
        // quand des caract√®res arrivent sur le port s√©rie...
            if (Serial.available()) {
                // attendre un peu pour que le message complet arrive
                delay(100);
                // effacer l'√©cran
                lcd.clear();
                // lire tous les caract√®res disponibles
                while (Serial.available() > 0) {
                    // afficher chaque caract√®re sur le LCD
                    lcd.write(Serial.read());
                }
            }
        }

* ``Serial.available()`` permet de conna√Ætre le nombre de caract√®res disponibles dans le flux entrant lorsque vous tapez quelque chose dans la bo√Æte de texte. √âtant donn√© qu'il existe deux terminateurs dans l'entr√©e, vous avez en fait 3 caract√®res lorsque vous tapez ``A``, et 4 caract√®res lorsque vous tapez ``AB``.
* ``Serial.read()`` lit le premier caract√®re du flux entrant. Par exemple, si vous tapez ``AB``, appeler ``Serial.read()`` une seule fois r√©cup√©rera le caract√®re ``A`` ; la deuxi√®me fois, vous obtiendrez ``B`` ; et les troisi√®me et quatri√®me appels r√©cup√©reront deux caract√®res de fin. Appeler cette fonction lorsque le flux entrant ne contient aucun caract√®re disponible entra√Ænera une erreur.

Pour r√©sumer, il est courant de combiner les deux fonctions ci-dessus, en utilisant une boucle ``while`` pour lire tous les caract√®res saisis √† chaque fois.

    .. code-block:: arduino

        while (Serial.available() > 0) {
            Serial.print(Serial.read());
        }

D'ailleurs, si vous n'utilisez pas ``Serial.read()`` pour lire les caract√®res du flux entrant, 
les caract√®res du flux entrant seront empil√©s ensemble. Par exemple, si vous tapez ``A`` suivi de ``AB``, le flux entrant accumulera 7 caract√®res.
