.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces et aper√ßus de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_74hc_7seg:

5.15 EEPROM
==============

`EEPROM <https://docs.arduino.cc/learn/built-in-libraries/eeprom>`_ est une m√©moire non volatile, ce qui signifie que les donn√©es qu'elle stocke ne sont pas effac√©es lorsque la carte de contr√¥le principale est √©teinte. Vous pouvez l'utiliser pour enregistrer des donn√©es et les lire lors de la prochaine mise sous tension.

Par exemple, vous pouvez cr√©er un compteur de sport qui suit le nombre de sauts √† la corde effectu√©s chaque jour.

Vous pouvez √©galement √©crire des donn√©es dans un programme et les lire dans un autre. Par exemple, lorsque vous travaillez sur un projet de voiture, les vitesses des deux moteurs peuvent √™tre incoh√©rentes. Vous pouvez √©crire un programme de calibration pour enregistrer la valeur de compensation de la vitesse des moteurs.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est tr√®s pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_potentiometer`
        - |link_potentiometer_buy|

**Sch√©ma**

.. image:: img/circuit_515_eeprom.png

**C√¢blage**

.. image:: img/5.15_eeprom_bb.png

**Code**


.. note::

    * Ouvrez le fichier ``5.15.eeproom.ino`` sous le chemin ``3in1-kit\learning_project\5.15.eeproom``.
    * Ou copiez ce code dans **Arduino IDE**.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/7378341f-9c1a-4171-814f-c76c109e1e67/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Pour utiliser ce circuit, appuyez simplement sur le bouton pour commencer l'enregistrement et saisissez les informations souhait√©es via un potentiom√®tre. Ensuite, la carte r√©p√©tera vos actions en boucle (et fera clignoter une LED √† chaque it√©ration) jusqu'√† ce que vous appuyiez √† nouveau sur le bouton pour enregistrer de nouvelles actions. Vous pouvez √©galement modifier le temps d'enregistrement en ajustant les valeurs de ``resolution`` et ``recordTime``.


**Comment √ßa fonctionne ?**

#. Importez la biblioth√®que ``EEPROM.h`` et initialisez la m√©moire EEPROM. 

    .. code-block:: arduino

        ...
        #include <EEPROM.h>//utilis√©e pour stocker les valeurs enregistr√©es

        ...
        float resolution = 1000;//DOIT √™tre inf√©rieur √† EEPROM.length()
        float recordTime = 5; //temps de d√©lai
        bool recording = false;
        ...
    
    Notez que ``DOIT √™tre inf√©rieur √† EEPROM.length()``. Dans ``setup()``, la m√©moire de l'EEPROM de votre carte sera imprim√©e, qui devrait √™tre de 1024 pour votre carte. Si vous utilisez une carte diff√©rente, vous pouvez modifier la valeur de la variable ``resolution``.

#. Imprimez la m√©moire EEPROM de votre carte.

    .. code-block:: arduino

        void setup() {
            ...
            Serial.begin(9600);
            //Serial.println(EEPROM.length());
        }

    Pour conna√Ætre la taille de la m√©moire EEPROM de votre carte, d√©commentez la ligne ``Serial.println(EEPROM.read(i))``. La taille de l'EEPROM sera imprim√©e dans le moniteur s√©rie, et vous pourrez ajuster la valeur de ``resolution`` en cons√©quence.

#. Lorsqu'une pression sur le bouton est d√©tect√©e, l'enregistrement commence et les informations requises sont saisies via un potentiom√®tre. La carte r√©p√®te ensuite vos actions en boucle (et fait clignoter une LED pour chaque r√©p√©tition) jusqu'√† ce que vous appuyiez √† nouveau sur le bouton pour enregistrer une nouvelle action.

    .. code-block:: arduino

        void loop() {
            if (recording == true) {//enregistrer
                for (int i = 1; i <= resolution; i++) {
                    digitalWrite(ledPin, HIGH); //allumer la LED de statut
                    int val = map(analogRead(A0), 0, 1023, 0, 180);
                    EEPROM.write(i, val);
                    //Serial.println(EEPROM.read(i));
                    myServo.write(val);
                    delay(recordTime);
                }
                digitalWrite(ledPin, LOW); //√©teindre la LED de statut
                delay(1000);//donner du temps √† la personne
                recording = false;
            }
            else {
                for (int i = 1; i <= resolution; i++) {//relecture
                    if (digitalRead(buttonPin) == 0) {//arr√™ter la relecture et enregistrer de nouvelles valeurs
                        recording = true;
                        break;
                    }
                    int readval = EEPROM.read(i);
                    myServo.write(readval);
                    //Serial.println(readval);
                    delay(recordTime);
                }
                digitalWrite(ledPin, HIGH); //montrer une nouvelle r√©p√©tition
                delay(100);
                digitalWrite(ledPin, LOW);
            }
        }

    * Passez la variable ``recording`` √† ``true`` lorsque le bouton est press√©.
    * Lorsque la variable ``recording`` est ``true``, commencez √† enregistrer l'action dans la plage de m√©moire.
    * Lisez la valeur du potentiom√®tre et mappez-la de 0-180 pour la stocker dans l'EEPROM et contr√¥ler la rotation du servo.
    * La LED s'allume au d√©but de l'enregistrement et s'√©teint √† la fin.
    * R√©p√©tez l'action enregistr√©e avec un clignotement rapide de la LED pour signaler une nouvelle r√©p√©tition.


#. √Ä propos de la biblioth√®que ``EEPROM`` 

    Voici quelques-unes de ses fonctions :
        
    * ``write(address,value)`` : √âcrit un octet dans l'EEPROM.

        * ``address`` : l'emplacement o√π √©crire, √† partir de 0 (int)
        * ``value`` : la valeur √† √©crire, de 0 √† 255 (byte)
        * Une √©criture dans l'EEPROM prend 3,3 ms pour s'achever. La m√©moire EEPROM a une dur√©e de vie sp√©cifi√©e de 100 000 cycles d'√©criture/effacement, donc il est conseill√© de limiter la fr√©quence des √©critures.

    * ``Read(address)`` : Lit un octet depuis l'EEPROM. Les emplacements qui n'ont jamais √©t√© √©crits contiennent la valeur 255.

    * ``update(address,value)`` : √âcrit un octet dans l'EEPROM uniquement si la valeur diff√®re de celle d√©j√† enregistr√©e √† la m√™me adresse.

        * Une √©criture dans l'EEPROM prend 3,3 ms pour s'achever. La m√©moire EEPROM a une dur√©e de vie sp√©cifi√©e de 100 000 cycles d'√©criture/effacement, donc utiliser cette fonction au lieu de write() peut √©conomiser des cycles si les donn√©es √©crites ne changent pas souvent.

    * ``EEPROM.put(address, data)`` : √âcrit tout type de donn√©es ou d'objet dans l'EEPROM.

        * ``address`` : l'emplacement o√π √©crire, √† partir de 0 (int).
        * ``data`` : les donn√©es √† √©crire, pouvant √™tre un type primitif (par exemple : float) ou une structure personnalis√©e.
        * Cette fonction utilise ``EEPROM.update()`` pour effectuer l'√©criture, ce qui √©vite de r√©√©crire la valeur si elle n'a pas chang√©.

    * ``EEPROM.get(address, data)`` : Lit tout type de donn√©es ou d'objet depuis l'EEPROM.

        * ``address`` : l'emplacement o√π lire, √† partir de 0 (int).
        * ``data`` : les donn√©es √† lire, pouvant √™tre un type primitif (par exemple : float) ou une structure personnalis√©e.
