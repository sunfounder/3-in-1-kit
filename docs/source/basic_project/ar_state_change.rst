.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et √† des cadeaux festifs.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_state_change:

5.3 D√©tection de changement d'√©tat
=======================================

Lorsque le bouton contr√¥le d'autres dispositifs, il peut non seulement fonctionner 
lorsqu'il est press√©, mais aussi s'arr√™ter lorsqu'il est rel√¢ch√©. Il est √©galement 
possible de changer l'√©tat de fonctionnement √† chaque pression sur le bouton.

Pour obtenir cet effet, il faut savoir comment basculer l'√©tat de fonctionnement entre 
√©teint et allum√© √† chaque pression sur le bouton, ce qu'on appelle la "d√©tection de changement d'√©tat".

Dans ce projet, nous allons utiliser un bouton pour contr√¥ler un moteur.

.. **Schematic**

.. .. image:: img/circuit_8.3_statechange.png

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants.

Il est vraiment pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_tt_motor`
        - \-
    *   - :ref:`cpn_l9110`
        - \-

**Sch√©ma**

.. image:: img/circuit_8.3_statechange.png

**C√¢blage**

.. image:: img/5.3_state_change_bb.png
    :width: 800
    :align: center

**Code**

.. note::

    * Ouvrez le fichier ``5.3.state_change_detection.ino`` dans le chemin ``3in1-kit\learning_project\5.3.state_change_detection``.
    * Ou copiez ce code dans **Arduino IDE**.
    
    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/67a62a3d-46d3-4f5f-889c-364cbdf9b66f/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Apr√®s avoir t√©l√©vers√© le code, vous pouvez appuyer sur le bouton pour d√©marrer le moteur ; une nouvelle pression sur le bouton arr√™tera le moteur.


**Comment √ßa marche ?**

#. Cr√©ez des variables et d√©finissez les broches pour le moteur et le bouton.

    .. code-block:: arduino

        ...
        int detectionState = 0;   
        int buttonState = 0;         
        int lastButtonState = 0;    

    * ``detectionState`` est un indicateur dont la valeur change √† chaque pression sur le bouton, par exemple, 0 cette fois, 1 la suivante, et ainsi de suite en alternance.
    * ``buttonState`` et ``lastButtonState`` sont utilis√©s pour enregistrer l'√©tat actuel et pr√©c√©dent du bouton afin de comparer s'il a √©t√© press√© ou rel√¢ch√©.

#. Initialisez chaque broche et d√©finissez le d√©bit en bauds du moniteur s√©rie.

    .. code-block:: arduino

        void setup() {
            pinMode(buttonPin, INPUT);
            Serial.begin(9600);
            pinMode(A_1A,OUTPUT);
            pinMode(A_1B,OUTPUT);
        }

#. Lisez l'√©tat du bouton, et si le bouton est press√©, la variable ``detectionState`` alternera entre 0 et 1. Lorsque ``detectionState`` est 1, le moteur se met en marche.

    .. code-block:: arduino

        void loop() {
            // Alterne l'√©tat de d√©tection √† chaque pression sur le bouton
            buttonState = digitalRead(buttonPin);
            if (buttonState != lastButtonState) {
                if (buttonState == HIGH) {
                detectionState=(detectionState+1)%2;
                Serial.print("The detection state is: ");
                Serial.println(detectionState);
                } 
                delay(50);
            }
            lastButtonState = buttonState;
            
            // Selon l'√©tat de d√©tection, d√©marre ou arr√™te le moteur
            if(detectionState==1){
                digitalWrite(A_1A,HIGH);
                digitalWrite(A_1B,LOW);
            }else{
                digitalWrite(A_1A,LOW);
                digitalWrite(A_1B,LOW);
            }
        }

    Le fonctionnement global est comme suit.

    * Lisez la valeur du bouton.

    .. code-block:: arduino

        buttonState = digitalRead(buttonPin);

    * Si ``buttonState`` et ``lastButtonState`` ne sont pas √©gaux, cela signifie que l'√©tat du bouton a chang√©. Mettez √† jour ``lastButtonState`` et utilisez ``delay(50)`` pour √©viter les rebonds.

    .. code-block:: arduino

        if (buttonState != lastButtonState) {
        ...
            delay(50);
        }
        lastButtonState = buttonState;

    * Lorsque le bouton est press√©, sa valeur est HIGH. Dans ce cas, alternez la valeur de ``detectionState`` entre 0 et 1.

    .. code-block:: arduino

        if (buttonState == HIGH) {
            detectionState=(detectionState+1)%2;
            Serial.print("The detection state is: ");
            Serial.println(detectionState);
            }

    * Si ``detectionState`` est 1, faites tourner le moteur, sinon arr√™tez-le.

    .. code-block:: arduino

        if(detectionState==1){
            digitalWrite(A_1A,HIGH);
            digitalWrite(A_1B,LOW);
        }else{
            digitalWrite(A_1A,LOW);
            digitalWrite(A_1B,LOW);
        }

