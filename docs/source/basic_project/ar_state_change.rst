.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _ar_state_change:

5.3 D√©tection de Changement d'√âtat
=====================================

Lorsque le bouton contr√¥le d'autres dispositifs, il peut non seulement fonctionner lorsqu'il est press√©, mais aussi s'arr√™ter lorsqu'il est rel√¢ch√©.
Il est √©galement possible de basculer l'√©tat de fonctionnement √† chaque fois que le bouton est press√©.

Pour r√©aliser cet effet, vous devez savoir comment basculer l'√©tat de fonctionnement entre √©teint et allum√© lorsque le bouton est press√©,
C'est la "d√©tection de changement d'√©tat".

Dans ce projet, nous utiliserons le bouton pour contr√¥ler le moteur.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DE CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_tt_motor`
        - \-
    *   - :ref:`cpn_l9110`
        - \-

**Sch√©ma**

.. image:: img/circuit_8.3_statechange.png

**C√¢blage**

.. image:: img/5.3_state_change_l9110_bb.png
    :width: 800
    :align: center

**Code**

.. note::

    * Ouvrez le fichier ``5.3.state_change_detection.ino`` sous le chemin ``3in1-kit\basic_project\5.3.state_change_detection``.
    * Ou copiez ce code dans **Arduino IDE**.
    
    * Ou t√©l√©chargez le code via l'`Arduino Web Editor <https://docs.arduino.cc/cloud/web-editor/tutorials/getting-started/getting-started-web-editor>`_.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/67a62a3d-46d3-4f5f-889c-364cbdf9b66f/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Apr√®s le t√©l√©chargement r√©ussi du code, vous appuyez sur le bouton et le moteur tourne ; jusqu'√† ce que vous appuyiez √† nouveau sur le bouton, le moteur s'arr√™te.


**Comment √ßa fonctionne ?**

#. Cr√©ez des variables et d√©finissez les broches pour le moteur et le bouton.

    .. code-block:: arduino

        ...
        int detectionState = 0;   
        int buttonState = 0;         
        int lastButtonState = 0;    

    * ``detectionState`` est un indicateur dont la valeur change √† chaque fois que le bouton est press√©, par exemple, 0 cette fois, 1 la prochaine, et ainsi de suite alternativement.
    * ``buttonState`` et ``lastButtonState`` sont utilis√©s pour enregistrer l'√©tat du bouton cette fois et la derni√®re fois, pour comparer si le bouton a √©t√© press√© ou rel√¢ch√©.

#. Initialisez chaque broche et r√©glez le taux de baud du moniteur s√©rie.

    .. code-block:: arduino

        void setup() {
            pinMode(buttonPin, INPUT);
            Serial.begin(9600);
            pinMode(B_1A, OUTPUT);
            pinMode(B_1B, OUTPUT);
        }


#. Commencez par lire l'√©tat du bouton, et si le bouton est press√©, la variable ``detectionState`` changera sa valeur de 0 √† 1 ou de 1 √† 0. Lorsque ``detectionState`` est √† 1, le moteur sera activ√©. Cela a pour effet que lorsque le bouton est press√© cette fois-ci, le moteur tourne, la prochaine fois que le bouton est press√©, le moteur s'arr√™te, et ainsi de suite alternativement.

    .. code-block:: arduino

        void loop() {
            // Toggle the detectionState each time the button is pressed
            buttonState = digitalRead(buttonPin);
            if (buttonState != lastButtonState) {
                if (buttonState == HIGH) {
                detectionState=(detectionState+1)%2;
                Serial.print("The detection state is: ");
                Serial.println(detectionState);
                } 
                delay(50);
            }
            lastButtonState = buttonState;
            
            // According to the detectionState, start the motor
            if(detectionState==1){
                digitalWrite(B_1A,HIGH);
                digitalWrite(B_1B,LOW);
            }else{
                digitalWrite(B_1A,LOW);
                digitalWrite(B_1B,LOW);
            }
        }

    Le flux de travail complet est le suivant.

    * Lire la valeur du bouton.

    .. code-block:: arduino

        buttonState = digitalRead(buttonPin);

    * Si ``buttonState`` et ``lastButtonState`` ne sont pas √©gaux, cela signifie que l'√©tat du bouton a chang√©, continuez avec le jugement suivant, et stockez l'√©tat du bouton √† ce moment dans la variable ``lastButtonState``. ``delay(50)`` est utilis√© pour √©liminer le jitter.
    
    .. code-block:: arduino

        if (buttonState != lastButtonState) {
        ...
            delay(50);
        }
        lastButtonState = buttonState;

    * Lorsque le bouton est press√©, sa valeur est HIGH. Ici, lorsque le bouton est press√©, la valeur de la variable ``detectionState`` est modifi√©e, par exemple, de 0 √† 1 apr√®s une op√©ration.

    .. code-block:: arduino

        if (buttonState == HIGH) {
            detectionState=(detectionState+1)%2;
            Serial.print("The detection state is: ");
            Serial.println(detectionState);
        }

    * Lorsque la variable ``detectionState`` est √† 1, faire tourner le moteur, sinon l'arr√™ter.

    .. code-block:: arduino

        if(detectionState==1){
            digitalWrite(B_1A,HIGH);
            digitalWrite(B_1B,LOW);
        }else{
            digitalWrite(B_1A,LOW);
            digitalWrite(B_1B,LOW);
        }

