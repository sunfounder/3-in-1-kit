.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_state_change:

5.3 Zustands√§nderungserkennung
=================================

Wenn der Knopf andere Ger√§te steuert, kann er nicht nur arbeiten, wenn er gedr√ºckt wird, sondern auch stoppen, wenn er losgelassen wird.
Es ist auch m√∂glich, den Arbeitszustand jedes Mal umzuschalten, wenn der Knopf gedr√ºckt wird.

Um diesen Effekt zu erzielen, m√ºssen Sie wissen, wie Sie den Arbeitszustand zwischen Aus und Ein umschalten k√∂nnen, wenn der Knopf gedr√ºckt wird.
Das nennt man "Zustands√§nderungserkennung".

In diesem Projekt werden wir den Knopf verwenden, um den Motor zu steuern.

.. **Schaltplan**

.. .. image:: img/circuit_8.3_statechange.png

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_tt_motor`
        - \-
    *   - :ref:`cpn_l9110`
        - \-

**Schaltplan**

.. image:: img/circuit_8.3_statechange.png

**Verdrahtung**

.. image:: img/5.3_state_change_bb.png
    :width: 800
    :align: center

**Code**

.. note::

    * √ñffnen Sie die Datei ``5.3.state_change_detection.ino`` im Pfad ``3in1-kit\learning_project\5.3.state_change_detection``.
    * Oder kopieren Sie diesen Code in die **Arduino IDE**.
    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/67a62a3d-46d3-4f5f-889c-364cbdf9b66f/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Nachdem der Code erfolgreich hochgeladen wurde, dr√ºcken Sie den Knopf und der Motor wird sich drehen; bis Sie den Knopf erneut dr√ºcken, wird der Motor stoppen.



**Wie funktioniert das?**

#. Erstellen Sie Variablen und definieren Sie Pins f√ºr den Motor und den Knopf.

    .. code-block:: arduino

        ...
        int detectionState = 0;   
        int buttonState = 0;         
        int lastButtonState = 0;    

    * ``detectionState`` ist eine Flagge, deren Wert sich jedes Mal √§ndert, wenn der Knopf gedr√ºckt wird, z.B. 0 dieses Mal, 1 das n√§chste Mal und so weiter abwechselnd.
    * ``buttonState`` und ``lastButtonState`` werden verwendet, um den Zustand des Knopfes dieses Mal und das letzte Mal aufzuzeichnen, um zu vergleichen, ob der Knopf gedr√ºckt oder losgelassen wurde.

#. Initialisieren Sie jeden Pin und setzen Sie die Baudrate des seriellen Monitors.

    .. code-block:: arduino

        void setup() {
            pinMode(buttonPin, INPUT);
            Serial.begin(9600);
            pinMode(A_1A,OUTPUT);
            pinMode(A_1B,OUTPUT);
        }

#. Zuerst lesen Sie den Zustand des Knopfes, und wenn der Knopf gedr√ºckt ist, wird die Variable ``detectionState`` ihren Wert von 0 auf 1 oder von 1 auf 0 umschalten. Wenn ``detectionState`` 1 ist, wird der Motor eingeschaltet. Es hat die Wirkung, dass dieses Mal, wenn der Knopf gedr√ºckt wird, der Motor sich dreht, das n√§chste Mal, wenn der Knopf gedr√ºckt wird, der Motor stoppt und so weiter abwechselnd.

    .. code-block:: arduino

        void loop() {
        // Toggle the detectionState each time the button is pressed
            buttonState = digitalRead(buttonPin);
            if (buttonState != lastButtonState) {
                if (buttonState == HIGH) {
                detectionState=(detectionState+1)%2;
                Serial.print("The detection state is: ");
                Serial.println(detectionState);
                } 
                delay(50);
            }
            lastButtonState = buttonState;
            
            // According to the detectionState, start the motor
            if(detectionState==1){
                digitalWrite(A_1A,HIGH);
                digitalWrite(A_1B,LOW);
            }else{
                digitalWrite(A_1A,LOW);
                digitalWrite(A_1B,LOW);
            }
        }

    Der gesamte Arbeitsablauf ist wie folgt.

    * Lesen Sie den Knopfwert.

    .. code-block:: arduino

        buttonState = digitalRead(buttonPin);

    * Wenn ``buttonState`` und ``lastButtonState`` nicht gleich sind, bedeutet dies, dass sich der Knopfzustand ge√§ndert hat. Fahren Sie mit der n√§chsten Beurteilung fort und speichern Sie den Knopfzustand zu diesem Zeitpunkt in die Variable ``lastButtonState``. ``delay(50)`` wird verwendet, um das Prellen zu eliminieren.
    
    .. code-block:: arduino

        if (buttonState != lastButtonState) {
        ...
            delay(50);
        }
        lastButtonState = buttonState;

    * Wenn der Knopf gedr√ºckt wird, ist sein Wert HIGH. Hier, wenn der Knopf gedr√ºckt wird, wird der Wert der Variable ``detectionState`` ge√§ndert, z.B. von 0 auf 1 nach einer Operation.

    .. code-block:: arduino

        if (buttonState == HIGH) {
            detectionState=(detectionState+1)%2;
            Serial.print("The detection state is: ");
            Serial.println(detectionState);
            }

    * Wenn die Variable ``detectionState`` 1 ist, lassen Sie den Motor drehen, sonst stoppen Sie ihn.

    .. code-block:: arduino

        if(detectionState==1){
            digitalWrite(A_1A,HIGH);
            digitalWrite(A_1B,LOW);
        }else{
            digitalWrite(A_1A,LOW);
            digitalWrite(A_1B,LOW);
        }

