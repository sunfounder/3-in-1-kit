.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _ar_reversing_aid:

6.4 Aide au Stationnement
=========================

Avec le d√©veloppement de la science et de la technologie, de nombreux produits de haute technologie ont √©t√© install√©s dans les voitures, parmi lesquels le syst√®me d'aide au stationnement en marche arri√®re est l'un d'eux. Ici, nous utilisons un module ultrasonique, un LCD, des LED et un buzzer pour r√©aliser un syst√®me simple d'aide au stationnement ultrasonique.

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DE CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_i2c_lcd1602`
        - |link_i2clcd1602_buy|
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|

**Sch√©ma**

.. image:: img/image265.png
    :width: 800
    :align: center

**C√¢blage**

.. image:: img/backcar.png
    :width: 800
    :align: center

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``6.4_reversingAid.ino`` sous le chemin de ``3in1-kit\basic_project\6.4_reversingAid`` directement.
    * Ou copiez ce code dans Arduino IDE .
    * La biblioth√®que ``LiquidCrystal I2C`` est utilis√©e ici, vous pouvez l'installer depuis le **Library Manager**.

        .. image:: ../img/lib_liquidcrystal_i2c.png

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/d6848669-fe79-42e9-afd7-0f083f96a6d6/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s le t√©l√©chargement r√©ussi du code, la distance d√©tect√©e actuelle sera affich√©e sur le LCD. Ensuite, le buzzer changera la fr√©quence de son en fonction des diff√©rentes distances.

.. note::
    Si le code et le c√¢blage sont corrects, mais que le LCD n'affiche toujours pas de contenu, vous pouvez tourner le potentiom√®tre √† l'arri√®re.

**Comment √ßa fonctionne ?**

Ce code nous aide √† cr√©er un dispositif simple de mesure de distance capable de mesurer la distance entre des objets et de fournir un retour via un affichage LCD et un buzzer.

La fonction ``loop()`` contient la logique principale du programme et s'ex√©cute en continu. Examinons de plus pr√®s la fonction ``loop()``.

#. Boucle pour lire la distance et mettre √† jour les param√®tres

    Dans le ``loop``, le code lit d'abord la distance mesur√©e par le module ultrasonique et met √† jour le param√®tre d'intervalle en fonction de la distance.

    .. code-block:: arduino

        // Update the distance
        distance = readDistance();

        // Update intervals based on distance
        if (distance <= 10) {
            intervals = 300;
        } else if (distance <= 20) {
            intervals = 500;
        } else if (distance <= 50) {
            intervals = 1000;
        } else {
            intervals = 2000;
        }

#. V√©rifier s'il est temps de biper

    Le code calcule la diff√©rence entre l'heure actuelle et l'heure du bip pr√©c√©dent, et si la diff√©rence est sup√©rieure ou √©gale au temps d'intervalle, il d√©clenche le buzzer et met √† jour l'heure du bip pr√©c√©dent.

    .. code-block:: arduino

        unsigned long currentMillis = millis();
        if (currentMillis - previousMillis >= intervals) {
            Serial.println("Beeping!");
            beep();
            previousMillis = currentMillis;
        }

#. Mettre √† jour l'affichage LCD

    Le code efface l'affichage LCD puis affiche "Dis:" et la distance actuelle en centim√®tres sur la premi√®re ligne.

    .. code-block:: arduino

        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Dis: ");
        lcd.print(distance);
        lcd.print(" cm");

        delay(100);