.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des promotions et √† des cadeaux festifs.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_reversing_aid:

6.4 Assistance au Recul
==========================

Avec le d√©veloppement des sciences et des technologies, de nombreux produits de 
haute technologie ont √©t√© int√©gr√©s aux voitures, parmi lesquels le syst√®me 
d'assistance au recul. Ici, nous utilisons un module ultrason, un √©cran LCD, 
une LED et un buzzer pour cr√©er un simple syst√®me d'assistance au recul par ultrasons.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants :

C'est pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_i2c_lcd1602`
        - |link_i2clcd1602_buy|
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|

**Sch√©ma**

.. image:: img/image265.png
    :width: 800
    :align: center

**C√¢blage**

.. image:: img/6.4_reversing_aid_bb.png
    :width: 800
    :align: center

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``6.4_reversingAid.ino`` dans le r√©pertoire ``3in1-kit\learning_project\6.4_reversingAid`` directement.
    * Ou copiez ce code dans l'IDE Arduino.
    * La biblioth√®que ``LiquidCrystal I2C`` est utilis√©e ici, vous pouvez l'installer depuis le **Library Manager**.

        .. image:: ../img/lib_liquidcrystal_i2c.png

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/d6848669-fe79-42e9-afd7-0f083f96a6d6/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s le t√©l√©versement r√©ussi du code, la distance actuelle d√©tect√©e sera affich√©e sur l'√©cran LCD. Ensuite, le buzzer ajustera sa fr√©quence sonore en fonction des diff√©rentes distances.

.. note::
    Si le code et le c√¢blage sont corrects mais que le LCD n'affiche toujours pas de contenu, vous pouvez ajuster le potentiom√®tre √† l'arri√®re.


**Comment √ßa fonctionne ?**

Ce code nous permet de cr√©er un dispositif simple de mesure de distance qui mesure la distance entre des objets et fournit un retour via un √©cran LCD et un buzzer.

La fonction ``loop()`` contient la logique principale du programme et fonctionne en continu. Voici un aper√ßu d√©taill√© de la fonction ``loop()``.

#. Boucle pour lire la distance et mettre √† jour les param√®tres

    Dans la boucle ``loop``, le code commence par lire la distance mesur√©e par le module ultrason et met √† jour le param√®tre d'intervalle en fonction de la distance.

    .. code-block:: arduino

        // Mise √† jour de la distance
        distance = readDistance();

        // Mise √† jour des intervalles en fonction de la distance
        if (distance <= 10) {
            intervals = 300;
        } else if (distance <= 20) {
            intervals = 500;
        } else if (distance <= 50) {
            intervals = 1000;
        } else {
            intervals = 2000;
        }

#. V√©rifier s'il est temps de faire retentir le buzzer

    Le code calcule la diff√©rence entre le temps actuel et le temps pr√©c√©dent du bip. Si la diff√©rence est sup√©rieure ou √©gale au temps d'intervalle, il d√©clenche le buzzer et met √† jour le temps pr√©c√©dent.

    .. code-block:: arduino

        unsigned long currentMillis = millis();
        if (currentMillis - previousMillis >= intervals) {
            Serial.println("Beeping!");
            beep();
            previousMillis = currentMillis;
        }

#. Mise √† jour de l'affichage LCD

    Le code efface l'√©cran LCD puis affiche "Dis:" et la distance actuelle en centim√®tres sur la premi√®re ligne.

    .. code-block:: arduino

        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Dis: ");
        lcd.print(distance);
        lcd.print(" cm");

        delay(100);
