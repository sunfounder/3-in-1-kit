.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_interval:

5.4 Intervall
===============

Manchmal m√ºssen Sie zwei Dinge gleichzeitig tun. Zum Beispiel m√∂chten Sie vielleicht
eine LED blinken lassen, w√§hrend Sie einen Tastendruck lesen. In diesem Fall k√∂nnen Sie
nicht ``delay()`` verwenden, weil Arduino Ihr Programm w√§hrend des ``delay()`` pausiert. Wenn
der Knopf gedr√ºckt wird, w√§hrend Arduino pausiert und auf das Ende von ``delay()`` wartet, wird Ihr Programm den Tastendruck verpassen.

Ein passendes Beispiel w√§re, eine Pizza in Ihrer Mikrowelle aufzuw√§rmen und gleichzeitig
auf eine wichtige E-Mail zu warten. Sie legen die Pizza in die Mikrowelle und stellen
sie auf 10 Minuten ein. Das √Ñquivalent zur Verwendung von ``delay()`` w√§re, vor der Mikrowelle zu sitzen und dem Timer zuzusehen, wie er von 10 Minuten auf Null herunterz√§hlt. Wenn die wichtige E-Mail in dieser Zeit ankommt, werden Sie sie verpassen.

Was Sie im wirklichen Leben tun w√ºrden, w√§re, die Pizza einzuschalten und dann
Ihre E-Mails zu √ºberpr√ºfen und vielleicht etwas anderes zu tun (was nicht allzu lange dauert!) und ab und zu w√ºrden Sie zur Mikrowelle zur√ºckkehren, um zu sehen, 
ob der Timer Null erreicht hat und somit Ihre Pizza fertig ist.

Diese Skizze zeigt, wie man einen Buzzer ohne die Verwendung von ``delay()`` t√∂nen kann. 
Sie schaltet den Buzzer ein und notiert dann die Zeit. Danach √ºberpr√ºft sie bei jedem Durchlauf von ``loop()``, ob das gew√ºnschte Intervall abgelaufen ist.
Ist dies der Fall, wird der Buzzer get√∂nt und die neue Zeit notiert.
Auf diese Weise t√∂nt der Buzzer kontinuierlich, w√§hrend die Sketch-Ausf√ºhrung nie
bei einer einzigen Anweisung ins Stocken ger√§t.

Basierend auf dieser Bedingung k√∂nnen wir den Code des Knopfes hinzuf√ºgen, um die LED zu steuern,
sie wird nicht durch den Buzzer, der Musik spielt, gest√∂rt.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENBESCHREIBUNG
        - KAUF-LINK

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|

**Schaltplan**

.. image:: img/circuit_8.5_interval.png



**Verdrahtung**

.. image:: img/5.4_interval_bb.png
    :width: 600
    :align: center

.. note::

    * √ñffnen Sie die Datei ``5.4.interval.ino`` im Verzeichnis ``3in1-kit\learning_project\5.4.interval``.
    * Oder kopieren Sie diesen Code in die **Arduino IDE**.
    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/0d430b04-ef2d-4e32-8d76-671a3a917cb1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Nach erfolgreichem Hochladen des Codes wird der Summer Musik spielen; immer wenn Sie den Knopf dr√ºcken, leuchtet die LED auf. Die Arbeit von LED und Summer beeinflusst sich nicht gegenseitig.

**Wie funktioniert das?**


Initialisieren Sie eine Variable namens ``previousMillis``, um die vorherige Betriebszeit des Mikrocontrollers zu speichern.

.. code-block:: arduino

    unsigned long previousMillis = 0;     

Markieren Sie, welche Note gespielt wird.

.. code-block:: arduino

    int thisNote=0; 

Die Intervallzeit jeder Note.

.. code-block:: arduino

    long interval = 1000; 

In ``loop()`` deklarieren Sie ``currentMillis``, um die aktuelle Zeit zu speichern.

.. code-block:: arduino

    unsigned long currentMillis = millis();

Wenn das Intervall zwischen der aktuellen Betriebszeit und der letzten Aktualisierungszeit gr√∂√üer als 1000ms ist, werden bestimmte Funktionen ausgel√∂st. Gleichzeitig wird previousMillis auf die aktuelle Zeit aktualisiert, um das n√§chste Ausl√∂sen, das 1 Sekunde sp√§ter stattfinden soll, vorzubereiten.

.. code-block:: arduino

    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;// save the last time of the last tone
        //...
    }

Spielen Sie die Noten in der Melodie nacheinander ab.

.. code-block:: arduino

    tone(buzzerPin,melody[thisNote],100);
    interval=1000/noteDurations[thisNote]; // interval at which to tone
    thisNote=(thisNote+1)%(sizeof(melody)/2); //iterate over the notes of the melody

Der Knopf steuert die LED.

.. code-block:: arduino

  // play button & led 
  digitalWrite(ledPin,digitalRead(buttonPin));
