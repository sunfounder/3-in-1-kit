.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _ar_interval:

5.4 Intervalle
================

Parfois, vous avez besoin de faire deux choses en m√™me temps. Par exemple, vous pourriez vouloir faire clignoter une LED tout en lisant un appui sur un bouton. Dans ce cas, vous ne pouvez pas utiliser ``delay()``, car Arduino met votre programme en pause pendant le ``delay()``. Si le bouton est press√© pendant qu'Arduino est en pause en attendant que le ``delay()`` se termine, votre programme manquera l'appui sur le bouton.

Une analogie serait de r√©chauffer une pizza dans votre micro-ondes tout en attendant un email important. Vous mettez la pizza dans le micro-ondes et r√©glez le temps sur 10 minutes. L'analogie √† l'utilisation de ``delay()`` serait de s'asseoir devant le micro-ondes en regardant le minuteur d√©compter de 10 minutes jusqu'√† ce que le minuteur atteigne z√©ro. Si l'email important arrive pendant ce temps, vous le manquerez.

Ce que vous feriez dans la vraie vie serait de mettre en marche la pizza, puis de v√©rifier vos emails, puis peut-√™tre de faire quelque chose d'autre (qui ne prend pas trop de temps !) et de temps en temps, vous reviendriez au micro-ondes pour voir si le minuteur a atteint z√©ro, indiquant que votre pizza est pr√™te.

Ce sketch d√©montre comment faire sonner un buzzer sans utiliser ``delay()``. 
Il active le buzzer puis prend note de l'heure. Ensuite, √† chaque passage dans ``loop()``, il v√©rifie si le temps d'intervalle souhait√© s'est √©coul√©.
Si c'est le cas, il fait sonner le buzzer et prend note du nouveau temps.
De cette mani√®re, le buzzer sonne continuellement tandis que l'ex√©cution du sketch ne s'attarde jamais sur une seule instruction.

Sur la base de cette condition, nous pouvons ajouter le code du bouton pour contr√¥ler la LED, 
il ne sera pas perturb√© par le buzzer jouant de la musique.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DE CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|


**Sch√©ma**

.. image:: img/circuit_8.5_interval.png

**C√¢blage**

.. image:: img/interval_bb.jpg
    :width: 600
    :align: center

**Code**

.. note::

    * Ouvrez le fichier ``5.4.interval.ino`` sous le chemin ``3in1-kit\basic_project\5.4.interval``.
    * Ou copiez ce code dans **Arduino IDE**.
    
    * Ou t√©l√©chargez le code via l'`Arduino Web Editor <https://docs.arduino.cc/cloud/web-editor/tutorials/getting-started/getting-started-web-editor>`_.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/0d430b04-ef2d-4e32-8d76-671a3a917cb1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Apr√®s le t√©l√©chargement r√©ussi du code, le buzzer jouera de la musique ; chaque fois que vous appuyez sur le bouton, la LED s'allumera. Le travail de la LED et du buzzer ne se g√™ne pas l'un l'autre.

**Comment √ßa fonctionne ?**


Initialisez une variable nomm√©e ``previousMillis`` pour stocker le temps de fonctionnement pr√©c√©dent du microcontr√¥leur.

.. code-block:: arduino

    unsigned long previousMillis = 0;     

Marquez quelle note est jou√©e.

.. code-block:: arduino

    int thisNote=0; 

Le temps d'intervalle de chaque note.

.. code-block:: arduino

    long interval = 1000; 

Dans ``loop()``, d√©clarez ``currentMillis`` pour stocker le temps actuel.

.. code-block:: arduino

    unsigned long currentMillis = millis();

Lorsque l'intervalle entre le temps de fonctionnement actuel et le dernier temps de mise √† jour est sup√©rieur √† 1000ms, certaines fonctions sont d√©clench√©es. En m√™me temps, mettez √† jour le previousMillis au temps actuel pour le prochain d√©clenchement qui doit se produire 1 seconde plus tard.

.. code-block:: arduino

    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;// save the last time of the last tone
        //...
    }

Jouez les notes de la m√©lodie une par une.

.. code-block:: arduino

    tone(buzzerPin,melody[thisNote],100);
    interval=1000/noteDurations[thisNote]; // interval at which to tone
    thisNote=(thisNote+1)%(sizeof(melody)/2); //iterate over the notes of the melody

Le bouton contr√¥le la LED.

.. code-block:: arduino

  // play button & led 
  digitalWrite(ledPin,digitalRead(buttonPin));
