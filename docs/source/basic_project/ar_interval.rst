.. note::

    ¬°Hola, bienvenido a la Comunidad de Aficionados a Raspberry Pi, Arduino y ESP32 de SunFounder en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte de expertos**: Resuelve problemas posventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de fiestas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy!

.. _ar_interval:

5.4 Intervalo
================

A veces necesitas hacer dos cosas a la vez. Por ejemplo, podr√≠as querer hacer parpadear un LED mientras lees una pulsaci√≥n de bot√≥n. En este caso, no puedes usar ``delay()``, porque Arduino pausa tu programa durante el ``delay()``. Si se presiona el bot√≥n mientras Arduino est√° en pausa esperando a que pase el ``delay()``, tu programa se perder√° la pulsaci√≥n del bot√≥n.

Una analog√≠a ser√≠a calentar una pizza en tu microondas y tambi√©n esperar un correo electr√≥nico importante. Pones la pizza en el microondas y lo programas por 10 minutos. La analog√≠a de usar ``delay()`` ser√≠a sentarte frente al microondas viendo el temporizador contar desde 10 minutos hasta que el temporizador llegue a cero. Si el correo electr√≥nico importante llega durante este tiempo, te lo perder√°s.

Lo que har√≠as en la vida real ser√≠a encender la pizza, luego revisar tu correo electr√≥nico, y luego quiz√°s hacer algo m√°s (¬°que no tome mucho tiempo!) y de vez en cuando volver al microondas para ver si el temporizador ha llegado a cero, indicando que tu pizza est√° lista.

Este sketch demuestra c√≥mo hacer sonar un zumbador sin usar ``delay()``. 
Enciende el zumbador y luego toma nota del tiempo. Luego, cada vez que pasa por ``loop()``, verifica si ha pasado el tiempo de intervalo deseado.
Si ha pasado, hace sonar el zumbador y toma nota del nuevo tiempo.
De esta manera, el zumbador suena continuamente mientras la ejecuci√≥n del sketch nunca se retrasa en una sola instrucci√≥n.

Bas√°ndonos en esta condici√≥n, podemos agregar el c√≥digo del bot√≥n para controlar el LED, 
no ser√° perturbado por el zumbador tocando m√∫sica.

**Componentes Necesarios**

En este proyecto, necesitamos los siguientes componentes.

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|


**Esquem√°tico**

.. image:: img/circuit_8.5_interval.png


**Cableado**

.. image:: img/interval_bb.jpg
    :width: 600
    :align: center

**C√≥digo**

.. note::

    * Abre el archivo ``5.4.interval.ino`` en la ruta ``3in1-kit\basic_project\5.4.interval``.
    * O copia este c√≥digo en **Arduino IDE**.
    
    * O carga el c√≥digo a trav√©s del `Editor Web de Arduino <https://docs.arduino.cc/cloud/web-editor/tutorials/getting-started/getting-started-web-editor>`_.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/0d430b04-ef2d-4e32-8d76-671a3a917cb1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Despu√©s de cargar el c√≥digo con √©xito, el zumbador tocar√° m√∫sica; cada vez que presiones el bot√≥n, el LED se encender√°. El trabajo del LED y el zumbador no se interfiere entre s√≠.

**¬øC√≥mo funciona?**

Inicializar una variable llamada ``previousMillis`` para almacenar el tiempo de operaci√≥n anterior del microcontrolador.

.. code-block:: arduino

    unsigned long previousMillis = 0;     

Marcar qu√© nota se est√° tocando.

.. code-block:: arduino

    int thisNote=0; 

El tiempo de intervalo de cada nota.

.. code-block:: arduino

    long interval = 1000; 

En ``loop()``, declara ``currentMillis`` para almacenar el tiempo actual.

.. code-block:: arduino

    unsigned long currentMillis = millis();

Cuando el intervalo entre el tiempo de operaci√≥n actual y el √∫ltimo tiempo de actualizaci√≥n es mayor que 1000ms, se activan ciertas funciones. Mientras tanto, actualiza el previousMillis al tiempo actual para la pr√≥xima activaci√≥n que ocurrir√° 1 segundo despu√©s.  

.. code-block:: arduino

    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;// save the last time of the last tone
        //...
    }

Tocar las notas de la melod√≠a una por una.

.. code-block:: arduino

    tone(buzzerPin,melody[thisNote],100);
    interval=1000/noteDurations[thisNote]; // interval at which to tone
    thisNote=(thisNote+1)%(sizeof(melody)/2); //iterate over the notes of the melody

El bot√≥n controla el LED.

.. code-block:: arduino

  // play button & led 
  digitalWrite(ledPin,digitalRead(buttonPin));