.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_interval:

5.4 Intervalle
================

Parfois, vous avez besoin d'effectuer deux t√¢ches simultan√©ment. Par exemple, vous 
pourriez vouloir faire clignoter une LED tout en surveillant l'appui d'un bouton. 
Dans ce cas, vous ne pouvez pas utiliser ``delay()``, car Arduino suspend votre 
programme pendant l'ex√©cution de la fonction ``delay()``. Si le bouton est press√© 
pendant cette pause, votre programme manquera cet √©v√©nement.

Une analogie serait de chauffer une pizza au micro-ondes tout en attendant un email 
important. Utiliser ``delay()`` serait comme rester devant le micro-ondes √† regarder 
le compte √† rebours des 10 minutes. Si l'email arrive pendant ce temps, vous le manquerez. 
En revanche, dans la vie r√©elle, vous allumeriez le micro-ondes et iriez v√©rifier vos 
emails de temps en temps, tout en revenant p√©riodiquement voir si la pizza est pr√™te.

Ce sketch montre comment jouer des notes avec un buzzer sans utiliser ``delay()``. 
Il allume le buzzer, note l'heure, puis, √† chaque it√©ration de la boucle, v√©rifie si 
l'intervalle de temps souhait√© est √©coul√©. Si c'est le cas, il joue une note et enregistre 
le nouvel instant. Ainsi, le buzzer joue de fa√ßon continue sans interrompre l'ex√©cution du 
programme.

Sur cette base, nous pouvons ajouter le code d'un bouton pour contr√¥ler une LED, sans que 
cela n'interf√®re avec la musique jou√©e par le buzzer.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants :

C'est pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|

**Sch√©ma**

.. image:: img/circuit_8.5_interval.png

**C√¢blage**

.. image:: img/5.4_interval_bb.png
    :width: 600
    :align: center

.. note::

    * Ouvrez le fichier ``5.4.interval.ino`` dans le r√©pertoire ``3in1-kit\learning_project\5.4.interval``.
    * Ou copiez ce code dans l'IDE Arduino.
    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/0d430b04-ef2d-4e32-8d76-671a3a917cb1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Apr√®s avoir t√©l√©charg√© le code avec succ√®s, le buzzer jouera une m√©lodie. Chaque fois que vous appuierez sur le bouton, la LED s'allumera. Le fonctionnement de la LED et du buzzer ne se perturbe pas mutuellement.

**Comment √ßa fonctionne ?**

Initialisez une variable nomm√©e ``previousMillis`` pour stocker le temps d'op√©ration pr√©c√©dent du microcontr√¥leur.

.. code-block:: arduino

    unsigned long previousMillis = 0;     

Indiquez quelle note est jou√©e.

.. code-block:: arduino

    int thisNote = 0; 

D√©finissez l'intervalle de temps pour chaque note.

.. code-block:: arduino

    long interval = 1000; 

Dans ``loop()``, d√©clarez ``currentMillis`` pour stocker le temps actuel.

.. code-block:: arduino

    unsigned long currentMillis = millis();

Lorsque l'intervalle entre le temps actuel et le dernier temps enregistr√© d√©passe 1000 ms, certaines fonctions sont d√©clench√©es. Mettez ensuite √† jour ``previousMillis`` avec le temps actuel pour pr√©parer le prochain d√©clenchement dans une seconde.

.. code-block:: arduino

    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis; // sauvegarder le dernier temps
        //...
    }

Jouez les notes de la m√©lodie une par une.

.. code-block:: arduino

    tone(buzzerPin,melody[thisNote],100);
    interval=1000/noteDurations[thisNote]; // d√©finir l'intervalle
    thisNote=(thisNote+1)%(sizeof(melody)/2); // parcourir les notes

Le bouton contr√¥le la LED.

.. code-block:: arduino

    // bouton & LED
    digitalWrite(ledPin,digitalRead(buttonPin));