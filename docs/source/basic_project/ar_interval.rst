.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_interval:

5.4 Intervall
================

Manchmal m√ºssen Sie zwei Dinge gleichzeitig tun. Zum Beispiel m√∂chten Sie
vielleicht eine LED blinken lassen, w√§hrend Sie einen Tastendruck lesen. In diesem Fall k√∂nnen Sie 
nicht ``delay()`` verwenden, weil Arduino Ihr Programm w√§hrend des ``delay()`` anh√§lt. Wenn
die Taste gedr√ºckt wird, w√§hrend Arduino auf das Ende des ``delay()`` wartet, wird Ihr Programm den Tastendruck √ºbersehen.

Ein Vergleich w√§re, eine Pizza in Ihrer Mikrowelle aufzuw√§rmen und gleichzeitig 
auf eine wichtige E-Mail zu warten. Sie legen die Pizza in die Mikrowelle und stellen 
sie auf 10 Minuten. Das Analogon zur Verwendung von ``delay()`` w√§re, vor der Mikrowelle zu sitzen und den Timer von 10 Minuten herunterz√§hlen zu sehen, bis 
der Timer null erreicht. Wenn die wichtige E-Mail in dieser Zeit ankommt, 
werden Sie sie verpassen.

Was Sie im wirklichen Leben tun w√ºrden, w√§re die Pizza einzuschalten, dann 
Ihre E-Mails zu √ºberpr√ºfen und dann vielleicht etwas anderes zu tun (das nicht 
zu lange dauert!) und von Zeit zu Zeit w√ºrden Sie zur Mikrowelle zur√ºckkommen, um 
zu sehen, ob der Timer null erreicht hat, was bedeutet, dass Ihre Pizza fertig ist.

Dieses Sketch zeigt, wie man einen Summer ohne Verwendung von ``delay()`` t√∂nt. 
Es schaltet den Summer ein und notiert dann die Zeit. Dann √ºberpr√ºft es bei jedem Durchlauf durch ``loop()``, ob das gew√ºnschte Intervall vergangen ist.
Wenn dies der Fall ist, t√∂nt es den Summer und notiert die neue Zeit.
Auf diese Weise t√∂nt der Summer kontinuierlich, w√§hrend die Sketch-Ausf√ºhrung nie 
an einer einzigen Anweisung h√§ngen bleibt.

Aufgrund dieses Zustands k√∂nnen wir den Code der Taste hinzuf√ºgen, um die LED zu steuern, 
sie wird nicht durch den Summer, der Musik spielt, gest√∂rt.

**Erforderliche Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|



**Schaltplan**

.. image:: img/circuit_8.5_interval.png


**Verdrahtung**

.. image:: img/interval_bb.jpg
    :width: 600
    :align: center

**Code**

.. note::

    * √ñffnen Sie die Datei ``5.4.interval.ino`` unter dem Pfad ``3in1-kit\basic_project\5.4.interval``.
    * Oder kopieren Sie diesen Code in die **Arduino IDE**.
    
    * Oder laden Sie den Code √ºber den `Arduino Web Editor <https://docs.arduino.cc/cloud/web-editor/tutorials/getting-started/getting-started-web-editor>`_ hoch.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/0d430b04-ef2d-4e32-8d76-671a3a917cb1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Nachdem der Code erfolgreich hochgeladen wurde, wird der Summer Musik abspielen; jedes Mal, wenn Sie den Knopf dr√ºcken, leuchtet die LED auf. Die Funktion von LED und Summer st√∂rt sich nicht gegenseitig.

**Wie funktioniert es?**

Initialisieren Sie eine Variable namens ``previousMillis``, um die vorherige Betriebszeit des Mikrocontrollers zu speichern.

.. code-block:: arduino

    unsigned long previousMillis = 0;     

Markieren Sie, welche Note gespielt wird.

.. code-block:: arduino

    int thisNote=0; 

Das Intervall jeder Note.

.. code-block:: arduino

    long interval = 1000; 

In ``loop()``, deklarieren Sie ``currentMillis``, um die aktuelle Zeit zu speichern.

.. code-block:: arduino

    unsigned long currentMillis = millis();

Wenn das Intervall zwischen der aktuellen Betriebszeit und der letzten Aktualisierungszeit gr√∂√üer als 1000ms ist, werden bestimmte Funktionen ausgel√∂st. Aktualisieren Sie gleichzeitig die previousMillis auf die aktuelle Zeit f√ºr das n√§chste Ausl√∂sen, das 1 Sekunde sp√§ter erfolgen soll.  

.. code-block:: arduino

    if (currentMillis - previousMillis >= interval) {
        previousMillis = currentMillis;// speichern Sie die letzte Zeit des letzten Tons
        //...
    }

Spielen Sie die Noten der Melodie nacheinander ab.

.. code-block:: arduino

    tone(buzzerPin,melody[thisNote],100);
    interval=1000/noteDurations[thisNote]; // Intervall zum T√∂nen
    thisNote=(thisNote+1)%(sizeof(melody)/2); // Iterieren √ºber die Noten der Melodie

Der Knopf steuert die LED.

.. code-block:: arduino

  // Knopf & LED steuern 
  digitalWrite(ledPin,digitalRead(buttonPin));
