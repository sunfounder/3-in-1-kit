.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _speed_calibration:

11. Calibration de la vitesse
================================

Lorsqu'il s'agit de faire avancer la voiture, vous pourriez constater qu'elle ne se d√©place pas en ligne droite. 
Cela est d√ª au fait que les deux moteurs n'ont peut-√™tre pas la m√™me vitesse en usine. 
Cependant, nous pouvons ajuster un d√©calage sur les deux moteurs pour aligner leurs vitesses de rotation.

Dans ce projet, nous allons apprendre √† stocker le d√©calage dans l'`EEPROM <https://docs.arduino.cc/learn/built-in-libraries/eeprom>`_. 
Cela permet qu'apr√®s chaque calibration, tous les projets puissent acc√©der directement √† cette valeur de d√©calage dans l'EEPROM, pour 
que la voiture puisse avancer en ligne droite sans difficult√©.


**C√¢blage**

Ce projet utilise le m√™me c√¢blage que celui du :ref:`car_move_code`.

**Comment jouer ?**

1. Ouvrez le fichier ``11.speed_calibration.ino`` dans le chemin ``3in1-kit\car_project\11.speed_calibration``. Ou copiez ce code dans **Arduino IDE**.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/66dc7ee5-31a5-418e-9aa2-43e7820cf5e6/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


2. Une fois le code t√©l√©charg√© avec succ√®s, connectez la voiture √† une batterie 9V, posez-la sur le sol et laissez-la avancer pour voir de quel c√¥t√© elle d√©vie.

* Si la voiture se d√©place vers l'avant gauche, cela signifie que la vitesse du moteur droit est trop rapide et doit √™tre r√©duite.

    .. code-block:: arduino

        EEPROM.write(1, 100) // 1 correspond au moteur droit, 100 signifie 100% de vitesse, cela peut √™tre r√©gl√© √† 90, 95, etc., en fonction de la situation r√©elle.

* Si la voiture se d√©place vers la droite, cela signifie que la vitesse du moteur gauche est trop rapide et doit √™tre r√©duite.

    .. code-block:: arduino

        EEPROM.write(0, 100) // 0 correspond au moteur gauche, 100 signifie 100% de vitesse, cela peut √™tre r√©gl√© √† 90, 95, etc., en fonction de la situation r√©elle.

3. Apr√®s avoir modifi√© le code, t√©l√©chargez-le √† nouveau sur la carte R4 pour v√©rifier l'effet. R√©p√©tez les √©tapes ci-dessus jusqu'√† ce que la voiture avance presque en ligne droite.

4. Ce d√©calage sera enregistr√© dans l'`EEPROM <https://docs.arduino.cc/learn/built-in-libraries/eeprom>`_. Vous n'aurez qu'√† lire ce d√©calage lorsque vous l'utiliserez dans d'autres projets, comme dans :ref:`car_ir_obstacle`.

.. code-block:: arduino
    :emphasize-lines: 1,3,4,27,28,50,51

    #include <EEPROM.h>

    float leftOffset = 1.0;
    float rightOffset = 1.0;

    const int A_1B = 5;
    const int A_1A = 6;
    const int B_1B = 9;
    const int B_1A = 10;

    const int rightIR = 7;
    const int leftIR = 8;

    void setup() {
        Serial.begin(9600);

        // Moteurs
        pinMode(A_1B, OUTPUT);
        pinMode(A_1A, OUTPUT);
        pinMode(B_1B, OUTPUT);
        pinMode(B_1A, OUTPUT);

        // Obstacle IR
        pinMode(leftIR, INPUT);
        pinMode(rightIR, INPUT);

        leftOffset = EEPROM.read(0) * 0.01; // Lit le d√©calage du moteur gauche
        rightOffset = EEPROM.read(1) * 0.01; // Lit le d√©calage du moteur droit
    }

    void loop() {

        int left = digitalRead(leftIR);   // 0 : Obstru√©, 1 : Libre
        int right = digitalRead(rightIR);
        int speed = 150;

        if (!left && right) {
            backLeft(speed);
        } else if (left && !right) {
            backRight(speed);
        } else if (!left && !right) {
            moveBackward(speed);
        } else {
            moveForward(speed);
        }
    }

    void moveForward(int speed) {
        analogWrite(A_1B, 0);
        analogWrite(A_1A, int(speed * leftOffset));
        analogWrite(B_1B, int(speed * rightOffset));
        analogWrite(B_1A, 0);
    }

    void moveBackward(int speed) {
        analogWrite(A_1B, speed);
        analogWrite(A_1A, 0);
        analogWrite(B_1B, 0);
        analogWrite(B_1A, speed);
    }

    void backLeft(int speed) {
        analogWrite(A_1B, speed);
        analogWrite(A_1A, 0);
        analogWrite(B_1B, 0);
        analogWrite(B_1A, 0);
    }

    void backRight(int speed) {
        analogWrite(A_1B, 0);
        analogWrite(A_1A, 0);
        analogWrite(B_1B, 0);
        analogWrite(B_1A, speed);
    }

