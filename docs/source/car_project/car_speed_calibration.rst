.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _speed_calibration:

11. Calibration de la Vitesse
=================================

Lors de la mise en mouvement de la voiture, vous pourriez constater que la voiture ne se d√©place pas en ligne droite.
Cela est d√ª au fait que les deux moteurs peuvent ne pas avoir la m√™me vitesse en sortie d'usine. 
Mais nous pouvons √©crire un d√©calage aux deux moteurs pour faire converger leurs vitesses de rotation.

Dans ce projet, 
nous apprendrons √† stocker le d√©calage dans `EEPROM <https://docs.arduino.cc/learn/built-in-libraries/eeprom>`_. L'int√©r√™t est que, apr√®s chaque calibration, 
tous les projets peuvent obtenir directement la valeur de d√©calage depuis l'EEPROM, 
afin que la voiture puisse avancer en ligne droite de mani√®re fluide.


**C√¢blage**

Ce projet a le m√™me c√¢blage que :ref:`car_move_code`.



**Comment jouer ?**

1. Ouvrez le fichier ``11.speed_calibration.ino`` situ√© dans le dossier ``3in1-kit\car_project\11.speed_calibration``. Ou copiez ce code dans **Arduino IDE**.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/66dc7ee5-31a5-418e-9aa2-43e7820cf5e6/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


2. Apr√®s le t√©l√©chargement r√©ussi du code, connectez la voiture avec une batterie 9V, posez-la sur le sol et laissez-la avancer pour voir de quel c√¥t√© elle se d√©cale.

* Si la voiture se d√©place vers l'avant gauche, cela signifie que la vitesse du moteur droit est trop rapide et doit √™tre r√©duite.

    .. code-block:: arduino

        EEPROM.write(1, 100) // 1 means the right motor, 100 means 100% speed, can be set to 90, 95, etc., depending on the actual situation.

* Si la voiture se d√©place vers la droite, cela signifie que la vitesse du moteur gauche est trop rapide et doit √™tre r√©duite.

    .. code-block:: arduino

        EEPROM.write(0, 100) // 0 means the right motor, 100 means the speed is 100%, can be set to 90, 95, etc., depending on the actual situation. 3.

3. Apr√®s avoir modifi√© le code, t√©l√©chargez le code sur la carte R3 pour voir l'effet. R√©p√©tez les √©tapes ci-dessus jusqu'√† ce que la voiture soit presque droite.

4. Ce d√©calage sera enregistr√© dans `EEPROM <https://docs.arduino.cc/learn/built-in-libraries/eeprom>`_, vous n'avez besoin de lire ce d√©calage que lorsque vous l'utilisez dans d'autres projets, prenez :ref:`car_ir_obstacle` comme exemple.


.. code-block:: arduino
    :emphasize-lines: 1,3,4,27,28,50,51

    #include <EEPROM.h>

    float leftOffset = 1.0;
    float rightOffset = 1.0;

    const int A_1B = 5;
    const int A_1A = 6;
    const int B_1B = 9;
    const int B_1A = 10;

    const int rightIR = 7;
    const int leftIR = 8;

    void setup() {
        Serial.begin(9600);

        //motor
        pinMode(A_1B, OUTPUT);
        pinMode(A_1A, OUTPUT);
        pinMode(B_1B, OUTPUT);
        pinMode(B_1A, OUTPUT);

        //IR obstacle
        pinMode(leftIR, INPUT);
        pinMode(rightIR, INPUT);

        leftOffset = EEPROM.read(0) * 0.01;//read the offset of the left motor
        rightOffset = EEPROM.read(1) * 0.01;//read the offset of the right motor
    }

    void loop() {

        int left = digitalRead(leftIR);   // 0: Obstructed  1: Empty
        int right = digitalRead(rightIR);
        int speed = 150;

        if (!left && right) {
            backLeft(speed);
        } else if (left && !right) {
            backRight(speed);
        } else if (!left && !right) {
            moveBackward(speed);
        } else {
            moveForward(speed);
        }
    }

    void moveForward(int speed) {
        analogWrite(A_1B, 0);
        analogWrite(A_1A, int(speed * leftOffset));
        analogWrite(B_1B, int(speed * rightOffset));
        analogWrite(B_1A, 0);
    }

    void moveBackward(int speed) {
        analogWrite(A_1B, speed);
        analogWrite(A_1A, 0);
        analogWrite(B_1B, 0);
        analogWrite(B_1A, speed);
    }

    void backLeft(int speed) {
        analogWrite(A_1B, speed);
        analogWrite(A_1A, 0);
        analogWrite(B_1B, 0);
        analogWrite(B_1A, 0);
    }

    void backRight(int speed) {
        analogWrite(A_1B, 0);
        analogWrite(A_1A, 0);
        analogWrite(B_1B, 0);
        analogWrite(B_1A, speed);
    }

