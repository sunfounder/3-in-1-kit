.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _follow_the_line:

4. Suivez la ligne
======================

La voiture est √©quip√©e d'un module de suivi de ligne, qui peut √™tre utilis√© pour suivre une ligne noire.

Lorsque le module de suivi de ligne d√©tecte la ligne noire, le moteur droit tourne tandis que le moteur gauche reste immobile, ce qui fait avancer la voiture l√©g√®rement vers la gauche. 
Au fur et √† mesure que la voiture avance, le module de ligne sera d√©plac√© hors de la ligne, puis le moteur gauche tournera tandis que le moteur droit restera immobile, permettant √† la voiture de revenir sur la ligne. 
En r√©p√©tant ces √©tapes, la voiture peut avancer le long de la ligne noire.

Avant de commencer le projet, vous devez cr√©er une carte courbe avec du ruban adh√©sif noir. La largeur de la ligne recommand√©e est comprise entre 0,8 et 1,5 cm, et l'angle du virage ne doit pas √™tre inf√©rieur √† 90 degr√©s.

**Composants Requis**

Dans ce projet, nous avons besoin des composants suivants :

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage 3 en 1
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DU COMPOSANT
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_l9110`
        - \-
    *   - :ref:`cpn_tt_motor`
        - \-
    *   - :ref:`cpn_track`
        - |link_track_buy|

**C√¢blage**


Il s'agit d'un module de suivi de ligne num√©rique, lorsqu'une ligne noire est d√©tect√©e, il √©met une valeur de 1 ; lorsqu'une ligne blanche est d√©tect√©e, il √©met une valeur de 0. De plus, vous pouvez ajuster sa distance de d√©tection via le potentiom√®tre sur le module.

Construisez le circuit selon le sch√©ma suivant.

.. list-table:: 
    :header-rows: 1

    * - Line Tracking Module
      - R4 Board
    * - S
      - 2
    * - V+
      - 5V
    * - G
      - GND

.. image:: img/car_4.png
    :width: 800

**Ajustez le Module**

Avant de commencer le projet, vous devez ajuster la sensibilit√© du module.

C√¢blez selon le sch√©ma ci-dessus, puis alimentez la carte R4 (soit directement avec le c√¢ble USB, soit avec le c√¢ble de batterie 9V), sans t√©l√©verser le code.

Collez un ruban √©lectrique noir sur la table et placez la voiture dessus.

Observez la LED de signal sur le module pour vous assurer qu'elle s'allume sur la table blanche et s'√©teint sur le ruban noir.

Sinon, vous devez ajuster le potentiom√®tre sur le module pour obtenir cet effet.

.. image:: img/line_track_cali.JPG

**Code**

.. note::

    * Ouvrez le fichier ``4.follow_the_line.ino`` sous le chemin ``3in1-kit\car_project\4.follow_the_line``.
    * Ou copiez ce code dans **Arduino IDE**.
    
    * Ou t√©l√©versez le code via l'`√âditeur Web Arduino <https://docs.arduino.cc/cloud/web-editor/tutorials/getting-started/getting-started-web-editor>`_.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/2779e9eb-b7b0-4d47-b8c0-78fed39828c3/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Une fois le code t√©l√©vers√© sur la carte R4, alignez le module de suivi de ligne sous la voiture avec la ligne noire, et vous verrez la voiture suivre la ligne.

**Comment √ßa marche ?**

Dans ce code, les deux moteurs effectuent de petites rotations gauche-droite selon la valeur du module de suivi de ligne, permettant √† la voiture de suivre la ligne noire.

#. Ajoutez la d√©finition des broches pour le module de suivi de ligne, ici il est d√©fini comme ``INPUT``. Initialisez √©galement le moniteur s√©rie et d√©finissez le d√©bit en bauds √† 9600 bps.

    .. code-block:: arduino

        ...
        const int lineTrack = 2;
        Serial.begin(9600);
        void setup() {
            ...
            pinMode(lineTrack, INPUT);
        }

#. Lisez la valeur du module de suivi de ligne, si elle est √©gale √† 1, faites avancer la voiture vers la gauche ; sinon, avancez vers la droite. Vous pouvez √©galement ouvrir le moniteur s√©rie en cliquant sur l'ic√¥ne de loupe dans le coin sup√©rieur droit pour voir la variation de la valeur du module de suivi de ligne sur les lignes noire et blanche avant de d√©brancher le c√¢ble USB.

    .. code-block:: arduino
    
        void loop() {

            int speed = 150;

            int lineColor = digitalRead(lineTrack); // 0: blanc    1: noir
            Serial.println(lineColor); 
            if (lineColor) {
                moveLeft(speed);
            } else {
                moveRight(speed);
            }
        }

#. √Ä propos des fonctions ``moveLeft()`` et ``moveRight()``.

    Contrairement √† la fonction de virage gauche-droite dans le projet :ref:`car_move_code`, seuls de petits virages gauche-droite sont n√©cessaires ici, il suffit donc d'ajuster la valeur de ``A_1A`` ou ``B_1B`` √† chaque fois. Par exemple, si vous d√©placez la voiture vers l'avant √† gauche (``moveLeft()``), vous devez uniquement d√©finir la vitesse pour ``A_1A`` et mettre toutes les autres √† 0, ce qui fera tourner le moteur droit dans le sens horaire tandis que le moteur gauche ne bougera pas.

    .. code-block:: arduino
        

        void moveLeft(int speed) {
            analogWrite(A_1B, 0);
            analogWrite(A_1A, speed);
            analogWrite(B_1B, 0);
            analogWrite(B_1A, 0);
        }

        void moveRight(int speed) {
            analogWrite(A_1B, 0);
            analogWrite(A_1A, 0);
            analogWrite(B_1B, speed);
            analogWrite(B_1A, 0);
        }

* `Serial <https://www.arduino.cc/reference/en/language/functions/communication/serial/>`_

    Utilis√© pour la communication entre la carte Arduino et un ordinateur ou d'autres appareils.

    * ``Serial.begin()`` : D√©finit la vitesse de transmission des donn√©es en bits par seconde (baud) pour la transmission de donn√©es s√©rie.
    * ``Serial.println()`` : Imprime des donn√©es sur le port s√©rie sous forme de texte ASCII lisible suivi d'un caract√®re de retour chariot (ASCII 13, ou '\r') et d'un caract√®re de nouvelle ligne (ASCII 10, ou '\n'). 

* `if else <https://www.arduino.cc/reference/en/language/structure/control-structure/else/>`_

    La structure ``if else`` permet un contr√¥le plus pr√©cis du flux de code qu'une simple instruction if, en permettant de regrouper plusieurs tests.
