.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _follow_the_line:

4. Suivre la ligne
======================

La voiture est √©quip√©e d'un module de suivi de ligne, qui peut √™tre utilis√© pour faire suivre √† la voiture une ligne noire.

Lorsque le module de suivi de ligne d√©tecte la ligne noire, le moteur droit tourne tandis que le moteur gauche reste immobile, permettant ainsi √† la voiture de se d√©placer d'un pas vers l'avant gauche.
Au fur et √† mesure que la voiture se d√©place, le module de ligne sera d√©plac√© hors de la ligne, puis le moteur gauche tourne et le moteur droit ne tourne pas, la voiture se d√©place d'un pas vers la droite pour revenir sur la ligne.
En r√©p√©tant les deux √©tapes ci-dessus, la voiture peut se d√©placer le long de la ligne noire.

Avant de commencer le projet, vous devez construire une carte de courbe avec du ruban adh√©sif noir pour ligne, la largeur de ligne recommand√©e est entre 0,8-1,5 cm et l'angle du virage ne doit pas √™tre inf√©rieur √† 90 degr√©s.

**Composants requis**

Dans ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_l9110`
        - \-
    *   - :ref:`cpn_tt_motor`
        - \-
    *   - :ref:`cpn_track`
        - |link_track_buy|

**C√¢blage**


C'est un module num√©rique de suivi de ligne, lorsqu'une ligne noire est d√©tect√©e, il √©met 1 ; lorsqu'une ligne blanche est d√©tect√©e, il √©met une valeur de 0. De plus, vous pouvez ajuster sa distance de d√©tection gr√¢ce au potentiom√®tre sur le module.

.. raw:: html

    <iframe width="600" height="400" src="https://www.youtube.com/embed/mlCQgAq4elo?si=ZFmHeA6bVsDCPG0p" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Construisez le circuit selon le sch√©ma suivant.

.. list-table:: 
    :header-rows: 1

    * - Module de suivi de ligne
      - Carte R3
    * - S
      - 2
    * - V+
      - 5V
    * - G
      - GND

.. image:: img/car_4.png
    :width: 800


**Ajuster le module**


Avant de commencer le projet, vous devez ajuster la sensibilit√© du module.

C√¢blez selon le sch√©ma ci-dessus, puis alimentez la carte R3 (soit directement dans le c√¢ble USB soit dans le c√¢ble du bouton de la batterie 9V), sans t√©l√©charger le code.

Collez un ruban √©lectrique noir sur la table et placez la voiture dessus.

Observez la LED de signal sur le module pour vous assurer qu'elle s'allume sur la table blanche et s'√©teint sur le ruban noir.

Si ce n'est pas le cas, vous devez ajuster le potentiom√®tre sur le module, afin qu'il puisse faire l'effet ci-dessus.

.. image:: img/line_track_cali.JPG

**Code**

.. note::

    * Ouvrez le fichier ``4.follow_the_line.ino`` sous le chemin de ``3in1-kit\car_project\4.follow_the_line``.
    * Ou copiez ce code dans **Arduino IDE**.
    
    * Ou t√©l√©chargez le code via le `Arduino Web Editor <https://docs.arduino.cc/cloud/web-editor/tutorials/getting-started/getting-started-web-editor>`_.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/2779e9eb-b7b0-4d47-b8c0-78fed39828c3/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
Apr√®s avoir t√©l√©charg√© le code sur la carte R3, alignez le module de suivi de ligne sous la voiture avec la ligne noire, et vous verrez la voiture suivre la ligne.


**Comment √ßa fonctionne ?**

Dans ce code, il permet aux deux moteurs de micro-tourner √† gauche et √† droite en fonction de la valeur du module de suivi de ligne, afin que vous puissiez voir la voiture suivre la ligne noire.


#. Ajoutez la d√©finition de pin pour le module de suivi de ligne, ici il est r√©gl√© sur ``INPUT``. Initialisez √©galement le moniteur s√©rie et r√©glez le d√©bit en bauds √† 9600bps.

    .. code-block:: arduino

        ...
        const int lineTrack = 2;
        Serial.begin(9600);
        void setup() {
            ...
            pinMode(lineTrack, INPUT);
        }

#. Lisez la valeur du module de suivi de ligne, si elle est 1, alors laissez la voiture aller vers l'avant gauche ; sinon, aller vers l'avant droite. Vous pouvez √©galement ouvrir le moniteur s√©rie en cliquant sur l'ic√¥ne de la loupe dans le coin sup√©rieur droit pour voir le changement de la valeur du module de suivi de ligne sur la ligne noire et blanche avant de d√©brancher le c√¢ble USB.

    .. code-block:: arduino
    
        void loop() {

            int speed = 150;

            int lineColor = digitalRead(lineTrack); // 0:white    1:black
            Serial.println(lineColor); 
            if (lineColor) {
                moveLeft(speed);
            } else {
                moveRight(speed);
            }
        }

#. √Ä propos des fonctions ``moveLeft()`` et ``moveRight()``.

    Contrairement √† la fonction de virage gauche-droite dans le projet :ref:`car_move_code`, seuls de petits virages gauche-droite sont n√©cessaires ici, donc vous n'avez besoin d'ajuster la valeur de ``A_1A`` ou ``B_1B`` √† chaque fois. Par exemple, si vous vous d√©placez vers l'avant gauche (``moveLeft()``), vous devez uniquement r√©gler la vitesse sur ``A_1A`` et toutes les autres √† 0, ce qui fera tourner le moteur droit dans le sens des aiguilles d'une montre et le moteur gauche immobile.

    .. code-block:: arduino
    

        void moveLeft(int speed) {
            analogWrite(A_1B, 0);
            analogWrite(A_1A, speed);
            analogWrite(B_1B, 0);
            analogWrite(B_1A, 0);
        }

        void moveRight(int speed) {
            analogWrite(A_1B, 0);
            analogWrite(A_1A, 0);
            analogWrite(B_1B, speed);
            analogWrite(B_1A, 0);
        }

* `Serial <https://www.arduino.cc/reference/en/language/functions/communication/serial/>`_

    Utilis√© pour la communication entre la carte Arduino et un ordinateur ou d'autres appareils.

    * ``Serial.begin()`` : D√©finit le taux de donn√©es en bits par seconde (baud) pour la transmission de donn√©es s√©rie.
    * ``Serial.println()`` : Imprime des donn√©es sur le port s√©rie sous forme de texte ASCII lisible par l'homme suivi d'un caract√®re de retour chariot (ASCII 13, ou '\r') et d'un caract√®re de saut de ligne (ASCII 10, ou '\n'). 

* `if else <https://www.arduino.cc/reference/en/language/structure/control-structure/else/>`_

    Le ``if else`` permet un contr√¥le plus grand sur le flux de code que la simple instruction if, en permettant de regrouper plusieurs tests.
