.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _car_move_code:

2. Mouvement par Code
=====================

Dans le projet pr√©c√©dent, nous avons essay√© de contr√¥ler le fonctionnement du moteur en utilisant diff√©rents signaux de niveau pour l'entr√©e du module L9110.

Si nous modifions les signaux de niveau par le programme, alors nous pouvons contr√¥ler le mouvement de la voiture de mani√®re flexible.

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DE CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_l9110`
        - \-
    *   - :ref:`cpn_tt_motor`
        - \-


**C√¢blage**

.. raw:: html

    <iframe width="600" height="400" src="https://www.youtube.com/embed/Dpxpb4wSq5k?si=ep6p_jzhm-DPU9w4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Connectez les fils entre le module L9110 et la carte R3 selon le sch√©ma ci-dessous.

.. list-table:: 
    :widths: 25 25 50
    :header-rows: 1

    * - L9110 Module
      - R3 Board
      - Motor
    * - A-1B
      - 5
      - 
    * - A-1A
      - 6
      - 
    * - B-1B(B-2A)
      - 9
      - 
    * - B-1A
      - 10
      - 
    * - OB(B)
      - 
      - Black wire of right motor
    * - OA(B)
      - 
      - Red wire of right motor
    * - OB(A)
      - 
      - Black wire of left motor
    * - OA(A)
      - 
      - Red wire of left motor

.. image:: img/car_2.png
    :width: 800


**Code**

.. note::

    * Ouvrez le fichier ``2.move.ino`` dans le chemin ``3in1-kit\car_project\2.move``.
    * Ou copiez ce code dans **Arduino IDE**.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/6ff67dfb-a1c1-474b-a106-6acbb3a39e6f/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Apr√®s le t√©l√©chargement du code, la voiture se d√©placera respectivement vers l'avant, l'arri√®re, la gauche et la droite pendant deux secondes.

**Comment √ßa fonctionne ?**

Ce projet est essentiellement le m√™me que le pr√©c√©dent, impliquant de faire avancer, reculer, tourner √† gauche et √† droite la voiture, ainsi que de l'arr√™ter en fournissant diff√©rents niveaux de signal aux broches d'entr√©e du module L9110.

#. Initialisez les broches du module L9110.

    .. code-block:: arduino

        const int A_1B = 5;
        const int A_1A = 6;
        const int B_1B = 9;
        const int B_1A = 10;

        void setup() {
            pinMode(A_1B, OUTPUT);
            pinMode(A_1A, OUTPUT);
            pinMode(B_1B, OUTPUT);
            pinMode(B_1A, OUTPUT);
        }

#. R√©glez les broches d'entr√©e √† diff√©rents niveaux hauts ou bas pour contr√¥ler la rotation des moteurs gauche et droit, puis encapsulez-les dans des fonctions individuelles.

    .. code-block:: arduino

        void moveForward() {
            digitalWrite(A_1B, LOW);
            digitalWrite(A_1A, HIGH);
            digitalWrite(B_1B, HIGH);
            digitalWrite(B_1A, LOW);
        }

        void moveBackward() {
            digitalWrite(A_1B, HIGH);
            digitalWrite(A_1A, LOW);
            digitalWrite(B_1B, LOW);
            digitalWrite(B_1A, HIGH);
        }
        ...
#. Appelez ces fonctions dans ``loop()``.

    .. code-block:: arduino

        void loop() {
            moveForward();
            delay(2000);
            stopMove();
            delay(500);

            moveBackward();
            delay(2000);
            stopMove();
            delay(500);
        ...

* `digitalWrite(pin, value) <https://www.arduino.cc/reference/en/language/functions/digital-io/digitalwrite/>`_

    * ``pin`` : le num√©ro de la broche Arduino.
    * ``value`` : HIGH ou LOW.
    
    √âcrit une valeur HIGH ou LOW sur une broche num√©rique. Si la broche a √©t√© configur√©e comme une ``OUTPUT`` avec ``pinMode()``, sa tension sera r√©gl√©e sur la valeur correspondante : 5V (ou 3,3V sur les cartes 3,3V) pour HIGH, 0V (masse) pour LOW.

* `pinMode(pin, mode) <https://www.arduino.cc/reference/en/language/functions/digital-io/pinmode/>`_

    * ``pin`` : le num√©ro de la broche Arduino √† configurer.
    * ``mode`` : INPUT, OUTPUT ou INPUT_PULLUP.
    
    Configure la broche sp√©cifi√©e pour se comporter soit comme une entr√©e, soit comme une sortie.

* `delay(ms) <https://www.arduino.cc/reference/en/language/functions/time/delay/>`_

    * ``ms`` : le nombre de millisecondes de pause. Types de donn√©es autoris√©s : unsigned long.

    Interrompt le programme pendant la dur√©e (en millisecondes) sp√©cifi√©e en param√®tre. (Il y a 1000 millisecondes dans une seconde.)
