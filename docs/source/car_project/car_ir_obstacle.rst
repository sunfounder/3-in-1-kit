.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _car_ir_obstacle:

5. Spielen mit dem Hindernisvermeidungs-Modul
===============================================

Zwei Infrarot-Hindernisvermeidungsmodule sind an der Vorderseite des Autos angebracht, mit denen nahegelegene Hindernisse erkannt werden k√∂nnen.

In diesem Projekt kann das Auto frei vorw√§rts fahren. Wenn es auf ein Hindernis trifft, kann es dieses vermeiden und in andere Richtungen weiterfahren.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist sicherlich praktisch, ein komplettes Set zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Sie k√∂nnen sie auch √ºber die untenstehenden Links einzeln kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENEINF√úHRUNG
        - KAUF-LINK

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_l9110`
        - \-
    *   - :ref:`cpn_tt_motor`
        - \-
    *   - :ref:`cpn_avoid` 
        - |link_obstacle_avoidance_buy|

**Verdrahtung**

Das Hindernisvermeidungsmodul ist ein infraroter N√§herungssensor mit einstellbarer Entfernung. Sein Ausgang ist normalerweise hoch und wird niedrig, wenn ein Hindernis erkannt wird.

Bauen Sie den Schaltkreis entsprechend dem untenstehenden Diagramm auf.

.. list-table:: 
    :header-rows: 1

    * - Linkes IR-Modul
      - R4 Board
    * - AUSGANG
      - 8
    * - ERDE
      - GND
    * - VCC
      - 5V

.. list-table:: 
    :header-rows: 1

    * - Rechtes IR-Modul
      - R4 Board
    * - AUSGANG
      - 7
    * - ERDE
      - GND
    * - VCC
      - 5V

.. image:: img/car_5.png
    :width: 800

**Modul einstellen**

Bevor Sie mit dem Projekt beginnen, m√ºssen Sie den Erfassungsabstand des Moduls anpassen.

Verkabeln Sie gem√§√ü dem obigen Schema, schalten Sie das R4-Board ein (entweder indem Sie das USB-Kabel direkt einstecken oder das 9V-Batteriekabel anschlie√üen), ohne den Code hochzuladen.

Stellen Sie ein Notizbuch oder ein anderes flaches Objekt etwa 5 cm vor das IR-Hindernisvermeidungsmodul.

Verwenden Sie dann einen Schraubenzieher, um das Potentiometer auf dem Modul so zu drehen, dass die Signalanzeige auf dem Modul gerade aufleuchtet, um seinen maximalen Erfassungsabstand von 5 cm einzustellen.

Verwenden Sie die gleiche Methode, um ein weiteres Infrarotmodul anzupassen.

.. image:: img/ir_obs_cali.jpg


**Code**

.. note::

    * √ñffnen Sie die Datei ``5.obstacle_avoidance_module.ino`` im Pfad ``3in1-kit\car_project\5.obstacle_avoidance_module``.
    * Oder kopieren Sie diesen Code in die **Arduino IDE**.
    
    * Oder laden Sie den Code √ºber den `Arduino Web Editor <https://docs.arduino.cc/cloud/web-editor/tutorials/getting-started/getting-started-web-editor>`_ hoch.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/289ca80d-009f-4f60-b36d-1da6c5e10233/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Das Auto wird vorw√§rts fahren, sobald der Code erfolgreich hochgeladen wurde. Wenn das linke Infrarot-Modul ein Hindernis erkennt, f√§hrt es r√ºckw√§rts nach links; erkennt das rechte Infrarot-Modul ein Hindernis, f√§hrt es r√ºckw√§rts nach rechts; erkennen beide Seiten ein Hindernis, f√§hrt es geradlinig r√ºckw√§rts.

**Wie funktioniert das?**

Dieses Projekt basiert auf den Werten der linken und rechten Infrarot-Hindernisvermeidungsmodule, um das Auto die entsprechende Aktion ausf√ºhren zu lassen.

#. F√ºgen Sie die Pin-Definition f√ºr die 2 Hindernisvermeidungsmodule hinzu, hier sind sie auf ``INPUT`` eingestellt.

    .. code-block:: arduino

        ...
        const int rightIR = 7;
        const int leftIR = 8;

        void setup() {
        ...

        //IR obstacle
            pinMode(leftIR, INPUT);
            pinMode(rightIR, INPUT);
        }


#. Lesen Sie die Werte der linken und rechten Infrarotmodule und lassen Sie das Auto die entsprechende Aktion ausf√ºhren.

    .. code-block:: arduino

        void loop() {

            int left = digitalRead(leftIR);   // 0: Obstructed  1: Empty
            int right = digitalRead(rightIR);
            int speed = 150;

            if (!left && right) {
                backLeft(speed);
            } else if (left && !right) {
                backRight(speed);
            } else if (!left && !right) {
                moveBackward(speed);
            } else {
                moveForward(speed);
            }
        }

    * Wenn das linke IR-Modul 0 ist (Hindernis erkannt) und das rechte IR-Modul 1 ist, f√§hrt das Auto r√ºckw√§rts nach links.
    * Wenn das rechte IR-Modul 0 ist (Hindernis erkannt), f√§hrt das Auto r√ºckw√§rts nach rechts.
    * Wenn beide IR-Module gleichzeitig ein Hindernis erkennen, f√§hrt das Auto r√ºckw√§rts.
    * Ansonsten wird das Auto weiter vorw√§rts fahren.


#. √úber die Funktion ``backLeft()``.

    Wenn der rechte Motor gegen den Uhrzeigersinn dreht und der linke Motor nicht dreht, f√§hrt das Auto r√ºckw√§rts nach links.

    .. code-block:: arduino

        void backLeft(int speed) {
            analogWrite(A_1B, speed);
            analogWrite(A_1A, 0);
            analogWrite(B_1B, 0);
            analogWrite(B_1A, 0);
        }

#. √úber die Funktion ``backRight()``.

    Wenn der linke Motor im Uhrzeigersinn dreht und der rechte Motor nicht dreht, f√§hrt das Auto r√ºckw√§rts nach rechts.

    .. code-block:: arduino

        void backRight(int speed) {
            analogWrite(A_1B, 0);
            analogWrite(A_1A, 0);
            analogWrite(B_1B, 0);
            analogWrite(B_1A, speed);
        }

* `&& <https://www.arduino.cc/reference/en/language/structure/boolean-operators/logicaland/>`_: Logisches UND ergibt nur dann wahr, wenn beide Operanden wahr sind.

* `! <https://www.arduino.cc/reference/en/language/structure/boolean-operators/logicalnot/>`_: Logisches NICHT ergibt wahr, wenn der Operand falsch ist und umgekehrt.
