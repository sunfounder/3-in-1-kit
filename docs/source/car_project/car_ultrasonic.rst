.. note:: 

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _car_ultrasonic:

6. Jouer avec le module ultrason
===================================

Dans le projet :ref:`car_ir_obstacle`, les deux modules de d√©tection d'obstacles infrarouges sont utilis√©s pour √©viter les obstacles, mais leur port√©e de d√©tection est limit√©e, ce qui peut rendre l'√©vitement des obstacles tardif.

Dans ce projet, nous utilisons un module ultrason pour effectuer une d√©tection √† longue distance, permettant ainsi √† la voiture de d√©tecter les obstacles √† une distance plus grande et de prendre une d√©cision appropri√©e.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est tr√®s pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_l9110`
        - \-
    *   - :ref:`cpn_tt_motor`
        - \-
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|

**C√¢blage**

Un module capteur ultrason est un instrument qui mesure la distance d'un objet en utilisant des ondes sonores ultrasoniques. 
Il poss√®de deux sondes : une pour √©mettre les ondes ultrasoniques et une autre pour les recevoir, transformant ainsi le temps d'envoi et de r√©ception en une distance, d√©tectant ainsi la distance entre l'appareil et un obstacle.

Construisez maintenant le circuit selon le sch√©ma suivant.

.. list-table:: 
    :header-rows: 1

    * - Module Ultrason
      - Carte R4
    * - Vcc
      - 5V
    * - Trig
      - 3
    * - Echo
      - 4
    * - Gnd
      - GND

.. image:: img/car_6.png
    :width: 800

**Code**

.. note::

    * Ouvrez le fichier ``6.ultrasonic_module.ino`` dans le chemin ``3in1-kit\car_project\6.ultrasonic_module``.
    * Ou copiez ce code dans **Arduino IDE**.
    * Ou t√©l√©chargez le code via l'`√âditeur Web Arduino <https://docs.arduino.cc/cloud/web-editor/tutorials/getting-started/getting-started-web-editor>`_.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/ae97f966-9d72-40e6-aa9f-e0767ddf5bd5/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Une fois le code t√©l√©charg√© avec succ√®s, dirigez la voiture vers un mur. Si la distance est trop grande, elle avancera ; si elle est trop proche, elle reculera ; si elle est √† une distance s√©curis√©e, elle s'arr√™tera.

**Comment cela fonctionne-t-il ?**

Ce projet repose sur la distance lue par le module ultrason pour faire bouger la voiture en cons√©quence.

#. Ajoutez la d√©finition des broches pour le module ultrason : ``trigPin`` est utilis√© pour transmettre les ondes ultrasoniques, donc r√©glez-le sur ``OUTPUT`` ; ``echoPin`` est r√©gl√© sur ``INPUT`` pour recevoir les ondes ultrasoniques.

    .. code-block:: arduino

        ...
        const int trigPin = 3;
        const int echoPin = 4;

        void setup() {
        ...

        //ultrasonic
            pinMode(echoPin, INPUT);
            pinMode(trigPin, OUTPUT);
        }

#. Lisez d'abord la valeur de distance obtenue √† partir du module ultrasonique. Si la distance est sup√©rieure √† 25 cm, laissez la voiture avancer ; si la distance est comprise entre 2 et 10 cm, laissez la voiture reculer, sinon (entre 10 et 25 cm), arr√™tez-la.

    .. code-block:: arduino

        void loop() {
            float distance = readSensorData();
            if (distance > 25) {
                moveForward(200);
            }
            else if (distance < 10 && distance > 2) {
                moveBackward(200);
            } else {
                stopMove();
            }
        }

#. √Ä propos de la fonction ``readSensorData()``.

    L'√©metteur du module ultrasonique transmet un signal d'onde carr√©e de 10 ¬µs toutes les 2 ¬µs, et le r√©cepteur re√ßoit un signal de niveau haut s'il y a un obstacle dans la port√©e. Utilisez la fonction ``pulseIn()`` pour enregistrer le temps entre l'envoi et la r√©ception, divisez par la vitesse du son (340 m/s), puis divisez encore par 2. Le r√©sultat est la distance entre ce module et l'obstacle, en cm.

    .. code-block:: arduino

        float readSensorData() {
            digitalWrite(trigPin, LOW);
            delayMicroseconds(2);
            digitalWrite(trigPin, HIGH);
            delayMicroseconds(10);
            digitalWrite(trigPin, LOW);
            float distance = pulseIn(echoPin, HIGH) / 58.00; // √âquivalent √† (340m/s*1¬µs)/2
            return distance;
        }

* `pulseIn(pin, value) <https://www.arduino.cc/reference/en/language/functions/advanced-io/pulsein/>`_

    * ``pin`` : le num√©ro de la broche Arduino sur laquelle vous souhaitez lire l'impulsion. Types de donn√©es autoris√©s : int.
    * ``value`` : type d'impulsion √† lire : soit HIGH, soit LOW. Types de donn√©es autoris√©s : int.

    Lit une impulsion (soit HIGH, soit LOW) sur une broche. Par exemple, si la valeur est HIGH, ``pulseIn()`` attend que la broche passe de LOW √† HIGH, commence le chronom√©trage, puis attend que la broche passe √† LOW et arr√™te le chronom√©trage.
