.. note::

    Bonjour et bienvenue dans la Communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez [|link_sf_facebook|] et rejoignez-nous aujourd'hui !

.. _car_ultrasonic:

6. Jouer avec le module ultrasonique
=====================================

Dans le projet :ref:`car_ir_obstacle`, les 2 modules infrarouges d'√©vitement d'obstacles sont utilis√©s pour √©viter les obstacles, mais la distance de d√©tection du module d'√©vitement d'obstacle IR est courte, ce qui peut rendre la voiture trop tardive pour √©viter les obstacles.

Dans ce projet, nous utilisons un module ultrasonique pour effectuer une d√©tection √† longue distance, afin que la voiture puisse d√©tecter les obstacles √† une distance plus √©loign√©e et prendre une d√©cision.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - 3 in 1 Starter Kit
        - 380+
        - |link_3IN1_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_uno`
        - |link_Uno_R3_buy|
    *   - :ref:`cpn_l9110`
        - \-
    *   - :ref:`cpn_tt_motor`
        - \-
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|

**C√¢blage**

Un module de capteur ultrasonique est un instrument qui mesure la distance √† un objet √† l'aide d'ondes sonores ultrasoniques.
Il poss√®de deux sondes. L'une est pour envoyer des ondes ultrasoniques et l'autre pour recevoir les ondes et transformer le temps d'envoi et de r√©ception en une distance, d√©tectant ainsi la distance entre l'appareil et un obstacle.

.. raw:: html

    <iframe width="600" height="400" src="https://www.youtube.com/embed/qx9ZH-YnAkg?si=wfrsDrmGCPa2nYPD" title="Lecteur vid√©o YouTube" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Construisez maintenant le circuit selon le sch√©ma suivant.

.. list-table:: 
    :header-rows: 1

    * - Ultrasonic Module
      - R3 Board
    * - Vcc
      - 5V
    * - Trig
      - 3
    * - Echo
      - 4
    * - Gnd
      - GND

.. image:: img/car_6.png
    :width: 800


**Code**

.. note::

    * Ouvrez le fichier ``6.ultrasonic_module.ino`` situ√© dans le dossier ``3in1-kit\car_project\6.ultrasonic_module``.
    * Ou copiez ce code dans **Arduino IDE**.
    
    * Ou t√©l√©chargez le code via `Arduino Web Editor <https://docs.arduino.cc/cloud/web-editor/tutorials/getting-started/getting-started-web-editor>`_.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/ae97f966-9d72-40e6-aa9f-e0767ddf5bd5/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s le t√©l√©chargement r√©ussi du code, orientez la voiture vers un mur. Si la distance est trop grande, elle avancera ; si elle est trop proche, elle reculera ; si elle est √† une distance s√ªre, elle s'arr√™tera.

**Comment √ßa fonctionne ?**

Ce projet se base sur la distance lue par le module ultrasonique pour faire bouger la voiture en cons√©quence.

#. Ajoutez la d√©finition de pin pour le module ultrasonique, ``trigPin`` est utilis√© pour transmettre l'onde ultrasonique, r√©glez-le sur ``OUTPUT`` ; ``echoPin`` est r√©gl√© sur ``INPUT`` pour recevoir l'onde ultrasonique.

    .. code-block:: arduino

        ...
        const int trigPin = 3;
        const int echoPin = 4;

        void setup() {
        ...

        //ultrasonic
            pinMode(echoPin, INPUT);
            pinMode(trigPin, OUTPUT);
        }

#. Lisez d'abord la valeur de distance obtenue √† partir du module ultrasonique, si la distance est sup√©rieure √† 25, laissez la voiture avancer ; si la distance est entre 2-10cm, laissez la voiture reculer, sinon (entre 10~25) arr√™tez.

    .. code-block:: arduino

        void loop() {
            float distance = readSensorData();
            if (distance > 25) {
                moveForward(200);
            }
            else if (distance < 10 && distance > 2) {
                moveBackward(200);
            } else {
                stopMove();
            }
        }

#. √Ä propos de la fonction ``readSensorData()``.

    L'√©metteur du module ultrasonique transmet un signal carr√© de 10us toutes les 2us, et le r√©cepteur re√ßoit un signal de niveau haut s'il y a un obstacle dans la port√©e. Utilisez la fonction ``pulseIn()`` pour enregistrer le temps de l'envoi √† la r√©ception, divisez par la vitesse du son 340m/s, puis divisez par 2, le r√©sultat est la distance entre ce module et l'obstacle en unit√©s : cm.

    .. code-block:: arduino

        float readSensorData() {
            digitalWrite(trigPin, LOW);
            delayMicroseconds(2);
            digitalWrite(trigPin, HIGH);
            delayMicroseconds(10);
            digitalWrite(trigPin, LOW);
            float distance = pulseIn(echoPin, HIGH) / 58.00; //Equivalent to (340m/s*1us)/2
            return distance;
        }

* `pulseIn(pin, value) <https://www.arduino.cc/reference/en/language/functions/advanced-io/pulsein/>`_

    * ``pin`` : le num√©ro du pin Arduino sur lequel vous voulez lire l'impulsion. Types de donn√©es autoris√©s : int.
    * ``value`` : type d'impulsion √† lire : soit HIGH, soit LOW. Types de donn√©es autoris√©s : int.

    Lit une impulsion (soit HIGH, soit LOW) sur un pin. Par exemple, si la valeur est HIGH, ``pulseIn()`` attend que le pin passe de LOW √† HIGH, commence √† chronom√©trer, puis attend que le pin redevienne LOW et arr√™te le chronom√©trage.

